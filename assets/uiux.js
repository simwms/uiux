/* jshint ignore:start */

/* jshint ignore:end */

define('uiux/adapters/account', ['exports', 'ember', 'uiux/adapters/application', 'uiux/config/environment'], function (exports, Ember, ApplicationAdapter, ENV) {

  'use strict';

  var AccountAdapter;

  AccountAdapter = ApplicationAdapter['default'].extend({
    namespace: ENV['default'].simwmsNamespace,
    host: ENV['default'].simwmsHost
  });

  exports['default'] = AccountAdapter;

});
define('uiux/adapters/application', ['exports', 'ember-data', 'uiux/config/environment'], function (exports, DS, ENV) {

  'use strict';

  var ApplicationAdapter;

  ApplicationAdapter = DS['default'].ActiveModelAdapter.extend({
    namespace: ENV['default'].namespace,
    host: ENV['default'].host,
    shouldReloadAll: function shouldReloadAll() {
      return true;
    },
    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return true;
    }
  });

  exports['default'] = ApplicationAdapter;

});
define('uiux/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'uiux/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  var App;

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('uiux/collections/appointment_relationships', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var AppointmentRelationshipsCollection, TempObject;

  TempObject = Ember['default'].Object.extend({
    self: Ember['default'].computed(function () {
      return this;
    }),
    save: function save(store) {
      return store.createRecord("appointmentRelationship", {
        dropoff: this.get("dropoff"),
        pickup: this.get("pickup")
      }).save();
    }
  });

  AppointmentRelationshipsCollection = Ember['default'].ArrayProxy.extend({
    relationCores: Ember['default'].computed("pickup.id", "content.@each.permaindex", "dropoffs.@each.id", function () {
      return this.get("dropoffs").map((function (_this) {
        return function (dropoff) {
          return _this.findOrCreateRelationship(dropoff, _this.get("pickup"));
        };
      })(this));
    }),
    findOrCreateRelationship: function findOrCreateRelationship(dropoff, pickup) {
      var permaindex, relationship;
      permaindex = dropoff.get("id") + "-" + pickup.get("id");
      if (relationship = this.findBy("permaindex", permaindex)) {
        return relationship;
      }
      return TempObject.create({
        dropoff: dropoff,
        pickup: pickup
      });
    }
  });

  exports['default'] = AppointmentRelationshipsCollection;

  exports.TempObject = TempObject;

});
define('uiux/collections/appointments', ['exports', 'ember', 'uiux/utils/punch-card'], function (exports, Ember, punch_card) {

  'use strict';

  var AppointmentsCollection, processMacro, typeChoices;

  typeChoices = Ember['default'].A([]);

  typeChoices.pushObject({
    value: "dropoff",
    presentation: "drop off"
  });

  typeChoices.pushObject({
    value: "pickup",
    presentation: "pick up"
  });

  typeChoices.pushObject({
    value: "both",
    presentation: "both"
  });

  AppointmentsCollection = Ember['default'].ArrayProxy.extend({
    appointments: Ember['default'].computed.filterBy("content", "id")
  });

  AppointmentsCollection.fromAppointments = function (appointments) {
    return AppointmentsCollection.create({
      content: appointments
    });
  };

  processMacro = function (params) {
    var macro;
    macro = params.macro;
    switch (macro) {
      case "all-dropoffs":
        params["fulfilled_at"] = true;
        params["dropoff"] = true;
        params["both"] = true;
        break;
      case "all":
        params["everything"] = true;
        break;
      case "fulfilled":
        params["fulfilled_at"] = true;
        break;
      case "future":
        params["expected_at_start"] = punch_card.finishOfWorkday().format();
        break;
      case "today":
        params["expected_at_start"] = punch_card.startOfWorkday().format();
        params["expected_at_finish"] = punch_card.finishOfWorkday().format();
        break;
      default:
        "do nothing";
    }
    delete params["macro"];
    return params;
  };

  AppointmentsCollection.processMacro = processMacro;

  AppointmentsCollection.typeChoices = typeChoices;

  exports['default'] = AppointmentsCollection;

  exports.AppointmentsCollection = AppointmentsCollection;
  exports.processMacro = processMacro;
  exports.typeChoices = typeChoices;

});
define('uiux/collections/batch_relationships', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var BatchRelationshipsCollection, TempObject;

  TempObject = Ember['default'].Object.extend({
    self: Ember['default'].computed(function () {
      return this;
    }),
    save: function save(store) {
      return store.createRecord("batchRelationship", {
        batch: this.get("batch"),
        appointment: this.get("appointment")
      }).save();
    }
  });

  BatchRelationshipsCollection = Ember['default'].ArrayProxy.extend({
    persistEverything: function persistEverything(store) {
      return Ember['default'].RSVP.all(this.get("temporaryRelations").map(function (relationship) {
        return relationship.save(store);
      }));
    },
    destroyEverything: function destroyEverything() {
      return Ember['default'].RSVP.all(this.get("persistedRelations").map(function (relationship) {
        return relationship.destroyRecord();
      }));
    },
    temporaryRelations: Ember['default'].computed.filter("relationCores", function (relationship) {
      return relationship.get("isLoaded") !== true;
    }),
    persistedRelations: Ember['default'].computed.alias("content"),
    relationCores: Ember['default'].computed("appointment.id", "content.@each.permaindex", "batches.@each.id", function () {
      return this.get("batches").map((function (_this) {
        return function (batch) {
          return _this.findOrCreateRelationship(batch, _this.get("appointment"));
        };
      })(this));
    }),
    findOrCreateRelationship: function findOrCreateRelationship(batch, appointment) {
      var permaindex, relationship;
      permaindex = appointment.get("id") + "-" + batch.get("id");
      if (relationship = this.findBy("permaindex", permaindex)) {
        return relationship;
      }
      return TempObject.create({
        batch: batch,
        appointment: appointment
      });
    }
  });

  exports['default'] = BatchRelationshipsCollection;

});
define('uiux/collections/batches', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var BatchesCollection, uniqueBy;

  uniqueBy = function (key) {
    var hash;
    hash = {};
    return function (array, thing) {
      if (hash[thing.get(key)] != null) {
        return array;
      }
      hash[thing.get(key)] = true;
      array.pushObject(thing);
      return array;
    };
  };

  BatchesCollection = Ember['default'].ArrayProxy.extend({
    batches: Ember['default'].computed.alias("content"),
    uniqAppointmentCount: Ember['default'].computed.alias("uniqAppointmentBatches.length"),
    appointments: Ember['default'].computed.mapBy("batches", "appointment"),
    uniqAppointments: Ember['default'].computed("appointments.@each.id", function () {
      return this.get("appointments").reduce(uniqueBy("id"), Ember['default'].A());
    }),
    uniqAppointmentBatches: Ember['default'].computed("batches.@each.appointment.id", function () {
      return this.get("batches").reduce(uniqueBy("appointment.id"), Ember['default'].A());
    })
  });

  BatchesCollection.fromBatches = function (batches) {
    return BatchesCollection.create({
      content: batches
    });
  };

  exports['default'] = BatchesCollection;

});
define('uiux/collections/docks', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksCollection;

  DocksCollection = Ember['default'].ArrayProxy.extend({
    docks: Ember['default'].computed.alias("content"),
    availableDocks: Ember['default'].computed.filterBy("docks", "status", "free"),
    firstAvailableDock: Ember['default'].computed.alias("availableDocks.firstPresent"),
    dockChoices: Ember['default'].computed.map("docks", function (dock) {
      return {
        value: dock,
        presentation: [dock.get("nameOrId"), dock.get("status")].join(": ")
      };
    })
  });

  DocksCollection.fromTiles = function (recordArray) {
    return DocksCollection.create({
      content: recordArray.filterBy("tileType", "barn")
    });
  };

  exports['default'] = DocksCollection;

});
define('uiux/collections/pictures', ['exports', 'ember', 'uiux/utils/s3'], function (exports, Ember, s3) {

  'use strict';

  var PicturesCollection, TempObject;

  TempObject = Ember['default'].Object.extend({
    save: function save(store) {
      return s3.makeBucket().upload(this).then((function (_this) {
        return function (arg) {
          var ETag, Location, key;
          Location = arg.Location, ETag = arg.ETag, key = arg.key;
          return store.createRecord("picture", {
            assocId: _this.get("parentId"),
            assocType: _this.get("parentType"),
            location: Location,
            etag: ETag,
            key: key
          }).save();
        };
      })(this));
    }
  });

  PicturesCollection = Ember['default'].ArrayProxy.extend({
    files: Ember['default'].computed.alias("content"),
    tmpPictures: Ember['default'].computed.map("files", function (file) {
      return TempObject.create({
        parentType: this.get("parentType"),
        parentId: this.get("parent.id"),
        file: file
      });
    }),
    save: function save(store) {
      return Ember['default'].RSVP.all(this.get("tmpPictures").map(function (pic) {
        return pic.save(store);
      }));
    }
  });

  PicturesCollection.fromWeighticket = function (weighticket) {
    return PicturesCollection.create({
      parentType: "weighticket",
      parent: weighticket,
      content: weighticket.getWithDefault("dataUris", [])
    });
  };

  exports['default'] = PicturesCollection;

});
define('uiux/collections/stations', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsCollection;

  StationsCollection = Ember['default'].ArrayProxy.extend({
    stations: Ember['default'].computed.alias("content"),
    stationChoices: Ember['default'].computed.map("stations", function (station) {
      return {
        value: station,
        presentation: station.get("nameOrId")
      };
    })
  });

  StationsCollection.fromTiles = function (recordArray) {
    return StationsCollection.create({
      content: recordArray.filterBy("tileType", "scale")
    });
  };

  exports['default'] = StationsCollection;

});
define('uiux/collections/tiles', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var TilesCollection, rejectBy;

  rejectBy = function (arrayKey, attrKey, value) {
    return Ember['default'].computed(arrayKey + ".@each." + attrKey, function () {
      return this.get(arrayKey).rejectBy(attrKey, value);
    });
  };

  TilesCollection = Ember['default'].ArrayProxy.extend({
    tiles: Ember['default'].computed.alias("content"),
    workableTiles: rejectBy("content", "tileType", "road"),
    employeeTiles: rejectBy("workableTiles", "tileType", "warehouse"),
    employeeChoices: Ember['default'].computed.map("employeeTiles", function (tile) {
      return {
        value: tile,
        presentation: tile.get("fullTitle")
      };
    }),
    workableChoices: Ember['default'].computed.map("workableTiles", function (tile) {
      return {
        value: tile,
        presentation: tile.get("fullTitle")
      };
    })
  });

  TilesCollection.fromTiles = function (tiles) {
    return TilesCollection.create({
      content: tiles
    });
  };

  exports['default'] = TilesCollection;

});
define('uiux/collections/trucks', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var TrucksCollection, filterBy, rejectBy;

  rejectBy = function (arrayKey, attrKey, value) {
    return Ember['default'].computed(arrayKey + ".@each." + attrKey, function () {
      return this.get(arrayKey).rejectBy(attrKey, value);
    });
  };

  filterBy = Ember['default'].computed.filterBy;

  TrucksCollection = Ember['default'].ArrayProxy.extend({
    trucks: rejectBy("content", "position", "departed"),
    enters: filterBy("rawEnters", "position", "going to dock"),
    exits: filterBy("rawExits", "position", "going to exit"),
    loads: filterBy("rawLoads", "position", "at dock"),
    status: Ember['default'].computed("enters.length", "exits.length", "loads.length", function () {
      if (this.get("enters.length") > 0 || this.get("loads.length") > 0) {
        return "busy";
      }
      return "free";
    })
  });

  TrucksCollection.fromTile = function (arg) {
    var enter, exit, load, trucks;
    enter = arg.enter, exit = arg.exit, load = arg.load;
    trucks = Ember['default'].A([]).pushObjects(enter).pushObjects(exit).pushObjects(load);
    return TrucksCollection.create({
      content: trucks,
      rawEnters: enter,
      rawExits: exit,
      rawLoads: load
    });
  };

  TrucksCollection.fromTrucks = function (trucks) {
    return TrucksCollection.create({
      content: trucks
    });
  };

  exports['default'] = TrucksCollection;

});
define('uiux/collections/warehouses', ['exports', 'ember', 'uiux/utils/debug-ex'], function (exports, Ember, D) {

  'use strict';

  var WarehousesCollection;

  WarehousesCollection = Ember['default'].ArrayProxy.extend({
    warehouseSorting: ["batchCount:asc"],
    warehouses: Ember['default'].computed.alias("content"),
    warehousesByEmptiness: Ember['default'].computed.sort("warehouses", "warehouseSorting"),
    firstEmptyWarehouse: Ember['default'].computed.alias("warehousesByEmptiness.firstObject"),
    warehouseChoices: Ember['default'].computed.map("warehousesByEmptiness", function (warehouse) {
      return {
        value: warehouse,
        presentation: [warehouse.get("nameOrId"), warehouse.getWithDefault("batchesCount", 0)].join(": ")
      };
    }),
    batchCounts: Ember['default'].computed.mapBy("warehouses", "batches.length"),
    totalBatches: Ember['default'].computed.sum("batchCounts")
  });

  WarehousesCollection.fromTiles = function (recordArray) {
    return WarehousesCollection.create({
      content: recordArray.filterBy("tileType", "warehouse")
    });
  };

  exports['default'] = WarehousesCollection;

});
define('uiux/components/adaptive-camera', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var AdaptiveCameraComponent;

  AdaptiveCameraComponent = Ember['default'].Component.extend({
    classNames: ["adaptive-camera"],
    acceptableTypes: ["img-cgi", "user-media"],
    isImageCam: Ember['default'].computed.alias("camera.isImageCam"),
    isWebCam: Ember['default'].computed.alias("camera.isWebCam"),
    isKnown: Ember['default'].computed.alias("camera.isKnown")
  });

  exports['default'] = AdaptiveCameraComponent;

});
define('uiux/components/em-form-for', ['exports', 'ember-form-tool/components/form-for'], function (exports, FormForComponent) {

	'use strict';

	exports['default'] = FormForComponent['default'].extend({});

});
define('uiux/components/em-form-input', ['exports', 'ember-form-tool/components/form-input'], function (exports, FormInputComponent) {

	'use strict';

	exports['default'] = FormInputComponent['default'].extend({});

});
define('uiux/components/ember-list-standin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var EmberListStandinComponent;

  EmberListStandinComponent = Ember['default'].Component.extend({
    items: Ember['default'].A()
  });

  exports['default'] = EmberListStandinComponent;

});
define('uiux/components/ember-webcam-input', ['exports', 'ember-webcam-input/components/ember-webcam-input'], function (exports, ember_webcam_input) {

	'use strict';



	exports.default = ember_webcam_input.default;

});
define('uiux/components/inventory-table', ['exports', 'ember', 'uiux/utils/fun-ex'], function (exports, Ember, FunEx) {

  'use strict';

  var DoubleHash,
      InventoryTableComponent,
      followingOrders,
      reduce,
      zipWith,
      slice = [].slice;

  followingOrders = function (orders, hash, f) {
    var o1;
    o1 = orders.map(function (order) {
      return hash[order] || [{}];
    });
    return reduce(o1, [], function (xs, ys) {
      return xs.concat(ys);
    });
  };

  reduce = function (xs, init, f) {
    return xs.reduce(f, init);
  };

  zipWith = function (arg, arg1, f) {
    var x, xs, y, ys;
    x = arg[0], xs = 2 <= arg.length ? slice.call(arg, 1) : [];
    y = arg1[0], ys = 2 <= arg1.length ? slice.call(arg1, 1) : [];
    if (x == null) {
      return [];
    }
    return [f(x, y)].concat(zipWith(xs, ys, f));
  };

  DoubleHash = (function () {
    function DoubleHash() {
      this.dbRow = {};
    }

    DoubleHash.prototype.insertAt = function (krow, kcol, payload) {
      var base, base1;
      (base = this.dbRow)[krow] || (base[krow] = {});
      return (base1 = this.dbRow[krow])[kcol] || (base1[kcol] = payload);
    };

    DoubleHash.prototype.inOrderOf = function (rowNames, colNames) {
      return followingOrders(rowNames, this.dbRow).map(function (rows) {
        return followingOrders(colNames, rows);
      });
    };

    return DoubleHash;
  })();

  InventoryTableComponent = Ember['default'].Component.extend({
    tableClassNames: "table",
    classNames: ['inventory-table-container'],
    rowNames: [1, 2, 3, 4, 5, 6],
    colNames: "abcde".split(""),
    bodyRows: FunEx['default'].computed("colNames.@each", "rowNames.@each", "goods.@each.rowName", "goods.@each.colName", function () {
      var dubs, rows;
      if (!(this.get("goods.firstObject.rowName") != null && this.get("goods.firstObject.colName") != null)) {
        return;
      }
      dubs = reduce(this.get("goods"), new DoubleHash(), function (dh, good) {
        dh.insertAt(good.get("rowName"), good.get("colName"), good);
        return dh;
      });
      rows = dubs.inOrderOf(this.get("rowNames"), this.get("colNames"));
      return zipWith(this.get("rowNames"), rows, function (name, row) {
        return Ember['default'].Object.create({
          rowName: name,
          cells: row
        });
      });
    }),
    actions: {
      cellTouch: function cellTouch(cell) {
        return this.sendAction("action", cell);
      }
    }
  });

  exports['default'] = InventoryTableComponent;

});
define('uiux/components/just-tile', ['exports', 'ember', 'ember-cpm'], function (exports, Ember, CPM) {

  'use strict';

  var JustTile;

  JustTile = Ember['default'].Component.extend({
    tagName: "g",
    classNameBindings: ["tileType"],
    attributeBindings: ["transform"],
    tile: Ember['default'].computed.alias("model"),
    x: CPM['default'].Macros.product("parentView.pxPerWidth", "model.x"),
    y: CPM['default'].Macros.product("parentView.pxPerHeight", "model.y"),
    width: CPM['default'].Macros.product("parentView.pxPerWidth", "model.width"),
    height: CPM['default'].Macros.product("parentView.pxPerHeight", "model.height"),
    tileType: Ember['default'].computed.alias("tile.tileType"),
    transform: CPM['default'].Macros.fmt("x", "y", "translate(%@, %@)"),
    rectX: CPM['default'].Macros.quotient("width", -2),
    rectY: CPM['default'].Macros.quotient("height", -2),
    cornerX: 10,
    cornerY: 10,
    strokeWidth: 2,
    rectW: CPM['default'].Macros.difference("width", 1),
    rectH: CPM['default'].Macros.difference("height", 1),
    stroke: CPM['default'].Macros.conditional("tile.hasCamera", "#b71c1c", "#212121"),
    fill: Ember['default'].computed("tileType", function () {
      switch (this.get("tileType")) {
        case "barn":
          return "#ffcdd2";
        case "road":
          return "#424242";
        case "warehouse":
          return "#d7ccc8";
        case "station":
          return "#f0f4c3";
        case "scale":
          return "#b2ebf2";
        default:
          return "#fff";
      }
    }),
    iconText: Ember['default'].computed("tileType", function () {
      return String.fromCharCode((function () {
        switch (this.get("tileType")) {
          case "barn":
            return 0xf239;
          case "road":
            return 0xf018;
          case "warehouse":
            return 0xf1b3;
          case "station":
            return 0xf090;
          case "scale":
            return 0xf1ec;
          default:
            return "?";
        }
      }).call(this));
    }),
    eventManager: Ember['default'].Object.create({
      click: function click(event, view) {
        return view.sendAction("action", view.get("model"), event);
      }
    })
  });

  exports['default'] = JustTile;

});
define('uiux/components/news-ticker', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var NewsTickerComponent;

  NewsTickerComponent = Ember['default'].Component.extend({
    classNames: ["news-ticker"],
    actions: {
      openMessage: function openMessage(message) {
        return alert(message);
      }
    }
  });

  exports['default'] = NewsTickerComponent;

});
define('uiux/components/panel-collapsible', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var PanelCollapsibleComponent, isBlank;

  isBlank = Ember['default'].isBlank;

  PanelCollapsibleComponent = Ember['default'].Component.extend({
    classNames: ["panel", "panel-collapsible"],
    classNameBindings: ["isActive:panel-primary:panel-default"],
    activationKey: "id",
    init: function init() {
      var key;
      this._super.apply(this, arguments);
      key = this.get("activationKey");
      return this.isActive = Ember['default'].computed("model." + key, "active", function () {
        var id;
        id = this.get("model." + key);
        if (isBlank(this.get("model")) && isBlank(this.get("active"))) {
          return true;
        }
        return id === this.get("active");
      });
    },
    actions: {
      clickHeader: function clickHeader() {
        return this.sendAction('action', this.get("model"));
      }
    }
  });

  exports['default'] = PanelCollapsibleComponent;

});
define('uiux/components/promise-button', ['exports', 'promise-button/components/promise-button'], function (exports, PromiseButtonComponent) {

	'use strict';

	exports['default'] = PromiseButtonComponent['default'];

});
define('uiux/components/vector-canvas', ['exports', 'ember', 'ember-cpm'], function (exports, Ember, CPM) {

  'use strict';

  var VectorCanvasComponent, assertNumericality;

  assertNumericality = function (x) {
    Ember['default'].assert("Expected a number, instead got " + x, x <= 0 || x > 0);
    return x;
  };

  VectorCanvasComponent = Ember['default'].Component.extend({
    classNames: ['vector-canvas'],
    attributeBindings: ["width", "height"],
    pxPerWidth: 55,
    pxPerHeight: 55,
    canvasTransform: CPM['default'].Macros.fmt("translate.x", "translate.y", "translate(%@, %@)"),
    init: function init() {
      this.translate = Ember['default'].Object.create({
        x: 0,
        y: 0
      });
      this.translate.set("x", this.canvasThirdWidth());
      this.translate.set("y", this.canvasQuarterHeight());
      return this._super.apply(this, arguments);
    },
    didInsertElement: function didInsertElement() {
      return d3.select(this.$('svg')[0]).call(this.makeDragBehavior());
    },
    canvasThirdWidth: function canvasThirdWidth() {
      return assertNumericality(Ember['default'].$(document).width() / 3);
    },
    canvasQuarterHeight: function canvasQuarterHeight() {
      return assertNumericality(Ember['default'].$(document).height() / 3);
    },
    makeDragBehavior: function makeDragBehavior() {
      return d3.behavior.drag().origin(function () {
        return {
          x: 0,
          y: 0
        };
      }).on("drag", (function (_this) {
        return function () {
          var dx, dy, ref;
          ref = d3.event, dx = ref.dx, dy = ref.dy;
          _this.translate.incrementProperty("x", dx / 2);
          return _this.translate.incrementProperty("y", dy / 2);
        };
      })(this));
    }
  });

  exports['default'] = VectorCanvasComponent;

});
define('uiux/components/vector-tiles', ['exports', 'ember', 'ember-cpm'], function (exports, Ember, CPM) {

  'use strict';

  var VectorTilesComponent;

  VectorTilesComponent = Ember['default'].Component.extend({
    tagName: "g",
    classNames: ["layer", "layer-tiles"],
    pxPerWidth: Ember['default'].computed.alias("parentView.pxPerWidth"),
    pxPerHeight: Ember['default'].computed.alias("parentView.pxPerHeight"),
    tiles: Ember['default'].computed.alias("models"),
    actions: {
      interact: function interact(tile, event) {
        return this.sendAction("action", tile, event);
      }
    }
  });

  exports['default'] = VectorTilesComponent;

});
define('uiux/components/video-proxy', ['exports', 'ember', 'uiux/utils/fun-ex'], function (exports, Ember, FunEx) {

  'use strict';

  var VideoProxyComponent;

  VideoProxyComponent = Ember['default'].Component.extend({
    tagName: 'video',
    classNames: ['video-proxy', 'videojs'],
    sizeOptions: {
      width: "100%",
      height: "100%"
    },
    didInsertElement: function didInsertElement() {
      return this.manageSource();
    },
    src: FunEx['default'].computed("stream", function () {
      if (Ember['default'].isBlank(this.get("stream"))) {
        return;
      }
      if (this.get("stream.ended")) {
        return;
      }
      return window.URL.createObjectURL(this.get("stream"));
    }),
    manageSource: FunEx['default'].observed("src", function () {
      if (Ember['default'].isBlank(this.get("src"))) {
        return;
      }
      this.set("videoPlayer", videojs(this.$()[0], this.sizeOptions));
      return this.get("videoPlayer").play();
    })
  });

  exports['default'] = VideoProxyComponent;

});
define('uiux/controllers/application', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var ApplicationController;

	ApplicationController = Ember['default'].Controller.extend();

	exports['default'] = ApplicationController;

});
define('uiux/controllers/array', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('uiux/controllers/docks/batch', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var DocksBatchController;

	DocksBatchController = Ember['default'].Controller.extend();

	exports['default'] = DocksBatchController;

});
define('uiux/controllers/docks/dock', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var DocksDockController;

	DocksDockController = Ember['default'].Controller.extend();

	exports['default'] = DocksDockController;

});
define('uiux/controllers/docks/dock/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksDockIndexController;

  DocksDockIndexController = Ember['default'].Controller.extend({
    trucks: Ember['default'].computed.filterBy("model.loadingTrucks", "undockedAt", null),
    alreadyDockedTrucks: Ember['default'].computed.filterBy("trucks", "dockedAt"),
    comingDockedTrucks: Ember['default'].computed.filterBy("trucks", "dockedAt", null),
    problemResolvedMessage: function problemResolvedMessage() {
      return {
        archtype: "problem resolved",
        note: "the problem has been marked as resolved, control at this dock will now return to me (the comptuer).",
        title: "The problem at dock no. " + this.get('model.dockNumber') + " has been resolved",
        permalink: this.get("model.id"),
        permatype: "barn",
        createdAt: new Date()
      };
    },
    actions: {
      resolveProblem: function resolveProblem() {
        return this.model.resolveProblem();
      },
      arrive: function arrive(truck) {
        truck.set("dockedAt", moment());
        return truck.save();
      }
    }
  });

  exports['default'] = DocksDockIndexController;

});
define('uiux/controllers/docks/dock/problem', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksDockProblemController;

  DocksDockProblemController = Ember['default'].Controller.extend({
    prepare: function prepare(params) {
      return {
        archtype: "problem",
        note: Ember['default'].get(params, "notes"),
        title: "A problem has occured at loading dock no. " + this.get('model.dockNumber'),
        permalink: this.get("model.id"),
        permatype: this.get("model.constructor.typeKey"),
        createdAt: new Date()
      };
    },
    actions: {
      newProblemMessage: function newProblemMessage(params) {
        var dock;
        dock = this.get("model");
        return dock.createProblem(this.prepare(params)).then((function (_this) {
          return function () {
            return _this.transitionToRoute("docks.dock.status", _this.get("model.id"));
          };
        })(this));
      }
    }
  });

  exports['default'] = DocksDockProblemController;

});
define('uiux/controllers/docks/index', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var DocksIndexController;

	DocksIndexController = Ember['default'].Controller.extend();

	exports['default'] = DocksIndexController;

});
define('uiux/controllers/docks/inventories/index', ['exports', 'ember', 'uiux/controllers/inventories/index'], function (exports, Ember, InventoriesIndexController) {

  'use strict';

  var DocksInventoriesIndexController;

  DocksInventoriesIndexController = InventoriesIndexController['default'].extend({
    actions: {
      touchCell: function touchCell(cell) {
        return this.transitionToRoute("docks.cell", cell.get("id"));
      }
    }
  });

  exports['default'] = DocksInventoriesIndexController;

});
define('uiux/controllers/docks/truck/arrive', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksTruckArriveController;

  DocksTruckArriveController = Ember['default'].Controller.extend({
    truck: Ember['default'].computed.alias("model")
  });

  exports['default'] = DocksTruckArriveController;

});
define('uiux/controllers/docks/truck/batches/new', ['exports', 'ember', 'uiux/validators/batch', 'uiux/mixins/atomic'], function (exports, Ember, validate, AtomicMixin) {

  'use strict';

  var DocksTruckBatchesNewController;

  DocksTruckBatchesNewController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    warehouseChoices: Ember['default'].computed.alias("model.warehouses.warehouseChoices"),
    actions: {
      killPic: function killPic(uri) {
        var ref;
        return (ref = this.get("model.dataUris")) != null ? ref.removeObject(uri) : void 0;
      },
      batch: function batch() {
        return this.atomically((function (_this) {
          return function () {
            return validate['default'](_this.get('model')).then(function (model) {
              return model.save();
            })["catch"](function (errors) {
              return _this.set("batchErrors", errors);
            }).then(function (model) {
              return _this.transitionToRoute("docks.batch", model.get("id"));
            });
          };
        })(this));
      }
    }
  });

  exports['default'] = DocksTruckBatchesNewController;

});
define('uiux/controllers/docks/truck/depart', ['exports', 'ember', 'uiux/mixins/atomic'], function (exports, Ember, AtomicMixin) {

  'use strict';

  var DocksTruckDepartController;

  DocksTruckDepartController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    truck: Ember['default'].computed.alias("model"),
    stationChoices: Ember['default'].computed.alias("model.stations.stationChoices"),
    actions: {
      finish: function finish() {
        return this.atomically((function (_this) {
          return function () {
            var truck;
            truck = _this.get("truck");
            truck.set("undockedAt", moment());
            return truck.save().then(function (truck) {
              return _this.transitionToRoute("docks.dock.index", truck.get("dock.id"));
            });
          };
        })(this));
      }
    }
  });

  exports['default'] = DocksTruckDepartController;

});
define('uiux/controllers/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var IndexController;

  IndexController = Ember['default'].Controller.extend({
    roles: ["manager", "scalemaster", "dockworker", "logistics"]
  });

  exports['default'] = IndexController;

});
define('uiux/controllers/inventories/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var InventoriesIndexController;

  InventoriesIndexController = Ember['default'].Controller.extend({
    colNames: "abcde".split(""),
    rowNames: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    warehouses: Ember['default'].computed.alias("model"),
    actions: {
      touchCell: function touchCell(cell) {
        throw new Error("unimplemented");
      }
    }
  });

  exports['default'] = InventoriesIndexController;

});
define('uiux/controllers/logistics', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var LogisticsController;

	LogisticsController = Ember['default'].Controller.extend();

	exports['default'] = LogisticsController;

});
define('uiux/controllers/logistics/appointment/edit', ['exports', 'ember', 'uiux/collections/appointments'], function (exports, Ember, appointments) {

  'use strict';

  var LogisticsAppointmentEditController;

  LogisticsAppointmentEditController = Ember['default'].Controller.extend({
    appointmentChoices: appointments.typeChoices,
    actions: {
      update: function update() {
        return this.get("model").save().then((function (_this) {
          return function (model) {
            return _this.transitionToRoute("logistics.appointment.index", model.get("id"));
          };
        })(this));
      }
    }
  });

  exports['default'] = LogisticsAppointmentEditController;

});
define('uiux/controllers/logistics/appointment/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var LogisticsAppointmentIndexController;

  LogisticsAppointmentIndexController = Ember['default'].Controller.extend({
    queryParams: ["showprob"],
    showprob: null,
    prepare: function prepare(problem) {
      return {
        archtype: "problem",
        note: Ember['default'].get(problem, "notes"),
        title: "A problem has occured with appointment number " + this.get('model.permalink'),
        permalink: this.get("model.id"),
        permatype: "appointment",
        createdAt: new Date()
      };
    },
    resolveProblem: function resolveProblem() {
      return {
        archtype: "problem resolved",
        note: "the problem has been marked as resolved, control of this appointment will now return to me (the computer).",
        title: "The problem with appointment no. " + this.get('model.permalink') + " has been resolved",
        permalink: this.get("model.id"),
        permatype: "appointment",
        createdAt: new Date()
      };
    },
    actions: {
      cancel: function cancel() {
        this.get("model").cancel();
        return this.get("model").save();
      },
      uncancel: function uncancel() {
        this.get("model").uncancel();
        return this.get("model").save();
      },
      problem: function problem() {
        return this.set("showprob", true);
      },
      unproblem: function unproblem() {
        return this.set("showprob", null);
      },
      submitProblem: function submitProblem(problem) {
        this.get("model").explode();
        this.get("model").save();
        return this.store.createRecord("message", this.prepare(problem)).save();
      },
      resolveProblem: function resolveProblem() {
        this.get("model").unexplode();
        this.get("model").save();
        return this.store.createRecord("message", this.resolveProblem()).save();
      }
    }
  });

  exports['default'] = LogisticsAppointmentIndexController;

});
define('uiux/controllers/logistics/appointment/relate', ['exports', 'ember', 'uiux/mixins/atomic'], function (exports, Ember, AtomicMixin) {

  'use strict';

  var LogisticsAppointmentRelateController;

  LogisticsAppointmentRelateController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    pickup: Ember['default'].computed.alias("model.pickup"),
    appointmentRelationships: Ember['default'].computed.alias("model.appointmentRelationships.relationCores"),
    queryParams: ["search"],
    search: null,
    searchBuffer: null,
    getAnnoyed: function getAnnoyed() {
      return Ember['default'].$("#annoyed-flash").removeClass("hidden").show().hide(1250);
    },
    actions: {
      search: function search() {
        return this.send("refresh");
      }
    }
  });

  exports['default'] = LogisticsAppointmentRelateController;

});
define('uiux/controllers/logistics/appointment/relate/appointment', ['exports', 'ember', 'uiux/mixins/atomic'], function (exports, Ember, AtomicMixin) {

  'use strict';

  var LogisticsAppointmentRelateAppointmentController, a;

  a = Ember['default'].computed.alias;

  LogisticsAppointmentRelateAppointmentController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    pickup: a("model.pickup"),
    dropoff: a("model.dropoff"),
    batchRelationships: a("model.batchRelationships.relationCores"),
    appointmentRelationship: a("model.appointmentRelationship"),
    persistedRelations: a("model.batchRelationships.persistedRelations"),
    destroyAllBatchRelationships: function destroyAllBatchRelationships() {
      return this.get("model.batchRelationships").destroyEverything();
    },
    persistAllBatchRelationships: function persistAllBatchRelationships() {
      return this.get("model.batchRelationships").persistEverything(this.store);
    },
    actions: {
      toggleBatch: function toggleBatch(relationship) {
        return this.atomically((function (_this) {
          return function () {
            var promise;
            if (relationship.get("isLoaded")) {
              promise = relationship.destroyRecord();
            } else {
              promise = relationship.save(_this.store);
            }
            return promise.then(function () {
              return _this.send("refresh");
            });
          };
        })(this));
      },
      toggleAppointment: function toggleAppointment() {
        var relationship;
        relationship = this.get("appointmentRelationship");
        return this.atomically((function (_this) {
          return function () {
            var promise;
            if (relationship.get("isLoaded")) {
              promise = _this.destroyAllBatchRelationships().then(function () {
                return relationship.destroyRecord();
              });
            } else {
              promise = _this.persistAllBatchRelationships().then(function () {
                return relationship.save(_this.store);
              });
            }
            return promise.then(function () {
              return _this.send("refresh");
            });
          };
        })(this));
      }
    }
  });

  exports['default'] = LogisticsAppointmentRelateAppointmentController;

});
define('uiux/controllers/logistics/appointment/reschedule', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var LogisticsAppointmentRescheduleController;

  LogisticsAppointmentRescheduleController = Ember['default'].Controller.extend({
    actions: {
      update: function update() {
        this.set("model.explodedAt", null);
        return this.get("model").save().then((function (_this) {
          return function (model) {
            return _this.transitionToRoute("logistics.appointment.index", model.get("id"));
          };
        })(this));
      }
    }
  });

  exports['default'] = LogisticsAppointmentRescheduleController;

});
define('uiux/controllers/logistics/appointments', ['exports', 'ember', 'uiux/utils/punch-card'], function (exports, Ember, punch_card) {

  'use strict';

  var LogisticsAppointmentsController;

  LogisticsAppointmentsController = Ember['default'].Controller.extend({
    queryParams: ["macro"],
    macro: "all",
    pageBinding: "model.page",
    perPageBinding: "model.perPage",
    totalPagesBinding: "model.totalPages",
    withinWorkingHours: Ember['default'].computed("clock.rightNow", function () {
      return punch_card.withinWorkingHours(moment(this.get("clock.rightNow")));
    })
  });

  exports['default'] = LogisticsAppointmentsController;

});
define('uiux/controllers/logistics/appointments/new', ['exports', 'ember', 'uiux/validators/appointment', 'uiux/mixins/atomic', 'moment', 'uiux/utils/punch-card', 'ember-cpm'], function (exports, Ember, validate, AtomicMixin, moment, punch_card, CPM) {

  'use strict';

  var LogisticsAppointmentsNewController, appointmentChoices, invalidMsg;

  invalidMsg = "Your new appointment did not pass validation, tough break kid.";

  appointmentChoices = Ember['default'].A(["dropoff", "pickup", "both"]).map(function (v) {
    return {
      value: v,
      presentation: v
    };
  });

  LogisticsAppointmentsNewController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    pickupTypeSelected: CPM['default'].Macros.among("appointment.appointmentType", "pickup", "both"),
    appointmentChoices: appointmentChoices,
    appointment: Ember['default'].computed.alias("model"),
    withinWorkingHours: Ember['default'].computed("appointment.expectedAt", function () {
      return punch_card.withinWorkingHours(this.get("appointment.expectedAt"));
    }),
    validateModel: function validateModel() {
      return validate['default'](this.get("model"));
    },
    actions: {
      create: function create() {
        return this.atomically((function (_this) {
          return function () {
            return _this.validateModel().then(function (appointment) {
              return appointment.save();
            })["catch"](function (arg) {
              var errors;
              errors = arg.errors;
              _this.set("appointmentError", errors);
              return Ember['default'].assert(invalidMsg, errors);
            }).then(function (appointment) {
              switch (appointment.get("appointmentType")) {
                case "dropoff":
                  _this.transitionToRoute("logistics.appointments.index", {
                    queryParams: {
                      macro: "today"
                    }
                  });
                  return _this.send("updateAppointments");
                default:
                  return _this.transitionToRoute("logistics.appointment.relate", appointment.get("id"));
              }
            });
          };
        })(this));
      }
    }
  });

  exports['default'] = LogisticsAppointmentsNewController;

});
define('uiux/controllers/logistics/index', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var LogisticsIndexController;

	LogisticsIndexController = Ember['default'].Controller.extend();

	exports['default'] = LogisticsIndexController;

});
define('uiux/controllers/logistics/inventories', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var LogisticsInventoriesController;

	LogisticsInventoriesController = Ember['default'].Controller.extend();

	exports['default'] = LogisticsInventoriesController;

});
define('uiux/controllers/logistics/inventories/index', ['exports', 'ember', 'uiux/controllers/inventories/index'], function (exports, Ember, InventoriesIndexController) {

  'use strict';

  var LogisticsInventoriesIndexController;

  LogisticsInventoriesIndexController = InventoriesIndexController['default'].extend({
    queryParams: ["active"],
    active: null,
    actions: {
      clickSummary: function clickSummary() {
        return this.set("active", null);
      },
      clickPanel: function clickPanel(warehouse) {
        if (warehouse.get("id") === this.get("active")) {
          return this.set("active", null);
        } else {
          return this.set("active", warehouse.get("id"));
        }
      }
    }
  });

  exports['default'] = LogisticsInventoriesIndexController;

});
define('uiux/controllers/logistics/pictures', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var PicturesController;

  PicturesController = Ember['default'].Controller.extend({
    actions: {
      submit: function submit() {
        return this.get("model").save(this.store);
      }
    }
  });

  exports['default'] = PicturesController;

});
define('uiux/controllers/manager', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerController;

  ManagerController = Ember['default'].Controller.extend({
    tiles: Ember['default'].computed.alias("model.tiles"),
    trucks: Ember['default'].computed.alias("model.trucks"),
    batches: Ember['default'].computed.alias("model.batches"),
    appointments: Ember['default'].computed.alias("model.appointments"),
    rightNow: Ember['default'].computed.alias("clock.rightNow"),
    actions: {
      clickTile: function clickTile(tile) {
        switch (tile.get("tileType")) {
          case "dock":
          case "barn":
            return this.transitionToRoute("manager.dock", tile.get("id"));
          case "warehouse":
            return this.transitionToRoute("manager.inventories.cell", tile.get("id"));
          case "station":
          case "scale":
            return this.transitionToRoute("manager.station", tile.get("id"));
          default:
            return this.transitionToRoute("manager.trucks");
        }
      }
    }
  });

  exports['default'] = ManagerController;

});
define('uiux/controllers/manager/employees/new', ['exports', 'ember'], function (exports, Em) {

  'use strict';

  var ManagerEmployeesNewController;

  ManagerEmployeesNewController = Em['default'].Controller.extend({
    tileChoices: Em['default'].computed.alias("model.tiles.employeeChoices"),
    employee: Em['default'].computed.alias("model"),
    actions: {
      create: function create() {
        return this.get("model").save().then((function (_this) {
          return function () {
            return _this.transitionToRoute("manager.employees.index");
          };
        })(this))["catch"]((function (_this) {
          return function (error) {
            _this.set("employeeErrors", error);
            return console.log(error);
          };
        })(this));
      }
    }
  });

  exports['default'] = ManagerEmployeesNewController;

});
define('uiux/controllers/manager/inventories/index', ['exports', 'ember', 'uiux/controllers/inventories/index'], function (exports, Ember, InventoriesIndexController) {

  'use strict';

  var ManagerInventoriesIndexController;

  ManagerInventoriesIndexController = InventoriesIndexController['default'].extend({
    queryParams: ["active"],
    active: null,
    actions: {
      clickSummary: function clickSummary() {
        return this.set("active", null);
      },
      clickPanel: function clickPanel(warehouse) {
        if (warehouse.get("id") === this.get("active")) {
          return this.set("active", null);
        } else {
          return this.set("active", warehouse.get("id"));
        }
      }
    }
  });

  exports['default'] = ManagerInventoriesIndexController;

});
define('uiux/controllers/manager/reports/new', ['exports', 'ember', 'uiux/config/environment'], function (exports, Em, ENV) {

  'use strict';

  var ManagerReportsNewController;

  ManagerReportsNewController = Em['default'].Controller.extend({
    report: Em['default'].computed.alias("model"),
    reportLink: Ember.computed("report.startAt", "report.finishAt", function () {
      var query;
      query = {
        start_at: this.get("report.startAt"),
        finish_at: this.get("report.finishAt")
      };
      return ENV['default'].printNamespace + "/reports?" + Ember.$.param(query);
    })
  });

  exports['default'] = ManagerReportsNewController;

});
define('uiux/controllers/message/miscellanious', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessageMiscellaniousController;

  MessageMiscellaniousController = Ember['default'].Controller.extend({
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageMiscellaniousController;

});
define('uiux/controllers/message/problem', ['exports', 'ember', 'uiux/utils/fun-ex'], function (exports, Ember, FunEx) {

  'use strict';

  var MessageProblemController;

  MessageProblemController = Ember['default'].Controller.extend({
    modalName: FunEx['default'].computed("model.permatype", function () {
      switch (this.get("model.permatype")) {
        case "live/barn":
          return "barn";
        case "live/station":
          return "scale";
        case "truck":
          return "truck";
        case "live/warehouse":
          return "warehouse";
        default:
          throw new Error("I don't know how to handle " + this.get('model.permatype'));
      }
    }),
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageProblemController;

});
define('uiux/controllers/message/truck-arrived-on-site', ['exports', 'ember', 'uiux/utils/fun-ex'], function (exports, Ember, FunEx) {

  'use strict';

  var MessageMiscellaniousController;

  MessageMiscellaniousController = Ember['default'].Controller.extend({
    modalName: FunEx['default'].computed("model.permatype", function () {
      switch (this.get("model.permatype")) {
        case "live/barn":
          return "barn";
        case "live/station":
          return "scale";
        case "truck":
          return "truck";
        case "live/warehouse":
          return "warehouse";
        default:
          throw new Error("I don't know how to handle " + this.get('model.permatype'));
      }
    }),
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageMiscellaniousController;

});
define('uiux/controllers/message/truck-at-exit-station', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessageTruckAtExitStationController;

  MessageTruckAtExitStationController = Ember['default'].Controller.extend({
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageTruckAtExitStationController;

});
define('uiux/controllers/message/truck-at-loading-dock', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessageTruckAtLoadingDockController;

  MessageTruckAtLoadingDockController = Ember['default'].Controller.extend({
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageTruckAtLoadingDockController;

});
define('uiux/controllers/message/truck-has-left-site', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessageTruckHasLeftSiteController;

  MessageTruckHasLeftSiteController = Ember['default'].Controller.extend({
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageTruckHasLeftSiteController;

});
define('uiux/controllers/message/truck-left-dock-is-free', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessageTruckLeftDockIsFreeController;

  MessageTruckLeftDockIsFreeController = Ember['default'].Controller.extend({
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageTruckLeftDockIsFreeController;

});
define('uiux/controllers/message/truck-waiting-for-free-dock', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessageTruckWaitingForFreeDockController;

  MessageTruckWaitingForFreeDockController = Ember['default'].Controller.extend({
    modalName: Ember['default'].computed("model.permatype", function () {
      switch (this.get("model.permatype")) {
        case "live/barn":
          return "barn";
        case "live/station":
          return "scale";
        case "truck":
          return "truck";
        case "live/warehouse":
          return "warehouse";
        default:
          throw new Error("I don't know how to handle " + this.get('model.permatype'));
      }
    }),
    actions: {
      resolveMessage: function resolveMessage() {
        return this.model.destroyRecord().then((function (_this) {
          return function () {
            return _this.send('closeModal');
          };
        })(this));
      }
    }
  });

  exports['default'] = MessageTruckWaitingForFreeDockController;

});
define('uiux/controllers/messages/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessagesIndexController;

  MessagesIndexController = Ember['default'].Controller.extend({
    actions: {
      killMessage: function killMessage(message) {
        return message.destroyRecord();
      }
    }
  });

  exports['default'] = MessagesIndexController;

});
define('uiux/controllers/object', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('uiux/controllers/stations/index', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var StationsIndexController;

	StationsIndexController = Ember['default'].Controller.extend();

	exports['default'] = StationsIndexController;

});
define('uiux/controllers/stations/station', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsStationController;

  StationsStationController = Ember['default'].Controller.extend({
    station: Ember['default'].computed.alias("model")
  });

  exports['default'] = StationsStationController;

});
define('uiux/controllers/stations/station/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsStationIndexController;

  StationsStationIndexController = Ember['default'].Controller.extend({
    appointments: Ember['default'].computed.alias("model.appointments"),
    station: Ember['default'].computed.alias("model.station"),
    trucks: Ember['default'].computed.alias("station.exitingTrucks"),
    actions: {
      depart: function depart(truck) {
        truck.set("exitScale", this.get("station"));
        return truck.save().then((function (_this) {
          return function () {
            return _this.transitionToRoute("stations.truck.departure", truck.get("id"));
          };
        })(this));
      }
    }
  });

  exports['default'] = StationsStationIndexController;

});
define('uiux/controllers/stations/station/weightickets/new', ['exports', 'ember', 'uiux/validators/weighticket', 'uiux/mixins/atomic', 'uiux/collections/pictures'], function (exports, Ember, validate, AtomicMixin, PicturesCollection) {

  'use strict';

  var StationsStationWeighticketsNewController, invalidMsg;

  invalidMsg = "You expected your weighticket to correctly save, but it didn't do that.\nThis is definitely your fault.";

  StationsStationWeighticketsNewController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    queryParams: ["appointment"],
    appointment: null,
    dockChoices: Ember['default'].computed.alias("model.docks.dockChoices"),
    watchForOldestDock: Ember['default'].observer("model.firstAvailableDock.id", function () {
      var ticket;
      if (Ember['default'].isBlank(this.get("model.firstAvailableDock.id"))) {
        return;
      }
      ticket = this.get("model");
      return ticket.set("targetDock", this.get("model.firstAvailableDock.id"));
    }),
    actions: {
      killPic: function killPic(uri) {
        var ref;
        return (ref = this.get("model.dataUris")) != null ? ref.removeObject(uri) : void 0;
      },
      newTicket: function newTicket() {
        return this.atomically((function (_this) {
          return function () {
            return validate['default'](_this.get("model"))["catch"](function (errors) {
              _this.set("mistakes", errors);
              return Ember['default'].assert(invalidMsg, errors != null);
            }).then(function (weighticket) {
              return weighticket.save();
            }).then(function (weighticket) {
              return PicturesCollection['default'].fromWeighticket(weighticket).save(_this.store).then(function () {
                return _this.transitionToRoute("stations.weighticket.print", weighticket.get("id"));
              });
            });
          };
        })(this));
      }
    }
  });

  exports['default'] = StationsStationWeighticketsNewController;

});
define('uiux/controllers/stations/truck/complete', ['exports', 'ember', 'uiux/mixins/atomic'], function (exports, Ember, AtomicMixin) {

  'use strict';

  var StationsTruckCompleteController;

  StationsTruckCompleteController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    truck: Ember['default'].computed.alias("model"),
    weighticket: Ember['default'].computed.alias("model.weighticket"),
    appointment: Ember['default'].computed.alias("model.appointment"),
    actions: {
      completeTicket: function completeTicket() {
        var truck;
        truck = this.get("truck");
        truck.set("departedAt", moment());
        return Ember['default'].RSVP.hash({
          weighticket: this.get("weighticket"),
          appointment: this.get("appointment")
        }).then(function (arg) {
          var appointment, weighticket;
          weighticket = arg.weighticket, appointment = arg.appointment;
          appointment.set("fulfilledAt", moment());
          return Ember['default'].RSVP.hash({
            appointment: appointment.save(),
            weighticket: weighticket.save(),
            truck: truck.save()
          });
        }).then((function (_this) {
          return function (arg) {
            var truck;
            truck = arg.truck;
            return _this.transitionToRoute("stations.truck.exit", _this.get("truck.id"));
          };
        })(this))["catch"]((function (_this) {
          return function (errors) {
            return _this.set("mistakes", errors);
          };
        })(this));
      }
    }
  });

  exports['default'] = StationsTruckCompleteController;

});
define('uiux/controllers/stations/truck/departure', ['exports', 'ember', 'uiux/mixins/atomic'], function (exports, Ember, AtomicMixin) {

  'use strict';

  var StationsTruckDepartureController;

  StationsTruckDepartureController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    truck: Ember['default'].computed.alias("model"),
    actions: {
      weighTruck: function weighTruck() {
        return this.transitionToRoute("stations.truck.complete", this.get("truck.id"));
      },
      exitTruck: function exitTruck() {
        return this.transitionToRoute("stations.truck.exit", this.get("truck.id"));
      }
    }
  });

  exports['default'] = StationsTruckDepartureController;

});
define('uiux/controllers/stations/truck/exit', ['exports', 'ember', 'ember-cpm', 'uiux/mixins/atomic', 'uiux/config/environment'], function (exports, Ember, CPM, AtomicMixin, config) {

  'use strict';

  var StationsTruckExitController;

  StationsTruckExitController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    truck: Ember['default'].computed.alias("model"),
    printTicketLink: CPM['default'].Macros.fmt("truck.weighticketId", config['default'].print + "/weightickets/%@")
  });

  exports['default'] = StationsTruckExitController;

});
define('uiux/controllers/stations/weighticket/edit', ['exports', 'ember', 'uiux/validators/weighticket'], function (exports, Ember, validate) {

  'use strict';

  var StationsWeighticketEditController;

  StationsWeighticketEditController = Ember['default'].Controller.extend({
    dockChoices: Ember['default'].computed.alias("model.docks.dockChoices"),
    actions: {
      newTicket: function newTicket() {
        return validate['default'](this.get("model")).then(function (weighticket) {
          return weighticket.save();
        }).then((function (_this) {
          return function (weighticket) {
            return _this.transitionToRoute("stations.weighticket.print", weighticket.get("id"));
          };
        })(this))["catch"]((function (_this) {
          return function (errors) {
            return _this.set("mistakes", errors);
          };
        })(this));
      }
    }
  });

  exports['default'] = StationsWeighticketEditController;

});
define('uiux/controllers/stations/weighticket/give-to-driver', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var StationsWeighticketGiveToDriverController;

	StationsWeighticketGiveToDriverController = Ember['default'].Controller.extend;

	exports['default'] = StationsWeighticketGiveToDriverController;

});
define('uiux/controllers/stations/weighticket/print', ['exports', 'ember', 'uiux/config/environment', 'ember-cpm'], function (exports, Ember, config, EmberCPM) {

  'use strict';

  var StationsWeighticketPrintController;

  StationsWeighticketPrintController = Ember['default'].Controller.extend({
    weighticket: Ember['default'].computed.alias("model"),
    printTicketLink: EmberCPM['default'].Macros.fmt("weighticket.id", config['default'].print + "/weightickets/%@")
  });

  exports['default'] = StationsWeighticketPrintController;

});
define('uiux/controllers/stations/weighticket/trucks/new', ['exports', 'ember', 'uiux/validators/truck', 'uiux/mixins/atomic'], function (exports, Ember, validate, AtomicMixin) {

  'use strict';

  var StationsWeighticketTrucksNewController;

  StationsWeighticketTrucksNewController = Ember['default'].Controller.extend(AtomicMixin['default'], {
    truck: Ember['default'].computed.alias("model"),
    actions: {
      finish: function finish() {
        return this.atomically((function (_this) {
          return function () {
            return _this.get("truck").save().then(function (truck) {
              var entryScaleId;
              entryScaleId = truck.get("entryScale.id");
              Ember['default'].assert("there is a entry scale id " + entryScaleId, Ember['default'].isPresent(entryScaleId));
              return _this.transitionToRoute("stations.station", entryScaleId);
            });
          };
        })(this));
      }
    }
  });

  exports['default'] = StationsWeighticketTrucksNewController;

});
define('uiux/controllers/ticket', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var TicketController;

	TicketController = Ember['default'].Controller.extend();

	exports['default'] = TicketController;

});
define('uiux/helpers/ago', ['exports', 'ember-moment/helpers/ago'], function (exports, ago) {

	'use strict';



	exports.default = ago.default;

});
define('uiux/helpers/duration', ['exports', 'ember-moment/helpers/duration'], function (exports, duration) {

	'use strict';



	exports.default = duration.default;

});
define('uiux/helpers/fa-icon', ['exports', 'ember-cli-font-awesome/helpers/fa-icon'], function (exports, fa_icon) {

	'use strict';



	exports.default = fa_icon.default;
	exports.faIcon = fa_icon.faIcon;

});
define('uiux/helpers/is-equal', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var leftSide = _ref2[0];
    var rightSide = _ref2[1];

    return leftSide === rightSide;
  });

});
define('uiux/helpers/is-not', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];

    return !value;
  });

});
define('uiux/helpers/moment', ['exports', 'ember-moment/helpers/moment'], function (exports, moment) {

	'use strict';



	exports.default = moment.default;

});
define('uiux/helpers/num', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var NumHelper,
      groupInto3s,
      num,
      separateWith,
      slice = [].slice;

  groupInto3s = function (strs, char) {
    var str, xs;
    str = strs[0], xs = 2 <= strs.length ? slice.call(strs, 1) : [];
    if (str.length >= 3) {
      return [char].concat(strs);
    } else {
      xs.unshift(char.concat(str));
      return xs;
    }
  };

  separateWith = function (numStr, sep) {
    return numStr.split("").reduceRight(groupInto3s, [""]).join(sep);
  };

  num = function (arg) {
    var decimal, number, ref, separator, whole;
    number = arg[0], separator = arg[1];
    if (number == null) {
      number = 0;
    }
    if (separator == null) {
      separator = ",";
    }
    ref = number.toString().split("."), whole = ref[0], decimal = ref[1];
    return [separateWith(whole, separator), decimal].filter(function (x) {
      return x != null;
    }).join(separator);
  };

  NumHelper = Ember['default'].HTMLBars.makeBoundHelper(num);

  exports['default'] = NumHelper;

  exports.num = num;

});
define('uiux/helpers/read-path', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var object = _ref2[0];
    var path = _ref2[1];

    if (typeof path !== "undefined" && path !== null) {
      return Ember['default'].get(object, path);
    }
    return object;
  });

});
define('uiux/initializers/account-setup', ['exports'], function (exports) {

  'use strict';

  var AccountSetupInitializer, Session, initialize;

  Session = Ember.ObjectProxy.extend({
    setup: function setup(store) {
      return store.find("account", 1).then((function (_this) {
        return function (account) {
          return _this.set("content", account);
        };
      })(this));
    }
  });

  initialize = function (registry, application) {
    application.register("session:account", Session);
    application.inject("controller", "currentAccount", "session:account");
    return application.inject("route", "currentAccount", "session:account");
  };

  AccountSetupInitializer = {
    name: "account-setup",
    initialize: initialize
  };

  exports['default'] = AccountSetupInitializer;

  exports.initialize = initialize;

});
define('uiux/initializers/controller-pen', ['exports', 'uiux/utils/controller-pen'], function (exports, ControllerPen) {

  'use strict';

  var ControllerPenInitializer, initialize;

  initialize = function (registry, application) {
    application.register("pen:controllers", ControllerPen['default']);
    return application.inject("route:application", "controllerPen", "pen:controllers");
  };

  ControllerPenInitializer = {
    name: 'controller-pen',
    initialize: initialize
  };

  exports['default'] = ControllerPenInitializer;

  exports.initialize = initialize;

});
define('uiux/initializers/custom-helpers', ['exports', 'uiux/helpers/num', 'ember-truth-helpers/utils/register-helper'], function (exports, num, register_helper) {

  'use strict';

  var CustomHelpersInitializer, initialize;

  initialize = function () {
    return register_helper.registerHelper("num", num.num);
  };

  CustomHelpersInitializer = {
    name: 'custom-helpers',
    initialize: initialize
  };

  exports['default'] = CustomHelpersInitializer;

  exports.initialize = initialize;

});
define('uiux/initializers/error-stack', ['exports'], function (exports) {

  'use strict';

  var ErrorStackInitializer, initialize;

  initialize = function () {
    return window.Error.stackTraceLimit = Infinity;
  };

  ErrorStackInitializer = {
    name: 'error-stack',
    initialize: initialize
  };

  exports['default'] = ErrorStackInitializer;

  exports.initialize = initialize;

});
define('uiux/initializers/export-application-global', ['exports', 'ember', 'uiux/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  ;

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('uiux/initializers/right-now', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var Clock, RightNowInitializer, initialize;

  Clock = Ember['default'].Object.extend({
    init: function init() {
      this._super();
      this.set("rightNow", new Date());
      return this.interval = window.setInterval(this.incrementTime.bind(this), 1000);
    },
    destroy: function destroy() {
      window.clearInterval(this.interval);
      return this._super();
    },
    incrementTime: function incrementTime() {
      return this.set("rightNow", new Date());
    }
  });

  initialize = function (registry, app) {
    app.register("volatile:clock", Clock);
    return app.inject("controller", "clock", "volatile:clock");
  };

  RightNowInitializer = {
    name: 'right-now',
    initialize: initialize
  };

  exports['default'] = RightNowInitializer;

  exports.initialize = initialize;

});
define('uiux/initializers/truth-helpers', ['exports', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, register_helper, and, or, equal, not, is_array, not_equal, gt, gte, lt, lte) {

  'use strict';

  exports.initialize = initialize;

  function initialize() /* container, application */{
    register_helper.registerHelper('and', and.andHelper);
    register_helper.registerHelper('or', or.orHelper);
    register_helper.registerHelper('eq', equal.equalHelper);
    register_helper.registerHelper('not', not.notHelper);
    register_helper.registerHelper('is-array', is_array.isArrayHelper);
    register_helper.registerHelper('not-eq', not_equal.notEqualHelper);
    register_helper.registerHelper('gt', gt.gtHelper);
    register_helper.registerHelper('gte', gte.gteHelper);
    register_helper.registerHelper('lt', lt.ltHelper);
    register_helper.registerHelper('lte', lte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };

});
define('uiux/instance-initializers/account-setup', ['exports'], function (exports) {

  'use strict';

  var AccountSetupInitializer, initialize;

  initialize = function (instance) {
    var account, store;
    account = instance.container.lookup("session:account");
    store = instance.container.lookup("service:store");
    return account.setup(store);
  };

  AccountSetupInitializer = {
    name: "account-setup",
    initialize: initialize
  };

  exports['default'] = AccountSetupInitializer;

  exports.initialize = initialize;

});
define('uiux/instance-initializers/app-version', ['exports', 'uiux/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: 'App Version',
    initialize: function initialize(application) {
      if (!registered) {
        var appName = classify(application.toString());
        Ember['default'].libraries.register(appName, config['default'].APP.version);
        registered = true;
      }
    }
  };

});
define('uiux/mixins/atomic', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var AtomicMixin, assertThenable, isPromiseLike, notProMsg;

  isPromiseLike = function (maybePromise) {
    return maybePromise != null && typeof maybePromise.then === 'function';
  };

  notProMsg = function (notPromise) {
    return "Whatever action you give to the atomically method should return a promise,\nthis promise should resolve after you've finished whatever calculation you were doing.\nHowever, through some oversight your part, you actually gave me " + notPromise + ",\nwhich is not a promise.";
  };

  assertThenable = function (maybePromise) {
    if (!isPromiseLike(maybePromise)) {
      throw new Error(notProMsg(maybePromise));
    }
    return maybePromise;
  };

  AtomicMixin = Ember['default'].Mixin.create({
    isPending: Ember['default'].computed.or("model.isPending", "model.isSaving", "isBusy"),
    atomically: function atomically(action) {
      if (this.get("isBusy")) {
        return;
      }
      return Ember['default'].run((function (_this) {
        return function () {
          _this.send("controllerWorking", _this);
          _this.set("isBusy", true);
          return assertThenable(action())["finally"](function () {
            _this.set("isBusy", false);
            return _this.send("controllerFinished", _this);
          });
        };
      })(this));
    }
  });

  exports['default'] = AtomicMixin;

});
define('uiux/models/account', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  var Account;

  Account = DS['default'].Model.extend({
    accessKeyId: DS['default'].attr("string"),
    secretAccessKey: DS['default'].attr("string"),
    region: DS['default'].attr("string"),
    namespace: DS['default'].attr("string")
  });

  exports['default'] = Account;

});
define('uiux/models/appointment', ['exports', 'ember-data', 'moment', 'uiux/utils/punch-card', 'ember-cpm'], function (exports, DS, moment, punch_card, CPM) {

  'use strict';

  var Appointment;

  Appointment = DS['default'].Model.extend({
    appointmentType: DS['default'].attr("string", {
      defaultValue: "dropoff"
    }),
    permalink: DS['default'].attr("string"),
    materialDescription: DS['default'].attr("string"),
    company: DS['default'].attr("string"),
    notes: DS['default'].attr("string"),
    createdAt: DS['default'].attr("date"),
    updatedAt: DS['default'].attr("date"),
    expectedAt: DS['default'].attr("moment"),
    fulfilledAt: DS['default'].attr("moment"),
    cancelledAt: DS['default'].attr("moment"),
    explodedAt: DS['default'].attr("moment"),
    weighticket: DS['default'].belongsTo("weighticket", {
      async: false
    }),
    truck: DS['default'].belongsTo("truck", {
      async: false
    }),
    batches: DS['default'].hasMany("batch", {
      inverse: "appointment",
      async: true
    }),
    externalReference: DS['default'].attr("string"),
    outgoingBatches: DS['default'].attr("array"),
    pickups: DS['default'].attr("array"),
    dropoffs: DS['default'].attr("array"),
    dropoffAppointments: Ember.computed.map("dropoffs", function (id) {}),
    self: Ember.computed(function () {
      return this;
    }),
    expectedAtISO: Ember.computed("expectedAt", {
      get: function get() {
        if (Ember.isBlank(this.get("expectedAt"))) {
          return;
        }
        return this.get("expectedAt").format("YYYY-MM-DDTHH:mm");
      },
      set: function set(key, date) {
        if (date != null) {
          return this.set("expectedAt", moment['default'](date));
        } else {
          return this.set("expectedAt", null);
        }
      }
    }),
    expectedAtAgo: Ember.computed("expectedAt", function () {
      if (Ember.isBlank(this.get("expectedAt"))) {
        return;
      }
      return this.get("expectedAt").fromNow();
    }),
    status: Ember.computed("expectedAt", "fulfilledAt", "cancelledAt", "explodedAt", function () {
      var ref, ref1, ref2, ref3, ref4;
      if ((ref = this.get("fulfilledAt")) != null ? ref.isValid() : void 0) {
        return "fulfilled";
      }
      if ((ref1 = this.get("cancelledAt")) != null ? ref1.isValid() : void 0) {
        return "cancelled";
      }
      if ((ref2 = this.get("explodedAt")) != null ? ref2.isValid() : void 0) {
        return "problem";
      }
      if (!((ref3 = this.get("expectedAt")) != null ? ref3.isValid() : void 0)) {
        return "problem";
      }
      if (this.get("truck") != null) {
        return "onsite";
      }
      if (this.get("expectedAt") < punch_card.startOfWorkday()) {
        return "vanished";
      }
      if (punch_card.finishOfWorkday() < this.get("expectedAt")) {
        return "planned";
      }
      if (punch_card.startOfWorkday() < (ref4 = this.get("expectedAt")) && ref4 < punch_card.finishOfWorkday()) {
        return "expected";
      }
      return "unknown";
    }),
    statusIsPlanned: Ember.computed.equal("status", "planned"),
    statusIsProblem: Ember.computed.equal("status", "problem"),
    statusIsExpected: Ember.computed.equal("status", "expected"),
    statusIsFulfilled: Ember.computed.equal("status", "fulfilled"),
    statusIsCancelled: Ember.computed.equal("status", "cancelled"),
    statusIsVanished: Ember.computed.equal("status", "vanished"),
    statusIsUnknown: Ember.computed.equal("status", "unknown"),
    statusIsOnsite: Ember.computed.equal("status", "onsite"),
    isRelateable: CPM['default'].Macros.among("appointmentType", "pickup", "both"),
    isCancellable: Ember.computed.or("statusIsPlanned", "statusIsProblem", "statusIsUnknown", "statusIsExpected", "statusIsVanished"),
    canReschedule: Ember.computed.not("statusIsFulfilled"),
    fulfill: function fulfill() {
      this.set("fulfilledAt", moment['default']());
      return this.save();
    }
  });

  exports['default'] = Appointment;

});
define('uiux/models/appointment_relationship', ['exports', 'ember-data', 'ember-cpm'], function (exports, DS, CPM) {

  'use strict';

  var AppointmentRelationship;

  AppointmentRelationship = DS['default'].Model.extend({
    pickup: DS['default'].belongsTo("appointment"),
    dropoff: DS['default'].belongsTo("appointment"),
    createdAt: DS['default'].attr("moment"),
    updatedAt: DS['default'].attr("moment"),
    self: Ember.computed(function () {
      return this;
    }),
    permaindex: CPM['default'].Macros.join("dropoff.id", "pickup.id", "-")
  });

  exports['default'] = AppointmentRelationship;

});
define('uiux/models/batch', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  var Batch;

  Batch = DS['default'].Model.extend({
    batchType: DS['default'].attr("string", {
      defaultValue: "incoming"
    }),
    permalink: DS['default'].attr("string"),
    description: DS['default'].attr("string"),
    quantity: DS['default'].attr("string"),
    deletedAt: DS['default'].attr("moment"),
    createdAt: DS['default'].attr("moment"),
    updatedAt: DS['default'].attr("moment"),
    pickupAppointments: DS['default'].attr("array"),
    dock: DS['default'].belongsTo("tile"),
    warehouse: DS['default'].belongsTo("tile"),
    appointment: DS['default'].belongsTo("appointment", {
      async: true
    }),
    truck: DS['default'].belongsTo("truck", {
      async: true
    })
  });

  exports['default'] = Batch;

});
define('uiux/models/batch_relationship', ['exports', 'ember-data', 'ember-cpm'], function (exports, DS, CPM) {

  'use strict';

  var BatchRelationship;

  BatchRelationship = DS['default'].Model.extend({
    appointment: DS['default'].belongsTo("appointment"),
    batch: DS['default'].belongsTo("batch"),
    createdAt: DS['default'].attr("moment"),
    updatedAt: DS['default'].attr("moment"),
    self: Ember.computed(function () {
      return this;
    }),
    permaindex: CPM['default'].Macros.join("appointment.id", "batch.id", "-")
  });

  exports['default'] = BatchRelationship;

});
define('uiux/models/camera', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  var Camera;

  Camera = DS['default'].Model.extend({
    tileId: DS['default'].attr("string"),
    cameraStyle: DS['default'].attr("string"),
    permalink: DS['default'].attr("string"),
    cameraName: DS['default'].attr("string"),
    macAddress: DS['default'].attr("string"),
    createdAt: DS['default'].attr("date"),
    updatedAt: DS['default'].attr("date"),
    tile: DS['default'].belongsTo("tile", {
      async: true
    }),
    isImageCam: Ember.computed.equal("cameraStyle", "img-cgi"),
    isWebCam: Ember.computed.equal("cameraStyle", "user-media"),
    isKnown: Ember.computed.or("isImageCam", "isWebCam")
  });

  exports['default'] = Camera;

});
define('uiux/models/employee', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  var Employee;

  Employee = DS['default'].Model.extend({
    fullName: DS['default'].attr("string"),
    title: DS['default'].attr("string"),
    tileType: DS['default'].attr("string"),
    arrivedAt: DS['default'].attr("moment"),
    leftWorkAt: DS['default'].attr("moment"),
    phone: DS['default'].attr("string"),
    email: DS['default'].attr("string"),
    createdAt: DS['default'].attr("moment"),
    updatedAt: DS['default'].attr("moment"),
    tile: DS['default'].belongsTo("tile"),
    watchTileType: Ember.observer("tile.tileType", function () {
      return this.set("tileType", this.get("tile.tileType"));
    })
  });

  exports['default'] = Employee;

});
define('uiux/models/picture', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  var Picture;

  Picture = DS['default'].Model.extend({
    assocId: DS['default'].attr("string"),
    assocType: DS['default'].attr("string"),
    location: DS['default'].attr("string"),
    etag: DS['default'].attr("string"),
    key: DS['default'].attr("string")
  });

  exports['default'] = Picture;

});
define('uiux/models/tile', ['exports', 'ember', 'ember-data', 'ember-cpm', 'uiux/utils/debug-ex', 'uiux/collections/batches', 'uiux/collections/trucks'], function (exports, Ember, DS, CPM, D, BatchesCollection, TrucksCollection) {

  'use strict';

  var Alphabet, AlphabetExt, AlphabetGr, Macros, Tile;

  Macros = CPM['default'].Macros;

  Alphabet = "abcdefghijklmnopqrstuvwxyz";

  AlphabetGr = "αβγδεζηθικλμνξοπρστυφχψω";

  AlphabetExt = Alphabet + AlphabetGr;

  Tile = DS['default'].Model.extend({
    tileType: DS['default'].attr("string"),
    tileName: DS['default'].attr("string"),
    x: DS['default'].attr("number"),
    y: DS['default'].attr("number"),
    z: DS['default'].attr("number"),
    width: DS['default'].attr("number", {
      defaultValue: 1
    }),
    height: DS['default'].attr("number", {
      defaultValue: 1
    }),
    createdAt: DS['default'].attr("date"),
    updatedAt: DS['default'].attr("date"),
    cameras: DS['default'].hasMany("camera", {
      async: false
    }),
    enteringTrucks: DS['default'].hasMany("truck", {
      inverse: "entryScale",
      async: false
    }),
    exitingTrucks: DS['default'].hasMany("truck", {
      inverse: "exitScale",
      async: false
    }),
    loadingTrucks: DS['default'].hasMany("truck", {
      inverse: "dock",
      async: false
    }),
    batches: DS['default'].hasMany("batch", {
      inverse: "warehouse",
      async: false
    }),
    colName: Ember['default'].computed("x", function () {
      var output, r, x;
      x = this.getWithDefault("x", 0);
      if (x === 0) {
        return Alphabet.charAt(x);
      }
      output = x < 0 ? "-" : "";
      x = Math.abs(x);
      while (x !== 0) {
        r = x % Alphabet.length;
        x = Math.floor(x / Alphabet.length);
        output += Alphabet.charAt(r);
      }
      return output;
    }),
    rowName: Ember['default'].computed.alias("y"),
    hasCamera: Ember['default'].computed.gt("cameras.length", 0),
    defaultName: Macros.join("colName", "rowName", "-"),
    nameOrId: Macros.firstPresent("tileName", "defaultName", "id"),
    canonicalName: Ember['default'].computed("tileType", function () {
      switch (this.get("tileType")) {
        case "barn":
        case "dock":
          return "loading dock";
        case "warehouse":
        case "storage":
          return "storage cell";
        case "road":
          return "road";
        case "station":
        case "scale":
          return "weight station";
        default:
          return "unknown";
      }
    }),
    fullTitle: Macros.join("canonicalName", "nameOrId", ":"),
    isFree: Ember['default'].computed.equal("status", "free"),
    status: Ember['default'].computed.alias("trucksCollection.status"),
    batchCount: Ember['default'].computed.alias("batches.length"),
    batchesCollection: Ember['default'].computed("batches", function () {
      return BatchesCollection['default'].fromBatches(this.get("batches"));
    }),
    trucksCollection: Ember['default'].computed("enteringTrucks", "exitingTrucks", "loadingTrucks", function () {
      return TrucksCollection['default'].fromTile({
        enter: this.get("enteringTrucks"),
        exit: this.get("exitingTrucks"),
        load: this.get("loadingTrucks")
      });
    })
  });

  exports['default'] = Tile;

});
define('uiux/models/truck', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  var Truck, alias;

  alias = Ember['default'].computed.alias;

  Truck = DS['default'].Model.extend({
    arrivedAt: DS['default'].attr("moment"),
    dockedAt: DS['default'].attr("moment"),
    undockedAt: DS['default'].attr("moment"),
    departedAt: DS['default'].attr("moment"),
    entryScale: DS['default'].belongsTo("tile"),
    exitScale: DS['default'].belongsTo("tile"),
    dock: DS['default'].belongsTo("tile"),
    appointment: DS['default'].belongsTo("appointment", {
      async: true
    }),
    weighticket: DS['default'].belongsTo("weighticket", {
      async: true
    }),
    appointmentPermalink: alias("appointment.permalink"),
    position: Ember['default'].computed("arrivedAt", "dockedAt", "undockedAt", "departedAt", function () {
      var ref, ref1, ref2, ref3;
      if ((ref = this.get("departedAt")) != null ? ref.isValid() : void 0) {
        return "departed";
      }
      if ((ref1 = this.get("undockedAt")) != null ? ref1.isValid() : void 0) {
        return "going to exit";
      }
      if ((ref2 = this.get("dockedAt")) != null ? ref2.isValid() : void 0) {
        return "at dock";
      }
      if ((ref3 = this.get("arrivedAt")) != null ? ref3.isValid() : void 0) {
        return "going to dock";
      }
      return "at entrance";
    })
  });

  exports['default'] = Truck;

});
define('uiux/models/weighticket', ['exports', 'ember', 'ember-cpm', 'ember-data'], function (exports, Ember, EmberCPM, DS) {

  'use strict';

  var Weighticket;

  Weighticket = DS['default'].Model.extend({
    pounds: DS['default'].attr("number"),
    licensePlate: DS['default'].attr("string"),
    status: DS['default'].attr("string"),
    notes: DS['default'].attr("string"),
    finishPounds: DS['default'].attr("number"),
    updatedAt: DS['default'].attr("moment"),
    createdAt: DS['default'].attr("moment"),
    pictures: DS['default'].hasMany("picture"),
    appointment: DS['default'].belongsTo("appointment"),
    truck: DS['default'].belongsTo("truck"),
    issuer: DS['default'].belongsTo("tile"),
    finisher: DS['default'].belongsTo("tile"),
    dock: DS['default'].belongsTo("tile"),
    netWeight: EmberCPM['default'].Macros.difference("pounds", "finishPounds")
  });

  exports['default'] = Weighticket;

});
define('uiux/router', ['exports', 'ember', 'uiux/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router;

  Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {
    this.resource("logistics", {
      path: "/logistics"
    }, function () {
      this.resource("logistics.pictures", {
        path: "/pictures"
      }, function () {});
      this.resource("logistics.inventories", {
        path: "/inventories"
      }, function () {
        this.resource("logistics.inventories.batch", {
          path: "/batch/:id"
        }, function () {});
        return this.resource("logistics.inventories.cell", {
          path: "/cell/:id"
        }, function () {
          return this.route("pictures");
        });
      });
      this.resource("logistics.appointments", {
        path: "/appointments"
      }, function () {
        return this.route("new");
      });
      return this.resource("logistics.appointment", {
        path: "/appointment/:appointment_id"
      }, function () {
        this.route("edit");
        this.route("reschedule");
        return this.resource("logistics.appointment.relate", {
          path: "/relate"
        }, function () {
          return this.resource("logistics.appointment.relate.appointment", {
            path: "/appointment/:id"
          }, function () {});
        });
      });
    });
    this.resource("stations", {
      path: "/stations"
    }, function () {
      this.resource("stations.weighticket", {
        path: "/weighticket/:weighticketId"
      }, function () {
        this.route("edit");
        this.route("print");
        return this.resource("stations.weighticket.trucks", {
          path: "/trucks"
        }, function () {
          return this.route("new");
        });
      });
      this.resource("stations.station", {
        path: "/station/:id"
      }, function () {
        this.resource("stations.station.weightickets", {
          path: "/weightickets"
        }, function () {
          return this.route("new");
        });
        this.route("status");
        return this.route("problem");
      });
      return this.resource("stations.truck", {
        path: "/truck/:truckId"
      }, function () {
        this.route("departure");
        this.route("complete");
        return this.route("exit");
      });
    });
    this.resource("docks", {
      path: "/docks"
    }, function () {
      this.resource("docks.batch", {
        path: "/batch/:batchId"
      }, function () {});
      this.resource("docks.inventories", {
        path: "/inventories"
      }, function () {
        return this.resource("docks.cell", {
          path: "/cell/:cell_id"
        }, function () {
          return this.route("pictures");
        });
      });
      this.resource("docks.dock", {
        path: "/dock/:dock_id"
      }, function () {
        this.route("status");
        return this.route("problem");
      });
      return this.resource("docks.truck", {
        path: "/truck/:truckId"
      }, function () {
        this.route("arrive");
        this.resource("docks.truck.batches", {
          path: "/batches"
        }, function () {
          return this.route("new");
        });
        return this.route("depart");
      });
    });
    return this.resource("manager", {
      path: "/manager"
    }, function () {
      this.resource("manager.dock", {
        path: "/dock/:dockId"
      }, function () {});
      this.resource("manager.station", {
        path: "/station/:stationId"
      }, function () {});
      this.resource("manager.inventories", {
        path: "/inventories"
      }, function () {
        this.resource("manager.inventories.cell", {
          path: "/cell/:cell_id"
        }, function () {});
        return this.resource("manager.inventories.batch", {
          path: "/batch/:id"
        }, function () {});
      });
      this.resource("manager.trucks", {
        path: "/trucks"
      }, function () {
        return this.resource("manager.trucks.truck", {
          path: "/truck/:id"
        }, function () {});
      });
      this.resource("manager.appointments", {
        path: "/appointments"
      }, function () {});
      this.resource("manager.cameras", {
        path: "/cameras"
      }, function () {
        this.resource("manager.cameras.camera", {
          path: "/camera/:id"
        }, function () {});
        return this.route("overview");
      });
      this.resource("manager.employees", {
        path: "/employees"
      }, function () {
        return this.route("new");
      });
      this.resource("manager.settings", {
        path: "/settings"
      }, function () {
        this.route("debug");
        return this.route("workflows");
      });
      this.resource("manager.reports", {
        path: "/reports"
      }, function () {
        return this.route("new");
      });
      this.resource("messages", {
        path: "/messages"
      }, function () {});
      return this.resource("message", {
        path: "/message/:message_id"
      }, function () {
        this.route(Ember['default'].String.dasherize("truck arrived on site"));
        this.route(Ember['default'].String.dasherize("truck at loading dock"));
        this.route(Ember['default'].String.dasherize("truck left dock is free"));
        this.route(Ember['default'].String.dasherize("truck waiting for free dock"));
        this.route(Ember['default'].String.dasherize("truck at exit station"));
        this.route(Ember['default'].String.dasherize("truck has left site"));
        this.route(Ember['default'].String.dasherize("problem"));
        return this.route(Ember['default'].String.dasherize("miscellanious"));
      });
    });
  });

  exports['default'] = Router;

});
define('uiux/routes/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ApplicationRoute;

  ApplicationRoute = Ember['default'].Route.extend({
    isBusy: Ember['default'].computed.alias("controllerPen.isBusy"),
    isPending: Ember['default'].computed.alias("isBusy"),
    model: function model() {
      return this.store.findAll("tile");
    },
    actions: {
      controllerWorking: function controllerWorking(controller) {
        return this.controllerPen.makeBusy(controller);
      },
      controllerFinished: function controllerFinished(controller) {
        return this.controllerPen.makeFree(controller);
      },
      openModal: function openModal(modalName, model) {
        var id;
        if (model != null) {
          id = Ember['default'].get(model, "id");
          id || (id = model);
          return this.transitionTo(modalName, id);
        } else {
          return this.transitionTo(modalName);
        }
      },
      closeModal: function closeModal() {
        return this.transitionTo("manager");
      }
    }
  });

  exports['default'] = ApplicationRoute;

});
define('uiux/routes/contracts', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var ContractsRoute;

	ContractsRoute = Ember['default'].Route.extend();

	exports['default'] = ContractsRoute;

});
define('uiux/routes/docks', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksRoute;

  DocksRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor("application").filterBy("tileType", "barn");
    }
  });

  exports['default'] = DocksRoute;

});
define('uiux/routes/docks/batch', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksBatchRoute;

  DocksBatchRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.batchId;
      return this.store.find("batch", id);
    }
  });

  exports['default'] = DocksBatchRoute;

});
define('uiux/routes/docks/cell', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksCellRoute;

  DocksCellRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.cell_id;
      return this.iogrid.then((function (_this) {
        return function () {
          return _this.store.find("warehouse", id);
        };
      })(this));
    }
  });

  exports['default'] = DocksCellRoute;

});
define('uiux/routes/docks/dock', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksDockRoute;

  DocksDockRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.dock_id;
      return this.store.find("tile", id);
    },
    actions: {
      exitRole: function exitRole() {
        return this.transitionTo("index");
      }
    }
  });

  exports['default'] = DocksDockRoute;

});
define('uiux/routes/docks/inventories', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var DocksInventoriesRoute;

  DocksInventoriesRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.store.peekAll("tile");
    }
  });

  exports['default'] = DocksInventoriesRoute;

});
define('uiux/routes/docks/truck', ['exports', 'ember', 'uiux/collections/stations'], function (exports, Ember, StationsCollection) {

  'use strict';

  var DocksTruckRoute, calculateExitScalePreference, calculateWarehousePreference;

  calculateWarehousePreference = function (batches) {
    return batches.get("lastObject.warehouse");
  };

  calculateExitScalePreference = function (stations) {
    return stations.get("firstObject");
  };

  DocksTruckRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id, tiles;
      id = arg.truckId;
      tiles = this.modelFor("application");
      return Ember['default'].RSVP.hash({
        batches: this.store.find("batch", {
          truck: id
        }),
        truck: this.store.find("truck", id)
      }).then(function (arg1) {
        var batches, stations, truck;
        truck = arg1.truck, batches = arg1.batches;
        stations = StationsCollection['default'].fromTiles(tiles);
        truck.set("stations", stations);
        truck.set("exitScale", calculateExitScalePreference(stations));
        truck.set("preferredWarehouse", calculateWarehousePreference(batches));
        truck.set("batches", batches);
        return truck;
      });
    }
  });

  exports['default'] = DocksTruckRoute;

});
define('uiux/routes/docks/truck/batches/new', ['exports', 'ember', 'uiux/collections/warehouses'], function (exports, Ember, Warehouses) {

  'use strict';

  var DocksTruckBatchesNewRoute;

  DocksTruckBatchesNewRoute = Ember['default'].Route.extend({
    queryParams: {
      warehouse: true
    },
    model: function model(arg) {
      var warehouse;
      warehouse = arg.warehouse;
      if (warehouse != null) {
        return this.store.find("tile", warehouse).then((function (_this) {
          return function (tile) {
            return _this.setupBatch(tile);
          };
        })(this));
      } else {
        return this.setupBatch();
      }
    },
    setupBatch: function setupBatch(tile) {
      var tiles, truck, warehouses;
      tiles = this.modelFor("application");
      warehouses = Warehouses['default'].fromTiles(tiles);
      truck = this.modelFor("docks.truck");
      return this.store.createRecord("batch", {
        appointment: truck.get("appointment"),
        permalink: truck.get("appointment.permalink"),
        dock: truck.get("dock"),
        warehouse: tile || warehouses.get("firstEmptyWarehouse"),
        arrivedAt: moment(),
        truck: truck,
        warehouses: warehouses
      });
    },
    tearDown: Ember['default'].on("deactivate", function () {
      var model;
      model = this.controller.get("model");
      if (Ember['default'].get(model, "hasDirtyAttributes")) {
        return model.deleteRecord();
      }
    })
  });

  exports['default'] = DocksTruckBatchesNewRoute;

});
define('uiux/routes/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var IndexRoute;

  IndexRoute = Ember['default'].Route.extend({
    model: function model() {}
  });

  exports['default'] = IndexRoute;

});
define('uiux/routes/logistics', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var LogisticsRoute;

  LogisticsRoute = Ember['default'].Route.extend({
    actions: {
      exitRole: function exitRole() {
        return this.transitionTo("index");
      }
    }
  });

  exports['default'] = LogisticsRoute;

});
define('uiux/routes/logistics/appointment', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var LogisticsAppointmentRoute;

  LogisticsAppointmentRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.appointment_id;
      return this.store.find("appointment", id);
    }
  });

  exports['default'] = LogisticsAppointmentRoute;

});
define('uiux/routes/logistics/appointment/relate', ['exports', 'ember', 'uiux/collections/appointments', 'uiux/collections/appointment_relationships', 'uiux/collections/batch_relationships'], function (exports, Ember, appointments, AppointmentRelationshipsCollection, BatchRelationshipsCollection) {

  'use strict';

  var LogisticsAppointmentRelateRoute, processAppointmentSearch;

  processAppointmentSearch = function (search) {
    var hash;
    hash = appointments.processMacro({
      macro: "all-dropoffs"
    });
    hash.search = search;
    hash.per_page = 1024;
    return hash;
  };

  LogisticsAppointmentRelateRoute = Ember['default'].Route.extend({
    queryParams: {
      search: {
        refreshModel: false
      }
    },
    model: function model(arg) {
      var pickup, search;
      search = arg.search;
      pickup = this.modelFor("logistics.appointment");
      return Ember['default'].RSVP.hash({
        dropoffs: this.store.find("appointment", processAppointmentSearch(search)),
        ars: this.store.find("appointmentRelationship", {
          pickup_id: pickup.get("id")
        })
      }).then(function (arg1) {
        var ars, dropoffs;
        dropoffs = arg1.dropoffs, ars = arg1.ars;
        return {
          pickup: pickup,
          appointmentRelationships: AppointmentRelationshipsCollection['default'].create({
            content: ars,
            pickup: pickup,
            dropoffs: dropoffs
          })
        };
      });
    },
    actions: {
      refresh: function refresh() {
        return this.refresh();
      }
    }
  });

  exports['default'] = LogisticsAppointmentRelateRoute;

});
define('uiux/routes/logistics/appointment/relate/appointment', ['exports', 'ember', 'uiux/collections/appointment_relationships', 'uiux/collections/batch_relationships', 'uiux/utils/debug-ex'], function (exports, Ember, appointment_relationships, BatchRelationshipsCollection, D) {

  'use strict';

  var LogisticsAppointmentRelateAppointmentRoute;

  LogisticsAppointmentRelateAppointmentRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id, pickup;
      id = arg.id;
      pickup = this.modelFor("logistics.appointment");
      return this.store.find("appointment", id).then((function (_this) {
        return function (dropoff) {
          return Ember['default'].RSVP.hash({
            batches: dropoff.get("batches"),
            brs: _this.store.find("batchRelationship", {
              appointment_id: pickup.get("id")
            }),
            ar: _this.findOrInitialize("appointmentRelationship", {
              pickup: pickup,
              dropoff: dropoff
            })
          }).then(function (arg1) {
            var ar, batches, brs;
            batches = arg1.batches, brs = arg1.brs, ar = arg1.ar;
            return {
              pickup: pickup,
              dropoff: dropoff,
              appointmentRelationship: ar,
              batchRelationships: BatchRelationshipsCollection['default'].create({
                content: brs,
                appointment: pickup,
                batches: batches
              })
            };
          });
        };
      })(this));
    },
    afterModel: function afterModel(model) {
      var appointmentRelationship, batchRelationships, batches;
      batchRelationships = model.batchRelationships, appointmentRelationship = model.appointmentRelationship;
      batches = batchRelationships.get("batches");
      if (batchRelationships.get("length") === 1) {
        if (appointmentRelationship.get("isLoaded") !== true) {
          appointmentRelationship.save(this.store).then((function (_this) {
            return function () {
              _this.send("refresh");
              return _this.refresh();
            };
          })(this));
        }
      }
      if (appointmentRelationship.get("isLoaded") === true) {
        if (batches.get("length") > 0) {
          if (batchRelationships.get("length") === 0) {
            return appointmentRelationship.destroyRecord().then((function (_this) {
              return function () {
                _this.send("refresh");
                return _this.refresh();
              };
            })(this));
          }
        }
      }
    },
    findOrInitialize: function findOrInitialize(modelName, arg) {
      var dropoff, pickup;
      pickup = arg.pickup, dropoff = arg.dropoff;
      return this.store.find("appointmentRelationship", {
        pickup_id: pickup.get("id"),
        dropoff_id: dropoff.get("id")
      }).then(function (relationships) {
        var r;
        if (r = relationships.get("firstObject")) {
          return r;
        } else {
          return appointment_relationships.TempObject.create({
            pickup: pickup,
            dropoff: dropoff
          });
        }
      });
    },
    actions: {
      refresh: function refresh() {
        this.refresh();
        return true;
      }
    }
  });

  exports['default'] = LogisticsAppointmentRelateAppointmentRoute;

});
define('uiux/routes/logistics/appointments', ['exports', 'ember', 'uiux/collections/appointments'], function (exports, Ember, appointments) {

  'use strict';

  var LogisticsAppointmentsRoute;

  LogisticsAppointmentsRoute = Ember['default'].Route.extend({
    queryParams: {
      macro: {
        refreshModel: true
      },
      page: {
        refreshModel: true
      },
      per: {
        refreshModel: true
      }
    },
    macro: "all",
    model: function model(params) {
      return this.store.query("appointment", appointments.processMacro(params));
    },
    actions: {
      updateAppointments: function updateAppointments() {
        return this.refresh();
      }
    }
  });

  exports['default'] = LogisticsAppointmentsRoute;

});
define('uiux/routes/logistics/appointments/new', ['exports', 'ember', 'moment'], function (exports, Ember, moment) {

  'use strict';

  var LogisticsAppointmentsNewRoute;

  LogisticsAppointmentsNewRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.store.createRecord("appointment", {
        expectedAt: moment['default']()
      });
    },
    tearDown: Ember['default'].on("deactivate", function () {
      var model;
      model = this.controller.get("model");
      if (Ember['default'].get(model, "hasDirtyAttributes")) {
        return model.deleteRecord();
      }
    })
  });

  exports['default'] = LogisticsAppointmentsNewRoute;

});
define('uiux/routes/logistics/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var LogisticsIndexRoute;

  LogisticsIndexRoute = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      return this.transitionTo("logistics.appointments.index", {
        queryParams: {
          macro: "today"
        }
      });
    }
  });

  exports['default'] = LogisticsIndexRoute;

});
define('uiux/routes/logistics/inventories', ['exports', 'ember', 'uiux/collections/warehouses'], function (exports, Ember, WarehousesCollection) {

  'use strict';

  var LogisticsInventoriesRoute;

  LogisticsInventoriesRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.store.findAll("tile").then(WarehousesCollection['default'].fromTiles);
    }
  });

  exports['default'] = LogisticsInventoriesRoute;

});
define('uiux/routes/logistics/inventories/batch', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var LogisticsInventoriesBatchRoute;

  LogisticsInventoriesBatchRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.id;
      return this.store.find("batch", id);
    }
  });

  exports['default'] = LogisticsInventoriesBatchRoute;

});
define('uiux/routes/logistics/inventories/cell', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var LogisticsInventoriesCellRoute;

  LogisticsInventoriesCellRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.id;
      return this.store.find("tile", id);
    }
  });

  exports['default'] = LogisticsInventoriesCellRoute;

});
define('uiux/routes/logistics/pictures', ['exports', 'ember', 'uiux/collections/pictures'], function (exports, Ember, PicturesCollection) {

  'use strict';

  var PicturesRoute;

  PicturesRoute = Ember['default'].Route.extend({
    model: function model() {
      return PicturesCollection['default'].initialize();
    }
  });

  exports['default'] = PicturesRoute;

});
define('uiux/routes/manager', ['exports', 'ember', 'uiux/collections/appointments'], function (exports, Ember, collections__appointments) {

  'use strict';

  var ManagerRoute;

  ManagerRoute = Ember['default'].Route.extend({
    model: function model() {
      var batches, tiles;
      tiles = this.modelFor("application");
      batches = this.store.peekAll("batch");
      return Ember['default'].RSVP.hash({
        appointments: this.store.query("appointment", collections__appointments.processMacro({
          macro: "today"
        })),
        trucks: this.store.findAll("truck").filterBy("departedAt", null)
      }).then(function (arg) {
        var appointments, trucks;
        trucks = arg.trucks, appointments = arg.appointments;
        return {
          trucks: trucks,
          batches: batches,
          tiles: tiles,
          appointments: appointments
        };
      });
    }
  });

  exports['default'] = ManagerRoute;

});
define('uiux/routes/manager/appointments', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerAppointmentsRoute;

  ManagerAppointmentsRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor("manager").appointments;
    }
  });

  exports['default'] = ManagerAppointmentsRoute;

});
define('uiux/routes/manager/cameras', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerCamerasRoute;

  ManagerCamerasRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find("camera");
    }
  });

  exports['default'] = ManagerCamerasRoute;

});
define('uiux/routes/manager/dock', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerDockRoute;

  ManagerDockRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var dockId;
      dockId = arg.dockId;
      return this.store.find("tile", dockId);
    }
  });

  exports['default'] = ManagerDockRoute;

});
define('uiux/routes/manager/employees', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerEmployeesRoute;

  ManagerEmployeesRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.store.findAll("employee");
    }
  });

  exports['default'] = ManagerEmployeesRoute;

});
define('uiux/routes/manager/employees/new', ['exports', 'ember', 'uiux/collections/tiles'], function (exports, Ember, Tiles) {

  'use strict';

  var ManagerEmployeesNewRoute;

  ManagerEmployeesNewRoute = Ember['default'].Route.extend({
    model: function model() {
      var tiles;
      tiles = Tiles['default'].fromTiles(this.modelFor("application"));
      return this.store.createRecord("employee", {
        tiles: tiles
      });
    },
    tearDown: Ember['default'].on("deactivate", function () {
      var model;
      model = this.controller.get("model");
      if (Ember['default'].get(model, "hasDirtyAttributes")) {
        return model.deleteRecord();
      }
    })
  });

  exports['default'] = ManagerEmployeesNewRoute;

});
define('uiux/routes/manager/inventories', ['exports', 'ember', 'uiux/collections/warehouses'], function (exports, Ember, WarehousesCollection) {

  'use strict';

  var ManagerInventoriesRoute;

  ManagerInventoriesRoute = Ember['default'].Route.extend({
    model: function model() {
      return WarehousesCollection['default'].fromTiles(this.modelFor("manager").tiles);
    }
  });

  exports['default'] = ManagerInventoriesRoute;

});
define('uiux/routes/manager/inventories/batch', ['exports', 'uiux/logistics/inventories/batch'], function (exports, R) {

	'use strict';

	exports['default'] = R['default'].extend({});

});
define('uiux/routes/manager/inventories/cell', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerInventoriesCellRoute;

  ManagerInventoriesCellRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.cell_id;
      return this.store.find("tile", id);
    }
  });

  exports['default'] = ManagerInventoriesCellRoute;

});
define('uiux/routes/manager/reports/new', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerReportsNewRoute;

  ManagerReportsNewRoute = Ember['default'].Route.extend({
    model: function model() {
      return Ember['default'].Object.create({
        startAt: moment().startOf("week").format("YYYY-MM-DD"),
        finishAt: moment().format("YYYY-MM-DD")
      });
    }
  });

  exports['default'] = ManagerReportsNewRoute;

});
define('uiux/routes/manager/station', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationRoute;

  StationRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var stationId;
      stationId = arg.stationId;
      return this.store.find("tile", stationId);
    }
  });

  exports['default'] = StationRoute;

});
define('uiux/routes/manager/trucks', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerTrucksRoute;

  ManagerTrucksRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor("manager").trucks;
    }
  });

  exports['default'] = ManagerTrucksRoute;

});
define('uiux/routes/manager/trucks/truck', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ManagerTrucksTruckRoute;

  ManagerTrucksTruckRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.id;
      return this.store.find("truck", id);
    }
  });

  exports['default'] = ManagerTrucksTruckRoute;

});
define('uiux/routes/message', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessageRoute;

  MessageRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.message_id;
      return this.store.find("message", id);
    },
    afterModel: function afterModel(message) {
      var route;
      route = ["message", Ember['default'].String.dasherize(message.get("archtype"))].join(".");
      return this.transitionTo(route, message.get("id"));
    }
  });

  exports['default'] = MessageRoute;

});
define('uiux/routes/message/miscellanious', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageMiscellaniousRoute;

	MessageMiscellaniousRoute = Ember['default'].Route.extend();

	exports['default'] = MessageMiscellaniousRoute;

});
define('uiux/routes/message/problem', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageProblemRoute;

	MessageProblemRoute = Ember['default'].Route.extend();

	exports['default'] = MessageProblemRoute;

});
define('uiux/routes/message/truck-arrived-on-site', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageTruckArrivedOnSiteRoute;

	MessageTruckArrivedOnSiteRoute = Ember['default'].Route.extend();

	exports['default'] = MessageTruckArrivedOnSiteRoute;

});
define('uiux/routes/message/truck-at-exit-station', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageTruckAtExitStationRoute;

	MessageTruckAtExitStationRoute = Ember['default'].Route.extend();

	exports['default'] = MessageTruckAtExitStationRoute;

});
define('uiux/routes/message/truck-at-loading-dock', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageTruckAtLoadingDockRoute;

	MessageTruckAtLoadingDockRoute = Ember['default'].Route.extend();

	exports['default'] = MessageTruckAtLoadingDockRoute;

});
define('uiux/routes/message/truck-has-left-site', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageTruckHasLeftSiteRoute;

	MessageTruckHasLeftSiteRoute = Ember['default'].Route.extend();

	exports['default'] = MessageTruckHasLeftSiteRoute;

});
define('uiux/routes/message/truck-left-dock-is-free', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageTruckLeftDockIsFreeRoute;

	MessageTruckLeftDockIsFreeRoute = Ember['default'].Route.extend();

	exports['default'] = MessageTruckLeftDockIsFreeRoute;

});
define('uiux/routes/message/truck-waiting-for-free-dock', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var MessageTruckWaitingForFreeDockRoute;

	MessageTruckWaitingForFreeDockRoute = Ember['default'].Route.extend();

	exports['default'] = MessageTruckWaitingForFreeDockRoute;

});
define('uiux/routes/messages', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var MessagesRoute;

  MessagesRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find("message");
    }
  });

  exports['default'] = MessagesRoute;

});
define('uiux/routes/stations', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsRoute;

  StationsRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor("application").filterBy("tileType", "scale");
    }
  });

  exports['default'] = StationsRoute;

});
define('uiux/routes/stations/station', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsStationRoute;

  StationsStationRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.id;
      return this.store.find("tile", id);
    }
  });

  exports['default'] = StationsStationRoute;

});
define('uiux/routes/stations/station/index', ['exports', 'ember', 'uiux/collections/appointments'], function (exports, Ember, appointments) {

  'use strict';

  var StationsStationIndexRoute;

  StationsStationIndexRoute = Ember['default'].Route.extend({
    model: function model() {
      return Ember['default'].RSVP.hash({
        station: this.modelFor("stations.station"),
        appointments: this.store.find("appointment", appointments.processMacro({
          macro: "today"
        }))
      });
    }
  });

  exports['default'] = StationsStationIndexRoute;

});
define('uiux/routes/stations/station/weightickets/new', ['exports', 'ember', 'uiux/collections/docks'], function (exports, Ember, Docks) {

  'use strict';

  var StationsStationWeighticketsNewRoute;

  StationsStationWeighticketsNewRoute = Ember['default'].Route.extend({
    queryParams: {
      appointment: true
    },
    model: function model(arg) {
      var appointment, tiles;
      appointment = arg.appointment;
      tiles = this.modelFor("application");
      return this.setupWeighticket(appointment, Docks['default'].fromTiles(tiles));
    },
    setupWeighticket: function setupWeighticket(apptId, docks) {
      return this.store.find("appointment", apptId).then((function (_this) {
        return function (appointment) {
          var ticketId;
          if ((ticketId = appointment.get("weighticket.id")) != null) {
            return _this.transitionTo("stations.weighticket.trucks.new", ticketId);
          } else {
            return _this.makeNewWeighticket(appointment, docks);
          }
        };
      })(this));
    },
    makeNewWeighticket: function makeNewWeighticket(appointment, docks) {
      return this.store.createRecord("weighticket", {
        issuer: this.modelFor("stations.station"),
        appointment: appointment,
        dock: docks.get("firstAvailableDock"),
        docks: docks
      });
    },
    killRecord: function killRecord(model) {
      if (Ember['default'].get(model, 'hasDirtyAttributes')) {
        return model.deleteRecord();
      }
    },
    tearDown: Ember['default'].on("deactivate", function () {
      var model;
      model = this.controller.get("model");
      if (model != null && model.then != null && typeof model.then === 'function') {
        return model.then(this.killRecord);
      } else {
        return this.killRecord(model);
      }
    })
  });

  exports['default'] = StationsStationWeighticketsNewRoute;

});
define('uiux/routes/stations/truck', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsTruckRoute;

  StationsTruckRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var truckId;
      truckId = arg.truckId;
      return this.store.find("truck", truckId);
    }
  });

  exports['default'] = StationsTruckRoute;

});
define('uiux/routes/stations/truck/complete', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsTruckCompleteRoute;

  StationsTruckCompleteRoute = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor("stations.truck");
    }
  });

  exports['default'] = StationsTruckCompleteRoute;

});
define('uiux/routes/stations/weighticket', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var StationsWeighticketRoute;

  StationsWeighticketRoute = Ember['default'].Route.extend({
    model: function model(arg) {
      var id;
      id = arg.weighticketId;
      return this.store.find("weighticket", id);
    }
  });

  exports['default'] = StationsWeighticketRoute;

});
define('uiux/routes/stations/weighticket/edit', ['exports', 'ember', 'uiux/collections/docks'], function (exports, Ember, Docks) {

  'use strict';

  var StationsWeighticketEditRoute;

  StationsWeighticketEditRoute = Ember['default'].Route.extend({
    model: function model() {
      var tiles, weighticket;
      tiles = this.modelFor("application");
      weighticket = this.modelFor("stations.weighticket");
      weighticket.set("docks", Docks['default'].fromTiles(tiles));
      return weighticket;
    }
  });

  exports['default'] = StationsWeighticketEditRoute;

});
define('uiux/routes/stations/weighticket/trucks/new', ['exports', 'ember', 'uiux/utils/prelude'], function (exports, Ember, prelude) {

  'use strict';

  var StationsWeighticketTrucksNewRoute, get;

  get = Ember['default'].get;

  StationsWeighticketTrucksNewRoute = Ember['default'].Route.extend({
    model: function model() {
      var truck, weighticket;
      weighticket = this.modelFor("stations.weighticket");
      if ((truck = weighticket.get("truck")) != null) {
        return truck;
      }
      return this.newTruckFor(weighticket);
    },
    newTruckFor: function newTruckFor(weighticket) {
      return this.store.createRecord("truck", {
        arrivedAt: moment(),
        entryScale: weighticket.get("issuer"),
        dock: weighticket.get("dock"),
        appointment: weighticket.get("appointment"),
        weighticket: weighticket
      });
    }
  });

  exports['default'] = StationsWeighticketTrucksNewRoute;

});
define('uiux/routes/statuses', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var StatusesRoute;

	StatusesRoute = Ember['default'].Route.extend();

	exports['default'] = StatusesRoute;

});
define('uiux/routes/statuses/debug', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	var StatusesDebugRoute;

	StatusesDebugRoute = Ember['default'].Route.extend();

	exports['default'] = StatusesDebugRoute;

});
define('uiux/routes/ticket', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var TicketRoute;

  TicketRoute = Ember['default'].Route.extend({
    afterModel: function afterModel(model) {
      return $('#game').remove();
    },
    model: function model(arg) {
      var id;
      id = arg.ticket_id;
      return this.store.find("weighticket", id);
    }
  });

  exports['default'] = TicketRoute;

});
define('uiux/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 12
          }
        },
        "moduleName": "uiux/templates/application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,12]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/components/adaptive-camera', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 68
            }
          },
          "moduleName": "uiux/templates/components/adaptive-camera.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"class","camera-feed");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [
          ["attribute","src",["get","camera.permalink",["loc",[null,[1,29],[1,45]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 75
            },
            "end": {
              "line": 1,
              "column": 150
            }
          },
          "moduleName": "uiux/templates/components/adaptive-camera.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/camera.png");
          dom.setAttribute(el1,"class","thumbnail live-camera");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 157
            },
            "end": {
              "line": 1,
              "column": 226
            }
          },
          "moduleName": "uiux/templates/components/adaptive-camera.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/nocam.png");
          dom.setAttribute(el1,"class","fail-fallback");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 237
          }
        },
        "moduleName": "uiux/templates/components/adaptive-camera.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","isImageCam",["loc",[null,[1,6],[1,16]]]]],[],0,null,["loc",[null,[1,0],[1,75]]]],
        ["block","if",[["get","isWebCam",["loc",[null,[1,81],[1,89]]]]],[],1,null,["loc",[null,[1,75],[1,157]]]],
        ["block","unless",[["get","isKnown",["loc",[null,[1,167],[1,174]]]]],[],2,null,["loc",[null,[1,157],[1,237]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/components/em-form-actions', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "uiux/templates/components/em-form-actions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/components/em-form-for', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "uiux/templates/components/em-form-for.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/components/em-form-input', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 10,
                "column": 6
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",["fa ",["get","prefix",["loc",[null,[9,23],[9,29]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 6
                },
                "end": {
                  "line": 12,
                  "column": 6
                }
              },
              "moduleName": "uiux/templates/components/em-form-input.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element5, 'class');
              return morphs;
            },
            statements: [
              ["attribute","class",["concat",["glyphicon ",["get","prefix",["loc",[null,[11,33],[11,39]]]]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 14,
                  "column": 6
                }
              },
              "moduleName": "uiux/templates/components/em-form-input.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","prefix",["loc",[null,[13,8],[13,18]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","glyphPrefix",["loc",[null,[10,16],[10,27]]]]],[],0,1,["loc",[null,[10,6],[14,6]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "uiux/templates/components/em-form-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","input-group-addon");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","if",[["get","faPrefix",["loc",[null,[8,12],[8,20]]]]],[],0,1,["loc",[null,[8,6],[14,13]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 6
              },
              "end": {
                "line": 23,
                "column": 6
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            dom.setAttribute(el1,"disabled","");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element3, 'selected');
            morphs[1] = dom.createMorphAt(element3,1,1);
            return morphs;
          },
          statements: [
            ["attribute","selected",["subexpr","is-not",[["get","value",["loc",[null,[20,43],[20,48]]]]],[],["loc",[null,[20,34],[20,50]]]]],
            ["content","prompt",["loc",[null,[21,10],[21,20]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 6
              },
              "end": {
                "line": 30,
                "column": 6
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element2, 'value');
            morphs[1] = dom.createAttrMorph(element2, 'selected');
            morphs[2] = dom.createMorphAt(element2,1,1);
            return morphs;
          },
          statements: [
            ["attribute","value",["concat",[["subexpr","read-path",[["get","item",["loc",[null,[26,35],[26,39]]]],["get","optionValuePath",["loc",[null,[26,40],[26,55]]]]],[],["loc",[null,[26,23],[26,57]]]]]]],
            ["attribute","selected",["subexpr","is-equal",[["get","item",["loc",[null,[27,36],[27,40]]]],["get","value",["loc",[null,[27,41],[27,46]]]]],[],["loc",[null,[27,25],[27,48]]]]],
            ["inline","read-path",[["get","item",["loc",[null,[28,22],[28,26]]]],["get","optionLabelPath",["loc",[null,[28,27],[28,42]]]]],[],["loc",[null,[28,10],[28,44]]]]
          ],
          locals: ["item"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 32,
              "column": 2
            }
          },
          "moduleName": "uiux/templates/components/em-form-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("select");
          dom.setAttribute(el1,"class","form-control");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      \n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element4, 'multiple');
          morphs[1] = dom.createElementMorph(element4);
          morphs[2] = dom.createMorphAt(element4,1,1);
          morphs[3] = dom.createMorphAt(element4,3,3);
          return morphs;
        },
        statements: [
          ["attribute","multiple",["get","multiple",["loc",[null,[18,76],[18,84]]]]],
          ["element","action",["change"],["on","change"],["loc",[null,[18,33],[18,64]]]],
          ["block","if",[["get","prompt",["loc",[null,[19,12],[19,18]]]]],[],0,null,["loc",[null,[19,6],[23,13]]]],
          ["block","each",[["get","content",["loc",[null,[25,14],[25,21]]]]],[],1,null,["loc",[null,[25,6],[30,15]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 34,
                "column": 2
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["class","form-control","type","datetime-local","value",["subexpr","@mut",[["get","value",["loc",[null,[33,61],[33,66]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[33,72],[33,76]]]]],[],[]]],["loc",[null,[33,4],[33,78]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 2
                },
                "end": {
                  "line": 36,
                  "column": 2
                }
              },
              "moduleName": "uiux/templates/components/em-form-input.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","textarea",[],["value",["subexpr","@mut",[["get","value",["loc",[null,[35,21],[35,26]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[35,32],[35,36]]]]],[],[]],"class","form-control"],["loc",[null,[35,4],[35,59]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.5",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 36,
                    "column": 2
                  },
                  "end": {
                    "line": 38,
                    "column": 2
                  }
                },
                "moduleName": "uiux/templates/components/em-form-input.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","ember-webcam-input",[],["name",["subexpr","@mut",[["get","name",["loc",[null,[37,30],[37,34]]]]],[],[]],"picUrls",["subexpr","@mut",[["get","picUrls",["loc",[null,[37,43],[37,50]]]]],[],[]],"action","snapped"],["loc",[null,[37,4],[37,69]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.5",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 38,
                      "column": 2
                    },
                    "end": {
                      "line": 40,
                      "column": 2
                    }
                  },
                  "moduleName": "uiux/templates/components/em-form-input.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  return morphs;
                },
                statements: [
                  ["inline","input",[],["type","tel","value",["subexpr","@mut",[["get","value",["loc",[null,[39,29],[39,34]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[39,40],[39,44]]]]],[],[]],"class","form-control"],["loc",[null,[39,4],[39,67]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.5",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 40,
                        "column": 2
                      },
                      "end": {
                        "line": 42,
                        "column": 2
                      }
                    },
                    "moduleName": "uiux/templates/components/em-form-input.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["inline","input",[],["type","file","value",["subexpr","@mut",[["get","value",["loc",[null,[41,30],[41,35]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[41,41],[41,45]]]]],[],[]],"class","form-control","accept",["subexpr","@mut",[["get","accept",["loc",[null,[41,74],[41,80]]]]],[],[]]],["loc",[null,[41,4],[41,82]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              var child1 = (function() {
                var child0 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.5",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 42,
                          "column": 2
                        },
                        "end": {
                          "line": 44,
                          "column": 2
                        }
                      },
                      "moduleName": "uiux/templates/components/em-form-input.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                      return morphs;
                    },
                    statements: [
                      ["inline","input",[],["type","file","value",["subexpr","@mut",[["get","value",["loc",[null,[43,30],[43,35]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[43,41],[43,45]]]]],[],[]],"class","form-control","multiple",true],["loc",[null,[43,4],[43,82]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                var child1 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.5",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 44,
                          "column": 2
                        },
                        "end": {
                          "line": 46,
                          "column": 2
                        }
                      },
                      "moduleName": "uiux/templates/components/em-form-input.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n  ");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                      return morphs;
                    },
                    statements: [
                      ["inline","input",[],["type",["subexpr","@mut",[["get","type",["loc",[null,[45,17],[45,21]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[45,28],[45,33]]]]],[],[]],"name",["subexpr","@mut",[["get","name",["loc",[null,[45,39],[45,43]]]]],[],[]],"class","form-control"],["loc",[null,[45,4],[45,66]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                return {
                  meta: {
                    "revision": "Ember@1.13.5",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 42,
                        "column": 2
                      },
                      "end": {
                        "line": 46,
                        "column": 2
                      }
                    },
                    "moduleName": "uiux/templates/components/em-form-input.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["block","if",[["get","areFiles",["loc",[null,[42,12],[42,20]]]]],[],0,1,["loc",[null,[42,2],[46,2]]]]
                  ],
                  locals: [],
                  templates: [child0, child1]
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.5",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 40,
                      "column": 2
                    },
                    "end": {
                      "line": 46,
                      "column": 2
                    }
                  },
                  "moduleName": "uiux/templates/components/em-form-input.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","if",[["get","isFile",["loc",[null,[40,12],[40,18]]]]],[],0,1,["loc",[null,[40,2],[46,2]]]]
                ],
                locals: [],
                templates: [child0, child1]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.5",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 38,
                    "column": 2
                  },
                  "end": {
                    "line": 46,
                    "column": 2
                  }
                },
                "moduleName": "uiux/templates/components/em-form-input.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["get","isTelephone",["loc",[null,[38,12],[38,23]]]]],[],0,1,["loc",[null,[38,2],[46,2]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 2
                },
                "end": {
                  "line": 46,
                  "column": 2
                }
              },
              "moduleName": "uiux/templates/components/em-form-input.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","isWebcamType",["loc",[null,[36,12],[36,24]]]]],[],0,1,["loc",[null,[36,2],[46,2]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 46,
                "column": 2
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isTextareaType",["loc",[null,[34,12],[34,26]]]]],[],0,1,["loc",[null,[34,2],[46,2]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 46,
              "column": 2
            }
          },
          "moduleName": "uiux/templates/components/em-form-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","isDatetimeType",["loc",[null,[32,12],[32,26]]]]],[],0,1,["loc",[null,[32,2],[46,2]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 6
              },
              "end": {
                "line": 51,
                "column": 6
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",["fa ",["get","suffix",["loc",[null,[50,23],[50,29]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 6
                },
                "end": {
                  "line": 53,
                  "column": 6
                }
              },
              "moduleName": "uiux/templates/components/em-form-input.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              return morphs;
            },
            statements: [
              ["attribute","class",["concat",["glyphicon ",["get","prefix",["loc",[null,[52,33],[52,39]]]]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 6
                },
                "end": {
                  "line": 55,
                  "column": 6
                }
              },
              "moduleName": "uiux/templates/components/em-form-input.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","suffix",["loc",[null,[54,8],[54,18]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 6
              },
              "end": {
                "line": 55,
                "column": 6
              }
            },
            "moduleName": "uiux/templates/components/em-form-input.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","glyphSuffix",["loc",[null,[51,16],[51,27]]]]],[],0,1,["loc",[null,[51,6],[55,6]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 2
            }
          },
          "moduleName": "uiux/templates/components/em-form-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","input-group-addon");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","if",[["get","faSuffix",["loc",[null,[49,12],[49,20]]]]],[],0,1,["loc",[null,[49,6],[55,13]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 61,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/components/em-form-input.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","help-block error-text");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","msg",["loc",[null,[60,37],[60,44]]]]
        ],
        locals: ["msg"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 9
          }
        },
        "moduleName": "uiux/templates/components/em-form-input.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        dom.setAttribute(el1,"class","control-label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","label-text");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(fragment, [2]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element7, 'for');
        morphs[1] = dom.createMorphAt(dom.childAt(element7, [1]),0,0);
        morphs[2] = dom.createAttrMorph(element8, 'class');
        morphs[3] = dom.createMorphAt(element8,1,1);
        morphs[4] = dom.createMorphAt(element8,2,2);
        morphs[5] = dom.createMorphAt(element8,3,3);
        morphs[6] = dom.createMorphAt(fragment,4,4,contextualElement);
        morphs[7] = dom.createMorphAt(fragment,5,5,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["attribute","for",["concat",[["get","name",["loc",[null,[1,14],[1,18]]]]]]],
        ["content","label",["loc",[null,[2,27],[2,36]]]],
        ["attribute","class",["subexpr","if",[["get","shouldInputGroup",["loc",[null,[5,16],[5,32]]]],"input-group"],[],["loc",[null,[5,11],[5,48]]]]],
        ["block","if",[["get","prefix",["loc",[null,[6,8],[6,14]]]]],[],0,null,["loc",[null,[6,2],[16,9]]]],
        ["block","if",[["get","isSelectType",["loc",[null,[17,8],[17,20]]]]],[],1,2,["loc",[null,[17,2],[46,9]]]],
        ["block","if",[["get","suffix",["loc",[null,[47,8],[47,14]]]]],[],3,null,["loc",[null,[47,2],[57,9]]]],
        ["block","each",[["get","errorMessages",["loc",[null,[59,8],[59,21]]]]],[],4,null,["loc",[null,[59,0],[61,9]]]],
        ["content","yield",["loc",[null,[62,0],[62,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('uiux/templates/components/ember-list-standin', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/components/ember-list-standin.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","yield",[["get","item",["loc",[null,[2,10],[2,14]]]]],[],["loc",[null,[2,2],[2,16]]]]
        ],
        locals: ["item"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "uiux/templates/components/ember-list-standin.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","items",["loc",[null,[1,8],[1,13]]]]],[],0,null,["loc",[null,[1,0],[3,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/components/ember-webcam-input', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "uiux/templates/components/ember-webcam-input.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/components/inventory-table', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 54
            },
            "end": {
              "line": 1,
              "column": 105
            }
          },
          "moduleName": "uiux/templates/components/inventory-table.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("th");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          return morphs;
        },
        statements: [
          ["content","colName",["loc",[null,[1,89],[1,100]]]]
        ],
        locals: ["colName"],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 292
                },
                "end": {
                  "line": 1,
                  "column": 340
                }
              },
              "moduleName": "uiux/templates/components/inventory-table.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-cubes");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 347
                },
                "end": {
                  "line": 1,
                  "column": 400
                }
              },
              "moduleName": "uiux/templates/components/inventory-table.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-warning");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 197
              },
              "end": {
                "line": 1,
                "column": 412
              }
            },
            "moduleName": "uiux/templates/components/inventory-table.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("td");
            dom.setAttribute(el1,"class","pointer cell");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0,0,0);
            morphs[2] = dom.createMorphAt(element0,1,1);
            return morphs;
          },
          statements: [
            ["element","action",[["get","cellTouch",["loc",[null,[1,243],[1,252]]]],["get","cell",["loc",[null,[1,253],[1,257]]]]],["on","click"],["loc",[null,[1,234],[1,270]]]],
            ["block","if",[["get","cell.hasGoods",["loc",[null,[1,298],[1,311]]]]],[],0,null,["loc",[null,[1,292],[1,347]]]],
            ["block","if",[["get","cell.hasProblems",["loc",[null,[1,353],[1,369]]]]],[],1,null,["loc",[null,[1,347],[1,407]]]]
          ],
          locals: ["cell"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 134
            },
            "end": {
              "line": 1,
              "column": 426
            }
          },
          "moduleName": "uiux/templates/components/inventory-table.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("tr");
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [0]),0,0);
          morphs[1] = dom.createMorphAt(element1,1,1);
          return morphs;
        },
        statements: [
          ["content","bodyRow.rowName",["loc",[null,[1,173],[1,192]]]],
          ["block","each",[["get","bodyRow.cells",["loc",[null,[1,205],[1,218]]]]],[],0,null,["loc",[null,[1,197],[1,421]]]]
        ],
        locals: ["bodyRow"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 451
          }
        },
        "moduleName": "uiux/templates/components/inventory-table.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("table");
        var el2 = dom.createElement("thead");
        var el3 = dom.createElement("tr");
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode("#");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [0, 0]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
        return morphs;
      },
      statements: [
        ["attribute","class",["get","tableClassNames",["loc",[null,[1,15],[1,30]]]]],
        ["block","each",[["get","colNames",["loc",[null,[1,62],[1,70]]]]],[],0,null,["loc",[null,[1,54],[1,114]]]],
        ["block","each",[["get","bodyRows",["loc",[null,[1,142],[1,150]]]]],[],1,null,["loc",[null,[1,134],[1,435]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/components/just-tile', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 36
          }
        },
        "moduleName": "uiux/templates/components/just-tile.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("rect");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("text");
        dom.setAttribute(el1,"class","fa");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element0, 'x');
        morphs[1] = dom.createAttrMorph(element0, 'y');
        morphs[2] = dom.createAttrMorph(element0, 'rx');
        morphs[3] = dom.createAttrMorph(element0, 'ry');
        morphs[4] = dom.createAttrMorph(element0, 'width');
        morphs[5] = dom.createAttrMorph(element0, 'height');
        morphs[6] = dom.createAttrMorph(element0, 'stroke-width');
        morphs[7] = dom.createAttrMorph(element0, 'stroke');
        morphs[8] = dom.createAttrMorph(element0, 'fill');
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        return morphs;
      },
      statements: [
        ["attribute","x",["get","rectX",["loc",[null,[1,10],[1,15]]]]],
        ["attribute","y",["get","rectY",["loc",[null,[1,22],[1,27]]]]],
        ["attribute","rx",["get","cornerX",["loc",[null,[1,35],[1,42]]]]],
        ["attribute","ry",["get","cornerY",["loc",[null,[1,50],[1,57]]]]],
        ["attribute","width",["get","rectW",["loc",[null,[1,68],[1,73]]]]],
        ["attribute","height",["get","rectH",["loc",[null,[1,85],[1,90]]]]],
        ["attribute","stroke-width",["get","strokeWidth",["loc",[null,[1,108],[1,119]]]]],
        ["attribute","stroke",["get","stroke",["loc",[null,[1,131],[1,137]]]]],
        ["attribute","fill",["get","fill",["loc",[null,[1,147],[1,151]]]]],
        ["content","iconText",["loc",[null,[2,17],[2,29]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/components/news-ticker', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 46
              },
              "end": {
                "line": 1,
                "column": 116
              }
            },
            "moduleName": "uiux/templates/components/news-ticker.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-archive fa-3x text-danger");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 116
              },
              "end": {
                "line": 1,
                "column": 159
              }
            },
            "moduleName": "uiux/templates/components/news-ticker.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-archive fa-3x");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 166
            }
          },
          "moduleName": "uiux/templates/components/news-ticker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","messages.length",["loc",[null,[1,52],[1,67]]]]],[],0,1,["loc",[null,[1,46],[1,166]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 231
              },
              "end": {
                "line": 1,
                "column": 326
              }
            },
            "moduleName": "uiux/templates/components/news-ticker.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
            return morphs;
          },
          statements: [
            ["content","message.tickerTitle",["loc",[null,[1,296],[1,319]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 200
            },
            "end": {
              "line": 1,
              "column": 338
            }
          },
          "moduleName": "uiux/templates/components/news-ticker.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["message",["get","message.id",["loc",[null,[1,252],[1,262]]]]],["class",["subexpr","@mut",[["get","message.threatLevel",["loc",[null,[1,269],[1,288]]]]],[],[]]],0,null,["loc",[null,[1,231],[1,338]]]]
        ],
        locals: ["message"],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 338
            },
            "end": {
              "line": 1,
              "column": 427
            }
          },
          "moduleName": "uiux/templates/components/news-ticker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","message-title");
          var el3 = dom.createTextNode("nothing to report");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 442
          }
        },
        "moduleName": "uiux/templates/components/news-ticker.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","messages");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","link-to",["messages"],["class","archive-anchor"],0,null,["loc",[null,[1,0],[1,178]]]],
        ["block","each",[["get","messages",["loc",[null,[1,208],[1,216]]]]],[],1,2,["loc",[null,[1,200],[1,436]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/components/panel-collapsible', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 7,
              "column": 6
            }
          },
          "moduleName": "uiux/templates/components/panel-collapsible.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-chevron-down");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 6
            },
            "end": {
              "line": 9,
              "column": 6
            }
          },
          "moduleName": "uiux/templates/components/panel-collapsible.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-chevron-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/components/panel-collapsible.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[14,2],[14,11]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 7
          }
        },
        "moduleName": "uiux/templates/components/panel-collapsible.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel-heading pointer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2,"class","panel-title");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[3] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["element","action",["clickHeader"],[],["loc",[null,[1,35],[1,59]]]],
        ["content","panelTitle",["loc",[null,[3,4],[3,18]]]],
        ["block","if",[["get","isActive",["loc",[null,[5,12],[5,20]]]]],[],0,1,["loc",[null,[5,6],[9,13]]]],
        ["block","if",[["get","isActive",["loc",[null,[13,6],[13,14]]]]],[],2,null,["loc",[null,[13,0],[15,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/components/promise-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/components/promise-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","loading-text");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","loadingText",["loc",[null,[2,29],[2,44]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/components/promise-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[4,2],[4,11]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "uiux/templates/components/promise-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","isLoading",["loc",[null,[1,6],[1,15]]]]],[],0,1,["loc",[null,[1,0],[5,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/components/vector-canvas', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 6
          }
        },
        "moduleName": "uiux/templates/components/vector-canvas.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        dom.setNamespace("http://www.w3.org/2000/svg");
        var el1 = dom.createElement("svg");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("g");
        dom.setAttribute(el2,"class","master-canvas");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'transform');
        morphs[1] = dom.createMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["attribute","transform",["get","canvasTransform",["loc",[null,[2,39],[2,54]]]]],
        ["content","yield",["loc",[null,[3,4],[3,13]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/components/vector-tiles', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/components/vector-tiles.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","just-tile",[],["model",["subexpr","@mut",[["get","tile",["loc",[null,[2,20],[2,24]]]]],[],[]],"action","interact"],["loc",[null,[2,2],[2,44]]]]
        ],
        locals: ["tile"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "uiux/templates/components/vector-tiles.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","tiles",["loc",[null,[1,8],[1,13]]]]],[],0,null,["loc",[null,[1,0],[3,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/components/video-proxy', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 31
            }
          },
          "moduleName": "uiux/templates/components/video-proxy.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("source");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [
          ["attribute","src",["get","src",["loc",[null,[1,25],[1,28]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 96
          }
        },
        "moduleName": "uiux/templates/components/video-proxy.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","vjs-no-js");
        var el2 = dom.createTextNode("your browser can't support html5 ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","if",[["get","src",["loc",[null,[1,6],[1,9]]]]],[],0,null,["loc",[null,[1,0],[1,38]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/docks', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 77
            },
            "end": {
              "line": 1,
              "column": 174
            }
          },
          "moduleName": "uiux/templates/docks.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize bold");
          var el2 = dom.createTextNode("loading docks index");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 217
            },
            "end": {
              "line": 1,
              "column": 317
            }
          },
          "moduleName": "uiux/templates/docks.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-cubes");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("inventory");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 383
            },
            "end": {
              "line": 1,
              "column": 433
            }
          },
          "moduleName": "uiux/templates/docks.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 802
          }
        },
        "moduleName": "uiux/templates/docks.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","main-nav");
        var el2 = dom.createElement("nav");
        dom.setAttribute(el2,"class","navbar navbar-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","nav navbar-nav");
        var el5 = dom.createElement("li");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","nav navbar-nav navbar-right");
        var el5 = dom.createElement("li");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","scalemaster-application");
        dom.setAttribute(el1,"class","non-manager-application");
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"id","scale-info");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("footer");
        dom.setAttribute(el2,"id","non-manager-footer");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-xs-12");
        var el6 = dom.createElement("h4");
        dom.setAttribute(el6,"class","footer-title");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa");
        var el8 = dom.createTextNode("docks");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 0]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [2, 0]),0,0);
        morphs[3] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1, 0, 0]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["docks"],["class","navbar-brand"],0,null,["loc",[null,[1,77],[1,186]]]],
        ["block","link-to",["docks.inventories"],[],1,null,["loc",[null,[1,217],[1,329]]]],
        ["block","link-to",["index"],[],2,null,["loc",[null,[1,383],[1,445]]]],
        ["content","outlet",["loc",[null,[1,587],[1,599]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/docks/_slice', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 269
            }
          },
          "moduleName": "uiux/templates/docks/_slice.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","dock-title");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("dock #");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","dock-status");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","dash bold");
          var el3 = dom.createTextNode("status");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);
          return morphs;
        },
        statements: [
          ["content","dock.nameOrId",["loc",[null,[1,133],[1,150]]]],
          ["content","dock.status",["loc",[null,[1,241],[1,256]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 281
          }
        },
        "moduleName": "uiux/templates/docks/_slice.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","link-to",["docks.dock.index",["get","dock.id",["loc",[null,[1,30],[1,37]]]]],["class","list-group-item"],0,null,["loc",[null,[1,0],[1,281]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/docks/batch', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 76
            },
            "end": {
              "line": 1,
              "column": 214
            }
          },
          "moduleName": "uiux/templates/docks/batch.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-dashboard");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("dash");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 226
            },
            "end": {
              "line": 1,
              "column": 364
            }
          },
          "moduleName": "uiux/templates/docks/batch.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-camera");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("status");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 376
            },
            "end": {
              "line": 1,
              "column": 517
            }
          },
          "moduleName": "uiux/templates/docks/batch.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 529
            },
            "end": {
              "line": 1,
              "column": 666
            }
          },
          "moduleName": "uiux/templates/docks/batch.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-cubes");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("bale instructions");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2256
            },
            "end": {
              "line": 1,
              "column": 2384
            }
          },
          "moduleName": "uiux/templates/docks/batch.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("done");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2420
          }
        },
        "moduleName": "uiux/templates/docks/batch.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group btn-group-lg");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default instructions-set");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading instruction-line");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("tag and store this bale");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-body");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","row");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/barcode.png");
        dom.setAttribute(el7,"class","thumbnail bound");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el7 = dom.createElement("h3");
        dom.setAttribute(el7,"class","instruction");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa bold colon capitalize");
        var el9 = dom.createTextNode("storage section");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa highlight prespace");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("id");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createElement("span");
        var el11 = dom.createTextNode("batch-");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("origin appointment");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("owner");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("loading dock");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("quantity");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("description");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("arrived at");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("truck id");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var element1 = dom.childAt(fragment, [1, 0, 0, 1]);
        var element2 = dom.childAt(element1, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var morphs = new Array(14);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,2,2);
        morphs[3] = dom.createMorphAt(element0,3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [0, 1, 1]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [1, 1]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(element3, [2, 1]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(element3, [3, 1]),0,0);
        morphs[9] = dom.createMorphAt(dom.childAt(element3, [4, 1]),0,0);
        morphs[10] = dom.createMorphAt(dom.childAt(element3, [5, 1]),0,0);
        morphs[11] = dom.createMorphAt(dom.childAt(element3, [6, 1]),0,0);
        morphs[12] = dom.createMorphAt(dom.childAt(element3, [7, 1]),0,0);
        morphs[13] = dom.createMorphAt(element1,1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["docks.dock.index",["get","model.dock.id",["loc",[null,[1,106],[1,119]]]]],["class","btn btn-default"],0,null,["loc",[null,[1,76],[1,226]]]],
        ["block","link-to",["docks.dock.status",["get","model.dock.id",["loc",[null,[1,257],[1,270]]]]],["class","btn btn-default"],1,null,["loc",[null,[1,226],[1,376]]]],
        ["block","link-to",["docks.dock.problem",["get","model.dock.id",["loc",[null,[1,408],[1,421]]]]],["class","btn btn-default"],2,null,["loc",[null,[1,376],[1,529]]]],
        ["block","link-to",["docks.batch",["get","model.id",["loc",[null,[1,554],[1,562]]]]],["class","btn btn-default"],3,null,["loc",[null,[1,529],[1,678]]]],
        ["content","model.warehouse.nameOrId",["loc",[null,[1,1207],[1,1235]]]],
        ["content","model.id",["loc",[null,[1,1354],[1,1366]]]],
        ["content","model.appointment.permalink",["loc",[null,[1,1479],[1,1510]]]],
        ["content","model.appointment.company",["loc",[null,[1,1603],[1,1632]]]],
        ["content","model.dock.nameOrId",["loc",[null,[1,1732],[1,1755]]]],
        ["content","model.quantity",["loc",[null,[1,1851],[1,1869]]]],
        ["content","model.description",["loc",[null,[1,1968],[1,1989]]]],
        ["inline","moment",[["get","model.createdAt",["loc",[null,[1,2096],[1,2111]]]]],[],["loc",[null,[1,2087],[1,2113]]]],
        ["content","model.truck.id",["loc",[null,[1,2209],[1,2227]]]],
        ["block","link-to",["docks.truck.arrive",["get","model.truck.id",["loc",[null,[1,2288],[1,2302]]]]],["class","btn btn-lg btn-success btn-hover"],4,null,["loc",[null,[1,2256],[1,2396]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('uiux/templates/docks/cell', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 184
            },
            "end": {
              "line": 1,
              "column": 339
            }
          },
          "moduleName": "uiux/templates/docks/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize prespace");
          var el2 = dom.createTextNode("back to inventory");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 552
            },
            "end": {
              "line": 1,
              "column": 733
            }
          },
          "moduleName": "uiux/templates/docks/cell.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("tr");
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [4]),0,0);
          return morphs;
        },
        statements: [
          ["content","batch.id",["loc",[null,[1,594],[1,606]]]],
          ["content","batch.description",["loc",[null,[1,615],[1,636]]]],
          ["content","batch.quantity",["loc",[null,[1,645],[1,663]]]],
          ["content","batch.createdAt",["loc",[null,[1,672],[1,691]]]],
          ["content","batch.appointmentId",["loc",[null,[1,700],[1,723]]]]
        ],
        locals: ["batch"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 770
          }
        },
        "moduleName": "uiux/templates/docks/cell.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","section-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("cell # ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row info");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","table-striped table-bordered table");
        var el4 = dom.createElement("thead");
        var el5 = dom.createElement("tr");
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("id");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("desc");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("quant");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("ETA");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("appt");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [2]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [2, 0, 0, 1]),0,0);
        return morphs;
      },
      statements: [
        ["content","model.colName",["loc",[null,[1,74],[1,91]]]],
        ["content","model.rowName",["loc",[null,[1,115],[1,132]]]],
        ["block","link-to",["docks.inventories.index"],["class","btn btn-default"],0,null,["loc",[null,[1,184],[1,351]]]],
        ["block","each",[["get","model.batches",["loc",[null,[1,560],[1,573]]]]],[],1,null,["loc",[null,[1,552],[1,742]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/docks/cell/pictures', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 568
          }
        },
        "moduleName": "uiux/templates/docks/cell/pictures.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/docks/dock', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 76
            },
            "end": {
              "line": 1,
              "column": 209
            }
          },
          "moduleName": "uiux/templates/docks/dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-dashboard");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("dash");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 221
            },
            "end": {
              "line": 1,
              "column": 354
            }
          },
          "moduleName": "uiux/templates/docks/dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-camera");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("camera");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 366
            },
            "end": {
              "line": 1,
              "column": 502
            }
          },
          "moduleName": "uiux/templates/docks/dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 567
          }
        },
        "moduleName": "uiux/templates/docks/dock.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group btn-group-lg");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,2,2);
        morphs[3] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["docks.dock.index",["get","model.id",["loc",[null,[1,106],[1,114]]]]],["class","btn btn-default"],0,null,["loc",[null,[1,76],[1,221]]]],
        ["block","link-to",["docks.dock.status",["get","model.id",["loc",[null,[1,252],[1,260]]]]],["class","btn btn-default"],1,null,["loc",[null,[1,221],[1,366]]]],
        ["block","link-to",["docks.dock.problem",["get","model.id",["loc",[null,[1,398],[1,406]]]]],["class","btn btn-default"],2,null,["loc",[null,[1,366],[1,514]]]],
        ["content","outlet",["loc",[null,[1,549],[1,561]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/docks/dock/_inuse', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 243
            },
            "end": {
              "line": 1,
              "column": 749
            }
          },
          "moduleName": "uiux/templates/docks/dock/_inuse.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item pointer");
          var el2 = dom.createElement("h5");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","fa fa-truck");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","fa capitalize bold colon");
          var el4 = dom.createTextNode("truck plate");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","fa prespace spacebar");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","fa capitalize bold colon");
          var el4 = dom.createTextNode("from appointment number");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","fa prespace");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","pull-right");
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","fa");
          var el5 = dom.createTextNode("click when this truck arrives");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0]);
          var element2 = dom.childAt(element1, [0]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [2]),0,0);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [4]),0,0);
          return morphs;
        },
        statements: [
          ["element","action",["arrive",["get","truck",["loc",[null,[1,305],[1,310]]]]],["on","click"],["loc",[null,[1,287],[1,323]]]],
          ["content","truck.weighticket.licensePlate",["loc",[null,[1,479],[1,513]]]],
          ["content","truck.appointment.permalink",["loc",[null,[1,615],[1,646]]]]
        ],
        locals: ["truck"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 749
            },
            "end": {
              "line": 1,
              "column": 821
            }
          },
          "moduleName": "uiux/templates/docks/dock/_inuse.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("no trucks are headed this way");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1116
              },
              "end": {
                "line": 1,
                "column": 1615
              }
            },
            "moduleName": "uiux/templates/docks/dock/_inuse.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("h5");
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","fa fa-truck");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa capitalize bold colon");
            var el3 = dom.createTextNode("truck plate");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa prespace spacebar");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa capitalize bold colon");
            var el3 = dom.createTextNode("from appointment number");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa prespace");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","pull-right");
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","fa bold colon");
            var el4 = dom.createTextNode("docked at");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","fa prespace");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [4]),0,0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [5, 1]),0,0);
            return morphs;
          },
          statements: [
            ["content","truck.weighticket.licensePlate",["loc",[null,[1,1305],[1,1339]]]],
            ["content","truck.appointment.permalink",["loc",[null,[1,1441],[1,1472]]]],
            ["inline","ago",[["get","truck.dockedAt",["loc",[null,[1,1580],[1,1594]]]]],[],["loc",[null,[1,1574],[1,1596]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1076
            },
            "end": {
              "line": 1,
              "column": 1627
            }
          },
          "moduleName": "uiux/templates/docks/dock/_inuse.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["docks.truck.arrive",["get","truck.id",["loc",[null,[1,1148],[1,1156]]]]],["class","list-group-item"],0,null,["loc",[null,[1,1116],[1,1627]]]]
        ],
        locals: ["truck"],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1627
            },
            "end": {
              "line": 1,
              "column": 1695
            }
          },
          "moduleName": "uiux/templates/docks/dock/_inuse.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("no trucks are docked here");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1716
          }
        },
        "moduleName": "uiux/templates/docks/dock/_inuse.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("coming trucks");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createTextNode("The following trucks are heading to this dock");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("docked trucks");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createTextNode("The following trucks are docked here");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 2]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 2]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","comingDockedTrucks",["loc",[null,[1,251],[1,269]]]]],[],0,1,["loc",[null,[1,243],[1,830]]]],
        ["block","each",[["get","alreadyDockedTrucks",["loc",[null,[1,1084],[1,1103]]]]],[],2,3,["loc",[null,[1,1076],[1,1704]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('uiux/templates/docks/dock/_okay', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 265
          }
        },
        "moduleName": "uiux/templates/docks/dock/_okay.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("free dock: nothing to do");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","capitalize");
        var el4 = dom.createTextNode("this dock is currently not expecting a truck");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/docks/dock/_problem', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 560
          }
        },
        "moduleName": "uiux/templates/docks/dock/_problem.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-danger instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("you've filed a problem");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","capitalize");
        var el4 = dom.createTextNode("we have contacted the warehouse manager and he is heading over to help");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","capitalize");
        var el4 = dom.createTextNode("once you have resolved this problem, let me know so I can get back to work!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","btn btn-success btn-lg btn-hover");
        var el4 = dom.createElement("i");
        dom.setAttribute(el4,"class","fa fa-check");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize bold");
        var el5 = dom.createTextNode("resolve");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 2]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["element","action",["resolveProblem"],["on","click"],["loc",[null,[1,385],[1,423]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/docks/dock/_waiting', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 687
            },
            "end": {
              "line": 1,
              "column": 846
            }
          },
          "moduleName": "uiux/templates/docks/dock/_waiting.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize bold");
          var el2 = dom.createTextNode("report problem ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1098
          }
        },
        "moduleName": "uiux/templates/docks/dock/_waiting.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("Waiting for truck from appointment no.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","highlight");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("figure");
        var el4 = dom.createElement("figcaption");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("truck on-route from weight station, license number");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","highlight");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/license-plate.jpg");
        dom.setAttribute(el4,"class","thumbnail example-pic");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group btn-group-lg");
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-success btn-hover");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-truck");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize bold");
        var el6 = dom.createTextNode("truck has arrived");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item instruction-line");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("unload truck");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item instruction-line");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("finish");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [0, 0, 1]),0,0);
        morphs[2] = dom.createElementMorph(element3);
        morphs[3] = dom.createMorphAt(element2,1,1);
        return morphs;
      },
      statements: [
        ["content","truck.appointmentNumber",["loc",[null,[1,180],[1,207]]]],
        ["content","truck.licensePlate",["loc",[null,[1,362],[1,384]]]],
        ["element","action",["truckArrived"],["on","click"],["loc",[null,[1,523],[1,559]]]],
        ["block","link-to",["docks.dock.problem",["get","model.id",["loc",[null,[1,719],[1,727]]]]],["class","btn btn-danger btn-hover"],0,null,["loc",[null,[1,687],[1,858]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/docks/dock/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 176
            },
            "end": {
              "line": 1,
              "column": 244
            }
          },
          "moduleName": "uiux/templates/docks/dock/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","adaptive-camera",[],["camera",["subexpr","@mut",[["get","camera",["loc",[null,[1,236],[1,242]]]]],[],[]]],["loc",[null,[1,211],[1,244]]]]
        ],
        locals: ["camera"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 244
            },
            "end": {
              "line": 1,
              "column": 307
            }
          },
          "moduleName": "uiux/templates/docks/dock/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","fa parantheses");
          var el2 = dom.createTextNode("this dock has no camera");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 357
            },
            "end": {
              "line": 1,
              "column": 408
            }
          },
          "moduleName": "uiux/templates/docks/dock/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","partial",["docks/dock/okay"],[],["loc",[null,[1,377],[1,408]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 408
            },
            "end": {
              "line": 1,
              "column": 448
            }
          },
          "moduleName": "uiux/templates/docks/dock/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","partial",["docks/dock/inuse"],[],["loc",[null,[1,416],[1,448]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 461
          }
        },
        "moduleName": "uiux/templates/docks/dock/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading instruction-line");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("dock camera");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-body");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model.cameras",["loc",[null,[1,184],[1,197]]]]],[],0,1,["loc",[null,[1,176],[1,316]]]],
        ["block","if",[["get","model.isFree",["loc",[null,[1,363],[1,375]]]]],[],2,3,["loc",[null,[1,357],[1,455]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('uiux/templates/docks/dock/problem', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 224
              },
              "end": {
                "line": 1,
                "column": 329
              }
            },
            "moduleName": "uiux/templates/docks/dock/problem.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("label");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("describe what went wrong");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 515
              },
              "end": {
                "line": 1,
                "column": 672
              }
            },
            "moduleName": "uiux/templates/docks/dock/problem.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-times");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 51
            },
            "end": {
              "line": 1,
              "column": 690
            }
          },
          "moduleName": "uiux/templates/docks/dock/problem.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("legend");
          dom.setAttribute(el1,"class","form-title");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("dock problem @");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","actions");
          var el2 = dom.createElement("button");
          dom.setAttribute(el2,"type","submit");
          dom.setAttribute(el2,"class","btn btn-success btn-hover btn-lg btn-block");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","fa fa-check");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","capitalize");
          var el4 = dom.createTextNode("submit");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
          return morphs;
        },
        statements: [
          ["content","model.dockNumber",["loc",[null,[1,188],[1,208]]]],
          ["block","em-form-input",[],["name","notes","type","textarea"],0,null,["loc",[null,[1,224],[1,347]]]],
          ["block","link-to",["docks.dock.status",["get","model.id",["loc",[null,[1,546],[1,554]]]]],["class","btn btn-default btn-hover btn-lg btn-block"],1,null,["loc",[null,[1,515],[1,684]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 712
          }
        },
        "moduleName": "uiux/templates/docks/dock/problem.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12 col-sm-12 col-md-8 col-lg-6");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        return morphs;
      },
      statements: [
        ["block","em-form-for",[],["action","newProblemMessage","model",["subexpr","@mut",[["get","model",["loc",[null,[1,99],[1,104]]]]],[],[]]],0,null,["loc",[null,[1,51],[1,706]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/docks/dock/status', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 642
            },
            "end": {
              "line": 1,
              "column": 728
            }
          },
          "moduleName": "uiux/templates/docks/dock/status.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check text-success");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("ok");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 735
            },
            "end": {
              "line": 1,
              "column": 830
            }
          },
          "moduleName": "uiux/templates/docks/dock/status.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-cog fa-spin text-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("busy");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 837
            },
            "end": {
              "line": 1,
              "column": 930
            }
          },
          "moduleName": "uiux/templates/docks/dock/status.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning text-danger");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("error");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1004
            },
            "end": {
              "line": 1,
              "column": 1174
            }
          },
          "moduleName": "uiux/templates/docks/dock/status.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("report problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1997
          }
        },
        "moduleName": "uiux/templates/docks/dock/status.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el2 = dom.createElement("h3");
        dom.setAttribute(el2,"class","section-title");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("loading dock#");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el4 = dom.createElement("dl");
        var el5 = dom.createElement("dt");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","dt-title fa");
        var el7 = dom.createTextNode("data id");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","dt-title fa");
        var el7 = dom.createTextNode("camera status");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-check");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createTextNode("live");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","dt-title fa");
        var el7 = dom.createTextNode("dock status");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2,"class","subsection-title");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("station employees");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-left");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/doge.jpg");
        dom.setAttribute(el4,"class","media-object thumbnail mugshot");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-body");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","media-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa employee-name");
        var el6 = dom.createTextNode("Leonard Nimoy");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","status-info");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize bold colon");
        var el6 = dom.createTextNode("status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","prespace");
        var el6 = dom.createTextNode("dead");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-left");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/doge2.jpg");
        dom.setAttribute(el4,"class","media-object thumbnail mugshot");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-body");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","media-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa employee-name");
        var el6 = dom.createTextNode("William Shatner");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","status-info");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize bold colon");
        var el6 = dom.createTextNode("status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","prespace");
        var el6 = dom.createTextNode("overweight");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [0, 0]);
        var element3 = dom.childAt(element2, [5]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 0]),0,0);
        morphs[3] = dom.createMorphAt(element3,0,0);
        morphs[4] = dom.createMorphAt(element3,1,1);
        morphs[5] = dom.createMorphAt(element3,2,2);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        return morphs;
      },
      statements: [
        ["inline","video-proxy",[],["src","assets/doge.webm","class","thumbnail scale-camera"],["loc",[null,[1,51],[1,120]]]],
        ["content","model.dockNumber",["loc",[null,[1,268],[1,288]]]],
        ["content","model.id",["loc",[null,[1,442],[1,454]]]],
        ["block","if",[["get","model.isOkay",["loc",[null,[1,648],[1,660]]]]],[],0,null,["loc",[null,[1,642],[1,735]]]],
        ["block","if",[["get","model.isInUse",["loc",[null,[1,741],[1,754]]]]],[],1,null,["loc",[null,[1,735],[1,837]]]],
        ["block","if",[["get","model.isProblem",["loc",[null,[1,843],[1,858]]]]],[],2,null,["loc",[null,[1,837],[1,937]]]],
        ["block","link-to",["docks.dock.problem",["get","model.id",["loc",[null,[1,1036],[1,1044]]]]],["class","btn btn-block btn-lg btn-danger btn-hover"],3,null,["loc",[null,[1,1004],[1,1186]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('uiux/templates/docks/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 17
            },
            "end": {
              "line": 1,
              "column": 155
            }
          },
          "moduleName": "uiux/templates/docks/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-xs-12 col-sm-6 col-md-4 col-lg-4");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","list-group");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["inline","partial",["docks/slice"],[],["loc",[null,[1,116],[1,143]]]]
        ],
        locals: ["dock"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 170
          }
        },
        "moduleName": "uiux/templates/docks/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[1,25],[1,30]]]]],[],0,null,["loc",[null,[1,17],[1,164]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/docks/inventories', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 12
          }
        },
        "moduleName": "uiux/templates/docks/inventories.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,12]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/docks/inventories/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 42
          }
        },
        "moduleName": "uiux/templates/docks/inventories/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","partial",["inventories/inventory-grid"],[],["loc",[null,[1,0],[1,42]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/docks/truck', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 76
            },
            "end": {
              "line": 1,
              "column": 214
            }
          },
          "moduleName": "uiux/templates/docks/truck.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-dashboard");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("dash");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 226
            },
            "end": {
              "line": 1,
              "column": 364
            }
          },
          "moduleName": "uiux/templates/docks/truck.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-camera");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("status");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 376
            },
            "end": {
              "line": 1,
              "column": 517
            }
          },
          "moduleName": "uiux/templates/docks/truck.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 529
            },
            "end": {
              "line": 1,
              "column": 669
            }
          },
          "moduleName": "uiux/templates/docks/truck.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-truck");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("truck at dock");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 763
          }
        },
        "moduleName": "uiux/templates/docks/truck.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group btn-group-lg");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,2,2);
        morphs[3] = dom.createMorphAt(element0,3,3);
        morphs[4] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1, 0]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["docks.dock.index",["get","model.dock.id",["loc",[null,[1,106],[1,119]]]]],["class","btn btn-default"],0,null,["loc",[null,[1,76],[1,226]]]],
        ["block","link-to",["docks.dock.status",["get","model.dock.id",["loc",[null,[1,257],[1,270]]]]],["class","btn btn-default"],1,null,["loc",[null,[1,226],[1,376]]]],
        ["block","link-to",["docks.dock.problem",["get","model.dock.id",["loc",[null,[1,408],[1,421]]]]],["class","btn btn-default"],2,null,["loc",[null,[1,376],[1,529]]]],
        ["block","link-to",["docks.truck.arrive",["get","model.id",["loc",[null,[1,561],[1,569]]]]],["class","btn btn-default"],3,null,["loc",[null,[1,529],[1,681]]]],
        ["content","outlet",["loc",[null,[1,739],[1,751]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('uiux/templates/docks/truck/arrive', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 407
            },
            "end": {
              "line": 1,
              "column": 480
            }
          },
          "moduleName": "uiux/templates/docks/truck/arrive.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","adaptive-camera",[],["camera",["subexpr","@mut",[["get","camera",["loc",[null,[1,472],[1,478]]]]],[],[]]],["loc",[null,[1,447],[1,480]]]]
        ],
        locals: ["camera"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 480
            },
            "end": {
              "line": 1,
              "column": 544
            }
          },
          "moduleName": "uiux/templates/docks/truck/arrive.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h5");
          dom.setAttribute(el1,"class","fa parantheses");
          var el2 = dom.createTextNode("this dock has no cameras");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 820
            },
            "end": {
              "line": 1,
              "column": 1058
            }
          },
          "moduleName": "uiux/templates/docks/truck/arrive.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa spacebar");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa bold");
          var el3 = dom.createTextNode("currently at storage section:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
          return morphs;
        },
        statements: [
          ["inline","moment",[["get","batch.createdAt",["loc",[null,[1,918],[1,933]]]]],[],["loc",[null,[1,909],[1,935]]]],
          ["content","batch.warehouse.nameOrId",["loc",[null,[1,1017],[1,1045]]]]
        ],
        locals: ["batch"],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1058
            },
            "end": {
              "line": 1,
              "column": 1130
            }
          },
          "moduleName": "uiux/templates/docks/truck/arrive.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createTextNode("nothing has been unloaded yet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1192
            },
            "end": {
              "line": 1,
              "column": 1385
            }
          },
          "moduleName": "uiux/templates/docks/truck/arrive.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("pallet from truck");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1397
            },
            "end": {
              "line": 1,
              "column": 1533
            }
          },
          "moduleName": "uiux/templates/docks/truck/arrive.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("finished unloading");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1686
          }
        },
        "moduleName": "uiux/templates/docks/truck/arrive.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("from appointment no.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","highlight");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("is coming to this dock");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("figure");
        var el4 = dom.createElement("figcaption");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("Unload the truck and label each pallet. The loading process is being record");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize bold colon");
        var el4 = dom.createTextNode("truck docked at");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4,"class","fa capitalize bold");
        var el5 = dom.createTextNode("already unloaded batches");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item instruction-line");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("finish");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [4, 0]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 0]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [2, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[4] = dom.createMorphAt(element2,0,0);
        morphs[5] = dom.createMorphAt(element2,1,1);
        return morphs;
      },
      statements: [
        ["content","truck.appointmentPermalink",["loc",[null,[1,162],[1,192]]]],
        ["block","each",[["get","truck.dock.cameras",["loc",[null,[1,415],[1,433]]]]],[],0,1,["loc",[null,[1,407],[1,553]]]],
        ["inline","ago",[["get","truck.dockedAt",["loc",[null,[1,674],[1,688]]]]],[],["loc",[null,[1,668],[1,690]]]],
        ["block","each",[["get","truck.batches",["loc",[null,[1,828],[1,841]]]]],[],2,3,["loc",[null,[1,820],[1,1139]]]],
        ["block","link-to",["docks.truck.batches.new",["get","truck.id",["loc",[null,[1,1229],[1,1237]]]],["subexpr","query-params",[],["warehouse",["get","truck.preferredWarehouse.id",["loc",[null,[1,1262],[1,1289]]]]],["loc",[null,[1,1238],[1,1290]]]]],["class","btn btn-lg btn-success btn-hover"],4,null,["loc",[null,[1,1192],[1,1397]]]],
        ["block","link-to",["docks.truck.depart",["get","truck.id",["loc",[null,[1,1429],[1,1437]]]]],["class","btn btn-lg btn-default btn-hover"],5,null,["loc",[null,[1,1397],[1,1545]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('uiux/templates/docks/truck/batches/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 424
              },
              "end": {
                "line": 1,
                "column": 608
              }
            },
            "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-lg-4 col-md-4 col-sm-6 col-xs-6");
            var el2 = dom.createElement("img");
            dom.setAttribute(el2,"class","thumbnail bound click-to-kill pointer");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0, 0]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [
            ["attribute","src",["get","uri",["loc",[null,[1,550],[1,553]]]]],
            ["element","action",["killPic",["get","uri",["loc",[null,[1,527],[1,530]]]]],["on","click"],["loc",[null,[1,508],[1,543]]]]
          ],
          locals: ["uri"],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 623
              },
              "end": {
                "line": 1,
                "column": 759
              }
            },
            "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("about how much material is in this batch?");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 777
              },
              "end": {
                "line": 1,
                "column": 1034
              }
            },
            "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("if you don't like the suggested storage section, please change it");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1052
              },
              "end": {
                "line": 1,
                "column": 1177
              }
            },
            "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("any additional notes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1218
              },
              "end": {
                "line": 1,
                "column": 1374
              }
            },
            "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child5 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1393
              },
              "end": {
                "line": 1,
                "column": 1545
              }
            },
            "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-times");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("back");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 343
            },
            "end": {
              "line": 1,
              "column": 1563
            }
          },
          "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","btn-group");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [4]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[4] = dom.createMorphAt(element1,0,0);
          morphs[5] = dom.createMorphAt(element1,1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","model.files",["loc",[null,[1,432],[1,443]]]]],[],0,null,["loc",[null,[1,424],[1,617]]]],
          ["block","em-form-input",[],["name","quantity","type","text","label","quantity"],1,null,["loc",[null,[1,623],[1,777]]]],
          ["block","em-form-input",[],["name","warehouse","type","select","label","target storage section","content",["subexpr","@mut",[["get","warehouseChoices",["loc",[null,[1,864],[1,880]]]]],[],[]],"optionValuePath","value","optionLabelPath","presentation"],2,null,["loc",[null,[1,777],[1,1052]]]],
          ["block","em-form-input",[],["name","description","type","textarea","label","description"],3,null,["loc",[null,[1,1052],[1,1195]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,1242],[1,1247]]]]],[],[]],"classNames","btn btn-success btn-hover btn-lg","type","submit"],4,null,["loc",[null,[1,1218],[1,1393]]]],
          ["block","link-to",["docks.truck.arrive",["get","model.truck.id",["loc",[null,[1,1425],[1,1439]]]]],["class","btn btn-default btn-hover btn-lg"],5,null,["loc",[null,[1,1393],[1,1557]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2118
          }
        },
        "moduleName": "uiux/templates/docks/truck/batches/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("material bale from truck with appointment number");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","highlight");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body instruction-line");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-xs-12 col-sm-12 col-md-9 col-lg-9");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-xs-12 col-sm-12 col-md-3 col-lg-3");
        var el5 = dom.createElement("ul");
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa bold colon");
        var el8 = dom.createTextNode("truck license plate");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa bold colon");
        var el8 = dom.createTextNode("loading dock");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa bold colon");
        var el8 = dom.createTextNode("arrived at");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa bold colon");
        var el8 = dom.createTextNode("target storage section");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1, 0]);
        var element4 = dom.childAt(element3, [1, 0]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [0]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [0, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [1, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [2, 1]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [3, 1]),0,0);
        return morphs;
      },
      statements: [
        ["content","model.appointment.permalink",["loc",[null,[1,190],[1,221]]]],
        ["block","em-form-for",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,364],[1,369]]]]],[],[]],"mistakes",["subexpr","@mut",[["get","batchErrors",["loc",[null,[1,379],[1,390]]]]],[],[]],"action","batch"],0,null,["loc",[null,[1,343],[1,1579]]]],
        ["content","model.truck.weighticket.licensePlate",["loc",[null,[1,1715],[1,1755]]]],
        ["content","model.dock.nameOrId",["loc",[null,[1,1835],[1,1858]]]],
        ["inline","ago",[["get","model.arrivedAt",["loc",[null,[1,1942],[1,1957]]]]],[],["loc",[null,[1,1936],[1,1959]]]],
        ["content","model.warehouse.nameOrId",["loc",[null,[1,2049],[1,2077]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/docks/truck/depart', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 500
              },
              "end": {
                "line": 1,
                "column": 773
              }
            },
            "moduleName": "uiux/templates/docks/truck/depart.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa");
            var el3 = dom.createTextNode("if you don't like my suggestion, please pick a station yourself");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 814
              },
              "end": {
                "line": 1,
                "column": 970
              }
            },
            "moduleName": "uiux/templates/docks/truck/depart.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("finish");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 397
            },
            "end": {
              "line": 1,
              "column": 995
            }
          },
          "moduleName": "uiux/templates/docks/truck/depart.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","btn-group");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","em-form-input",[],["name","exitScale","type","select","label","truck exit station","content",["subexpr","@mut",[["get","stationChoices",["loc",[null,[1,583],[1,597]]]]],[],[]],"optionValuePath","value","optionLabelPath","presentation"],0,null,["loc",[null,[1,500],[1,791]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,838],[1,843]]]]],[],[]],"classNames","btn btn-success btn-hover btn-lg","type","submit"],1,null,["loc",[null,[1,814],[1,989]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1017
          }
        },
        "moduleName": "uiux/templates/docks/truck/depart.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("the truck from appointment no.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","highlight");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("is ready to depart");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","instructions");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa");
        var el5 = dom.createTextNode("instruct the driver to proceed to the exit weight station");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(element0,2,2);
        return morphs;
      },
      statements: [
        ["content","model.appointment.permalink",["loc",[null,[1,172],[1,203]]]],
        ["block","em-form-for",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,418],[1,423]]]]],[],[]],"mistakes",["subexpr","@mut",[["get","mistakes",["loc",[null,[1,433],[1,441]]]]],[],[]],"action","finish","classNames","panel-body instruction-line"],0,null,["loc",[null,[1,397],[1,1011]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 311
          }
        },
        "moduleName": "uiux/templates/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","application-index");
        dom.setAttribute(el1,"class","full-screen-modal");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-6 col-md-8 col-sm-10 col-xs-12 col-lg-offset-3 col-md-offset-2 col-md-offset-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [0, 0, 0, 0, 0, 0]),0,0);
        return morphs;
      },
      statements: [
        ["inline","partial",["sessions/login"],[],["loc",[null,[1,245],[1,275]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/inventories/-inventory-grid', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "uiux/templates/inventories/-inventory-grid.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-cubes");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "uiux/templates/inventories/-inventory-grid.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-circle-thin");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "uiux/templates/inventories/-inventory-grid.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","warehouse.hasStuff",["loc",[null,[3,10],[3,28]]]]],[],0,1,["loc",[null,[3,4],[7,11]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "uiux/templates/inventories/-inventory-grid.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-times");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/inventories/-inventory-grid.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","warehouse.id",["loc",[null,[2,8],[2,20]]]]],[],0,1,["loc",[null,[2,2],[10,9]]]]
        ],
        locals: ["warehouse"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "uiux/templates/inventories/-inventory-grid.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","table-grid-2d",[],["classNames","table table-hover table-bordered inventory-table-container","colNames",["subexpr","@mut",[["get","colNames",["loc",[null,[1,98],[1,106]]]]],[],[]],"rowNames",["subexpr","@mut",[["get","rowNames",["loc",[null,[1,116],[1,124]]]]],[],[]],"data",["subexpr","@mut",[["get","warehouses",["loc",[null,[1,130],[1,140]]]]],[],[]],"originLabel","#","action","touchCell"],0,null,["loc",[null,[1,0],[11,18]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 281
          }
        },
        "moduleName": "uiux/templates/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","application-index");
        dom.setAttribute(el1,"class","full-screen-modal");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-10 col-md-12 col-sm-12 col-xs-12 col-lg-offset-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [0, 0, 0, 0, 0, 0]),0,0);
        return morphs;
      },
      statements: [
        ["inline","partial",["sessions/setup"],[],["loc",[null,[1,215],[1,245]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 77
            },
            "end": {
              "line": 1,
              "column": 168
            }
          },
          "moduleName": "uiux/templates/logistics.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize bold");
          var el2 = dom.createTextNode("logistics");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 489
            },
            "end": {
              "line": 1,
              "column": 628
            }
          },
          "moduleName": "uiux/templates/logistics.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-calendar-o");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("appointments");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 640
            },
            "end": {
              "line": 1,
              "column": 770
            }
          },
          "moduleName": "uiux/templates/logistics.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-cubes");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("inventory");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1061
          }
        },
        "moduleName": "uiux/templates/logistics.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","main-nav");
        var el2 = dom.createElement("nav");
        dom.setAttribute(el2,"class","navbar navbar-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","nav navbar-nav navbar-right");
        var el5 = dom.createElement("li");
        var el6 = dom.createElement("a");
        dom.setAttribute(el6,"class","pointer");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7,"class","fa fa-sign-out");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","logistics");
        dom.setAttribute(el1,"class","non-manager-application");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-xs-12");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","btn-group btn-group-lg");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-xs-12");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("footer");
        dom.setAttribute(el2,"id","non-manager-footer");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-xs-12");
        var el6 = dom.createElement("h4");
        dom.setAttribute(el6,"class","footer-title");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa");
        var el8 = dom.createTextNode("logistics");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var element1 = dom.childAt(element0, [1, 0, 0]);
        var element2 = dom.childAt(fragment, [1, 0]);
        var element3 = dom.childAt(element2, [0, 0, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(element3,0,0);
        morphs[3] = dom.createMorphAt(element3,1,1);
        morphs[4] = dom.createUnsafeMorphAt(dom.childAt(element2, [1, 0]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics"],["class","navbar-brand"],0,null,["loc",[null,[1,77],[1,180]]]],
        ["element","action",["exitRole"],["on","click"],["loc",[null,[1,227],[1,259]]]],
        ["block","link-to",["logistics.appointments"],["class","btn btn-default"],1,null,["loc",[null,[1,489],[1,640]]]],
        ["block","link-to",["logistics.inventories"],["class","btn btn-default"],2,null,["loc",[null,[1,640],[1,782]]]],
        ["content","outlet",["loc",[null,[1,840],[1,852]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/logistics/appointment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 135
          }
        },
        "moduleName": "uiux/templates/logistics/appointment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","section-title capitalize");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("appointment # ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createUnsafeMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","model.permalink",["loc",[null,[1,92],[1,111]]]],
        ["content","outlet",["loc",[null,[1,123],[1,135]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/appointment/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 40
            },
            "end": {
              "line": 1,
              "column": 191
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("exit edit");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 353
              },
              "end": {
                "line": 1,
                "column": 618
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/edit.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("Pickup appointments will require us to specify what is to be picked up.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 696
              },
              "end": {
                "line": 1,
                "column": 897
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/edit.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("Write a short description for what materials will be transacted in this appointment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1086
              },
              "end": {
                "line": 1,
                "column": 1234
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/edit.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 283
            },
            "end": {
              "line": 1,
              "column": 1259
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","actions");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,4,4,contextualElement);
          morphs[5] = dom.createMorphAt(dom.childAt(fragment, [5]),0,0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","em-form-input",[],["label","appointment type","name","appointmentType","type","select","content",["subexpr","@mut",[["get","appointmentChoices",["loc",[null,[1,440],[1,458]]]]],[],[]],"optionValuePath","value","optionLabelPath","presentation"],0,null,["loc",[null,[1,353],[1,636]]]],
          ["inline","em-form-input",[],["name","company","label","company","type","text"],["loc",[null,[1,636],[1,696]]]],
          ["block","em-form-input",[],["name","materialDescription","label","material description","type","text"],1,null,["loc",[null,[1,696],[1,915]]]],
          ["inline","em-form-input",[],["name","externalReference","label","external reference number","type","string"],["loc",[null,[1,915],[1,1005]]]],
          ["inline","em-form-input",[],["name","notes","label","notes","type","textarea"],["loc",[null,[1,1005],[1,1065]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,1110],[1,1115]]]]],[],[]],"type","submit","classNames","btn btn-success btn-lg btn-hover"],2,null,["loc",[null,[1,1086],[1,1253]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1287
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-6 col-lg-4");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.appointment.index",["get","model.id",["loc",[null,[1,81],[1,89]]]]],["class","btn btn-default"],0,null,["loc",[null,[1,40],[1,203]]]],
        ["block","em-form-for",[],["mistakes",["subexpr","@mut",[["get","appointmentError",["loc",[null,[1,307],[1,323]]]]],[],[]],"action","update","model",["subexpr","@mut",[["get","model",["loc",[null,[1,346],[1,351]]]]],[],[]]],1,null,["loc",[null,[1,283],[1,1275]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/logistics/appointment/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 40
            },
            "end": {
              "line": 1,
              "column": 193
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("back to appointment index");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 941
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-6 col-lg-4");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("actions");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-6 col-lg-4");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("stats");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-body");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-4");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("related stuff");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
        morphs[1] = dom.createUnsafeMorphAt(dom.childAt(element0, [0, 0]),1,1);
        morphs[2] = dom.createUnsafeMorphAt(dom.childAt(element0, [1, 0, 1]),0,0);
        morphs[3] = dom.createUnsafeMorphAt(dom.childAt(element0, [2, 0]),1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.appointments"],["class","btn btn-default"],0,null,["loc",[null,[1,40],[1,205]]]],
        ["inline","partial",["logistics/appointment/index/choices"],[],["loc",[null,[1,393],[1,444]]]],
        ["inline","partial",["logistics/appointment/index/stats"],[],["loc",[null,[1,637],[1,686]]]],
        ["inline","partial",["logistics/appointment/index/relations"],[],["loc",[null,[1,870],[1,923]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/logistics/appointment/index/-choices', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 50
              },
              "end": {
                "line": 1,
                "column": 199
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-link");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("relate appointment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 24
            },
            "end": {
              "line": 1,
              "column": 211
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.appointment.relate",["get","model.id",["loc",[null,[1,92],[1,100]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,50],[1,211]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 245
              },
              "end": {
                "line": 1,
                "column": 401
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-calendar");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("reschedule appointment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 218
            },
            "end": {
              "line": 1,
              "column": 413
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.appointment.reschedule",["get","model.id",["loc",[null,[1,291],[1,299]]]]],["class","list-group-item"],0,null,["loc",[null,[1,245],[1,413]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 420
            },
            "end": {
              "line": 1,
              "column": 560
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-edit");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("edit appointment");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 599
              },
              "end": {
                "line": 1,
                "column": 790
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-trash");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("cancel appointment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 572
            },
            "end": {
              "line": 1,
              "column": 809
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,623],[1,628]]]]],[],[]],"tagName","div","classNames","list-group-item list-group-item-warning pointer","action","cancel"],0,null,["loc",[null,[1,599],[1,809]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 847
              },
              "end": {
                "line": 1,
                "column": 1042
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-trash");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("uncancel appointment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 816
            },
            "end": {
              "line": 1,
              "column": 1061
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,871],[1,876]]]]],[],[]],"tagName","div","classNames","list-group-item list-group-item-warning pointer","action","uncancel"],0,null,["loc",[null,[1,847],[1,1061]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child5 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1097
              },
              "end": {
                "line": 1,
                "column": 1293
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-trash");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("resolve problem");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1068
            },
            "end": {
              "line": 1,
              "column": 1312
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,1121],[1,1126]]]]],[],[]],"tagName","div","classNames","list-group-item list-group-item-success pointer","action","resolveProblem"],0,null,["loc",[null,[1,1097],[1,1312]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1689
                },
                "end": {
                  "line": 1,
                  "column": 1841
                }
              },
              "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-check");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","fa");
              var el2 = dom.createTextNode("submit");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1341
              },
              "end": {
                "line": 1,
                "column": 2006
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","panel panel-danger");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","panel-heading pointer");
            var el3 = dom.createElement("i");
            dom.setAttribute(el3,"class","fa fa-warning");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","fa capitalize");
            var el4 = dom.createTextNode("report problem");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","panel-body");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","list-group");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","list-group-item pointer");
            var el4 = dom.createElement("i");
            dom.setAttribute(el4,"class","fa fa-times");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createTextNode("cancel");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var element2 = dom.childAt(element1, [0]);
            var element3 = dom.childAt(element1, [2]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
            morphs[2] = dom.createMorphAt(element3,0,0);
            morphs[3] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [
            ["element","action",["unproblem"],["on","click"],["loc",[null,[1,1417],[1,1450]]]],
            ["inline","em-form-input",[],["name","notes","type","text","labelText","problem message"],["loc",[null,[1,1589],[1,1659]]]],
            ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,1713],[1,1718]]]]],[],[]],"classNames","list-group-item btn-block align-left","type","submit"],0,null,["loc",[null,[1,1689],[1,1860]]]],
            ["element","action",["unproblem"],["on","click"],["loc",[null,[1,1865],[1,1898]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1325
            },
            "end": {
              "line": 1,
              "column": 2022
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","em-form-for",[],["action","submitProblem"],0,null,["loc",[null,[1,1341],[1,2022]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2022
            },
            "end": {
              "line": 1,
              "column": 2236
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","list-group-item list-group-item-danger pointer");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","fa fa-warning");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","fa capitalize");
          var el4 = dom.createTextNode("report problem");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["element","action",["problem"],["on","click"],["loc",[null,[1,2059],[1,2090]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2243
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/index/-choices.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element5,0,0);
        morphs[1] = dom.createMorphAt(element5,1,1);
        morphs[2] = dom.createMorphAt(element5,2,2);
        morphs[3] = dom.createMorphAt(element5,3,3);
        morphs[4] = dom.createMorphAt(element5,4,4);
        morphs[5] = dom.createMorphAt(element5,5,5);
        morphs[6] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.isRelateable",["loc",[null,[1,30],[1,48]]]]],[],0,null,["loc",[null,[1,24],[1,218]]]],
        ["block","if",[["get","model.canReschedule",["loc",[null,[1,224],[1,243]]]]],[],1,null,["loc",[null,[1,218],[1,420]]]],
        ["block","link-to",["logistics.appointment.edit",["get","model.id",["loc",[null,[1,460],[1,468]]]]],["class","list-group-item"],2,null,["loc",[null,[1,420],[1,572]]]],
        ["block","if",[["get","model.isCancellable",["loc",[null,[1,578],[1,597]]]]],[],3,null,["loc",[null,[1,572],[1,816]]]],
        ["block","if",[["get","model.statusIsCancelled",["loc",[null,[1,822],[1,845]]]]],[],4,null,["loc",[null,[1,816],[1,1068]]]],
        ["block","if",[["get","model.statusIsProblem",["loc",[null,[1,1074],[1,1095]]]]],[],5,null,["loc",[null,[1,1068],[1,1319]]]],
        ["block","if",[["get","showprob",["loc",[null,[1,1331],[1,1339]]]]],[],6,7,["loc",[null,[1,1325],[1,2243]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('uiux/templates/logistics/appointment/index/-relations', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 141
              },
              "end": {
                "line": 1,
                "column": 297
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa bold");
            var el2 = dom.createTextNode("# ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("drop off appointment ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
            return morphs;
          },
          statements: [
            ["content","id",["loc",[null,[1,233],[1,239]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 109
            },
            "end": {
              "line": 1,
              "column": 309
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.appointment",["get","id",["loc",[null,[1,176],[1,178]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,141],[1,309]]]]
        ],
        locals: ["id"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 309
            },
            "end": {
              "line": 1,
              "column": 409
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item disabled");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("no drop-off appointments");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 449
              },
              "end": {
                "line": 1,
                "column": 603
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa bold");
            var el2 = dom.createTextNode("# ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("pick up appointment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
            return morphs;
          },
          statements: [
            ["content","id",["loc",[null,[1,541],[1,547]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 418
            },
            "end": {
              "line": 1,
              "column": 615
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.appointment",["get","id",["loc",[null,[1,484],[1,486]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,449],[1,615]]]]
        ],
        locals: ["id"],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 615
            },
            "end": {
              "line": 1,
              "column": 713
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item disabled");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("No pickup appointments");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 866
              },
              "end": {
                "line": 1,
                "column": 1033
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa bold");
            var el2 = dom.createTextNode("# ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("incoming batch");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
            return morphs;
          },
          statements: [
            ["content","batch.id",["loc",[null,[1,970],[1,982]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 832
            },
            "end": {
              "line": 1,
              "column": 1045
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.inventories.batch",["get","batch.id",["loc",[null,[1,907],[1,915]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,866],[1,1045]]]]
        ],
        locals: ["batch"],
        templates: [child0]
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1045
            },
            "end": {
              "line": 1,
              "column": 1140
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item disabled");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("No incoming batches");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1188
              },
              "end": {
                "line": 1,
                "column": 1343
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa bold");
            var el2 = dom.createTextNode("# ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("outgoing batch");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
            return morphs;
          },
          statements: [
            ["content","id",["loc",[null,[1,1286],[1,1292]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1149
            },
            "end": {
              "line": 1,
              "column": 1355
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.inventories.batch",["get","id",["loc",[null,[1,1229],[1,1231]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,1188],[1,1355]]]]
        ],
        locals: ["id"],
        templates: [child0]
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1355
            },
            "end": {
              "line": 1,
              "column": 1450
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item disabled");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("No outgoing batches");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1465
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/index/-relations.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel-body");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa capitalize");
        var el3 = dom.createTextNode("related appointments");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel-body");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa capitalize");
        var el3 = dom.createTextNode("related batches");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(fragment, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element1,0,0);
        morphs[3] = dom.createMorphAt(element1,1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model.dropoffs",["loc",[null,[1,117],[1,131]]]]],[],0,1,["loc",[null,[1,109],[1,418]]]],
        ["block","each",[["get","model.pickups",["loc",[null,[1,426],[1,439]]]]],[],2,3,["loc",[null,[1,418],[1,722]]]],
        ["block","each",[["get","model.batches",["loc",[null,[1,840],[1,853]]]]],[],4,5,["loc",[null,[1,832],[1,1149]]]],
        ["block","each",[["get","model.outgoingBatches",["loc",[null,[1,1157],[1,1178]]]]],[],6,7,["loc",[null,[1,1149],[1,1459]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('uiux/templates/logistics/appointment/index/-stats', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 106
            },
            "end": {
              "line": 1,
              "column": 270
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-stats.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("dt");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("picked up");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("dd");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" batch(es)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
          return morphs;
        },
        statements: [
          ["inline","num",[["get","model.outgoingBatches.length",["loc",[null,[1,218],[1,246]]]]],[],["loc",[null,[1,212],[1,248]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 281
            },
            "end": {
              "line": 1,
              "column": 438
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/index/-stats.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("dt");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("dropped off");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("dd");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" batch(es)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
          return morphs;
        },
        statements: [
          ["inline","num",[["get","model.batches.length",["loc",[null,[1,394],[1,414]]]]],[],["loc",[null,[1,388],[1,416]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1281
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/index/-stats.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("dl");
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("appointment type");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("data id");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("appointment number");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("material description");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("company");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("notes");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("status");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("createdAt");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("updatedAt");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        dom.setAttribute(el2,"class","capitalize");
        var el3 = dom.createTextNode("expectedAt");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 0]),0,0);
        morphs[1] = dom.createMorphAt(element0,2,2);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [5, 0]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [7, 0]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [9, 0]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element0, [11, 0]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(element0, [13, 0]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(element0, [15, 0]),0,0);
        morphs[9] = dom.createMorphAt(dom.childAt(element0, [17, 0]),0,0);
        morphs[10] = dom.createMorphAt(dom.childAt(element0, [19, 0]),0,0);
        morphs[11] = dom.createMorphAt(dom.childAt(element0, [21, 0]),0,0);
        return morphs;
      },
      statements: [
        ["content","model.appointmentType",["loc",[null,[1,69],[1,94]]]],
        ["block","unless",[["subexpr","eq",[["get","model.appointmentType",["loc",[null,[1,120],[1,141]]]],"dropoff"],[],["loc",[null,[1,116],[1,152]]]]],[],0,null,["loc",[null,[1,106],[1,281]]]],
        ["block","unless",[["subexpr","eq",[["get","model.appointmentType",["loc",[null,[1,295],[1,316]]]],"pickup"],[],["loc",[null,[1,291],[1,326]]]]],[],1,null,["loc",[null,[1,281],[1,449]]]],
        ["content","model.id",["loc",[null,[1,505],[1,517]]]],
        ["content","model.permalink",["loc",[null,[1,596],[1,615]]]],
        ["content","model.materialDescription",["loc",[null,[1,696],[1,725]]]],
        ["content","model.company",["loc",[null,[1,793],[1,810]]]],
        ["content","model.notes",["loc",[null,[1,876],[1,891]]]],
        ["content","model.status",["loc",[null,[1,958],[1,974]]]],
        ["inline","moment",[["get","model.createdAt",["loc",[null,[1,1053],[1,1068]]]]],[],["loc",[null,[1,1044],[1,1070]]]],
        ["inline","moment",[["get","model.updatedAt",["loc",[null,[1,1149],[1,1164]]]]],[],["loc",[null,[1,1140],[1,1166]]]],
        ["inline","moment",[["get","model.expectedAt",["loc",[null,[1,1246],[1,1262]]]]],[],["loc",[null,[1,1237],[1,1264]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/logistics/appointment/relate', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 40
            },
            "end": {
              "line": 1,
              "column": 194
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("exit relate");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 574
            },
            "end": {
              "line": 1,
              "column": 805
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Please specify what drop-off appointment this pick-up appointment is suppose to pick up");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","partial",["logistics/appointment/relate/relationships"],[],["loc",[null,[1,747],[1,805]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 805
            },
            "end": {
              "line": 1,
              "column": 905
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","alert alert-warning");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Sorry, nothing was found!      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1169
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/relate.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("search appointments");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","parantheses");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" appointment(s) selected");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-body");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-footer");
        var el5 = dom.createElement("small");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" result(s)");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","annoyed-flash");
        dom.setAttribute(el1,"class","hidden");
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2,"class","alert alert-warning");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize bold");
        var el4 = dom.createTextNode("I'm busy!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [0, 0]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [0, 1]),0,0);
        morphs[2] = dom.createUnsafeMorphAt(dom.childAt(element1, [1]),0,0);
        morphs[3] = dom.createMorphAt(element1,2,2);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [3, 0]),0,0);
        morphs[5] = dom.createUnsafeMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.appointment.index",["get","pickup.id",["loc",[null,[1,81],[1,90]]]]],["class","btn btn-default"],0,null,["loc",[null,[1,40],[1,206]]]],
        ["inline","num",[["get","pickup.dropoffs.length",["loc",[null,[1,432],[1,454]]]]],[],["loc",[null,[1,426],[1,456]]]],
        ["inline","partial",["logistics/appointment/relate/search"],[],["loc",[null,[1,517],[1,568]]]],
        ["block","if",[["get","appointmentRelationships",["loc",[null,[1,580],[1,604]]]]],[],1,2,["loc",[null,[1,574],[1,912]]]],
        ["inline","num",[["get","appointmentRelationships.length",["loc",[null,[1,951],[1,982]]]]],[],["loc",[null,[1,945],[1,984]]]],
        ["content","outlet",["loc",[null,[1,1020],[1,1032]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/logistics/appointment/relate/-relationships', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 277
                },
                "end": {
                  "line": 1,
                  "column": 320
                }
              },
              "moduleName": "uiux/templates/logistics/appointment/relate/-relationships.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-check");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 320
                },
                "end": {
                  "line": 1,
                  "column": 358
                }
              },
              "moduleName": "uiux/templates/logistics/appointment/relate/-relationships.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-square-o");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 465
                },
                "end": {
                  "line": 1,
                  "column": 598
                }
              },
              "moduleName": "uiux/templates/logistics/appointment/relate/-relationships.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("li");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","fa bold colon");
              var el3 = dom.createTextNode("ref");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","fa");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","dropoff.externalReference",["loc",[null,[1,557],[1,586]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 628
                },
                "end": {
                  "line": 1,
                  "column": 716
                }
              },
              "moduleName": "uiux/templates/logistics/appointment/relate/-relationships.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("small");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
              return morphs;
            },
            statements: [
              ["inline","ago",[["get","dropoff.expectedAt",["loc",[null,[1,688],[1,706]]]]],[],["loc",[null,[1,682],[1,708]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 106
              },
              "end": {
                "line": 1,
                "column": 738
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/relate/-relationships.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1,"class","list-inline");
            var el2 = dom.createElement("li");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","fa capitalize bold");
            var el4 = dom.createTextNode("#");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","fa");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2,"class","pull-right");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
            morphs[2] = dom.createMorphAt(element0,2,2);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isLoaded",["loc",[null,[1,283],[1,291]]]]],[],0,1,["loc",[null,[1,277],[1,365]]]],
            ["content","dropoff.permalink",["loc",[null,[1,432],[1,453]]]],
            ["block","if",[["get","dropoff.externalReference",["loc",[null,[1,471],[1,496]]]]],[],2,null,["loc",[null,[1,465],[1,605]]]],
            ["block","link-to",["logistics.appointment",["get","dropoff.id",["loc",[null,[1,663],[1,673]]]]],[],3,null,["loc",[null,[1,628],[1,728]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 750
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/-relationships.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.appointment.relate.appointment",["get","pickup.id",["loc",[null,[1,160],[1,169]]]],["get","dropoff.id",["loc",[null,[1,170],[1,180]]]]],["classNames","list-group-item","activeClass","list-group-item-success"],0,null,["loc",[null,[1,106],[1,750]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 765
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/relate/-relationships.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ember-list",[],["items",["subexpr","@mut",[["get","appointmentRelationships",["loc",[null,[1,20],[1,44]]]]],[],[]],"height",300,"rowHeight",50,"classNames","ember-list-panel-group"],0,null,["loc",[null,[1,0],[1,765]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/logistics/appointment/relate/-search', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/relate/-search.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","form-inline");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-group");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3,"for","search");
        dom.setAttribute(el3,"class","sr-only");
        var el4 = dom.createTextNode("Search");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","input-group");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","input-group-addon");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-search");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","input-group-btn");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"class","btn btn-default");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createTextNode("Go");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 3]),3,3);
        return morphs;
      },
      statements: [
        ["element","action",["search"],["on","submit"],["loc",[null,[1,26],[1,57]]]],
        ["inline","input",[],["type","text","classNames","form-control","placeholder","some company","value",["subexpr","@mut",[["get","search",["loc",[null,[8,85],[8,91]]]]],[],[]]],["loc",[null,[8,6],[8,93]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/appointment/relate/appointment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 382
            },
            "end": {
              "line": 1,
              "column": 674
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item-heading");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-check");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa capitalize bold");
          var el3 = dom.createTextNode("deselect all");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item-text");
          var el2 = dom.createElement("small");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("deselects this appointment and every batch from this appointment");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 674
            },
            "end": {
              "line": 1,
              "column": 933
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item-heading");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-square-o");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa capitalize bold");
          var el3 = dom.createTextNode("select all");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item-text");
          var el2 = dom.createElement("small");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("selects this appointment and every batch from this appointment");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 976
            },
            "end": {
              "line": 1,
              "column": 1102
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Please specify the batches (aka bales) you want from this appointment");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1102
            },
            "end": {
              "line": 1,
              "column": 1291
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","alert alert-info");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("This appointment has no record of any dropped off batches, this could be because this appointment is schedule for the future.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1328
            },
            "end": {
              "line": 1,
              "column": 1443
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","partial",["logistics/appointment/relate/appointment/relationship"],[],["loc",[null,[1,1374],[1,1443]]]]
        ],
        locals: ["relationship"],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1443
            },
            "end": {
              "line": 1,
              "column": 1544
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item disabled");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Sorry, nothing was found!");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1661
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/relate/appointment.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("filter batches");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","parantheses");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" batch(es) selected");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","list-group-item pointer");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-body");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-footer");
        var el4 = dom.createElement("small");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" result(s)");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0]);
        var element1 = dom.childAt(element0, [1, 0]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(element1,0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [4, 0]),0,0);
        return morphs;
      },
      statements: [
        ["inline","num",[["get","pickup.outgoingBatches.length",["loc",[null,[1,192],[1,221]]]]],[],["loc",[null,[1,186],[1,223]]]],
        ["element","action",["toggleAppointment",["get","appointmentRelationship",["loc",[null,[1,313],[1,336]]]]],["on","click"],["loc",[null,[1,284],[1,349]]]],
        ["block","if",[["get","appointmentRelationship.isLoaded",["loc",[null,[1,388],[1,420]]]]],[],0,1,["loc",[null,[1,382],[1,940]]]],
        ["block","if",[["get","batchRelationships",["loc",[null,[1,982],[1,1000]]]]],[],2,3,["loc",[null,[1,976],[1,1298]]]],
        ["block","each",[["get","batchRelationships",["loc",[null,[1,1336],[1,1354]]]]],[],4,5,["loc",[null,[1,1328],[1,1553]]]],
        ["inline","num",[["get","batchRelationships.length",["loc",[null,[1,1598],[1,1623]]]]],[],["loc",[null,[1,1592],[1,1625]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('uiux/templates/logistics/appointment/relate/appointment/-relationship', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 123
            },
            "end": {
              "line": 1,
              "column": 179
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment/-relationship.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 179
            },
            "end": {
              "line": 1,
              "column": 217
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment/-relationship.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-square-o");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 644
            },
            "end": {
              "line": 1,
              "column": 768
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/relate/appointment/-relationship.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          return morphs;
        },
        statements: [
          ["inline","ago",[["get","relationship.batch.createdAt",["loc",[null,[1,731],[1,759]]]]],[],["loc",[null,[1,725],[1,761]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 802
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/relate/appointment/-relationship.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group-item pointer");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item-heading");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa bold");
        var el4 = dom.createTextNode("From appt no.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item-text");
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","list-inline");
        var el4 = dom.createElement("li");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa colon bold capitalize");
        var el6 = dom.createTextNode("at");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa colon bold capitalize");
        var el6 = dom.createTextNode("description");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        dom.setAttribute(el4,"class","pull-right");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [1, 0]);
        var morphs = new Array(6);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element1,0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [2]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [1, 1]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [2]),0,0);
        return morphs;
      },
      statements: [
        ["element","action",["toggleBatch",["get","relationship",["loc",[null,[1,28],[1,40]]]]],["on","click"],["loc",[null,[1,5],[1,53]]]],
        ["block","if",[["get","relationship.isLoaded",["loc",[null,[1,129],[1,150]]]]],[],0,1,["loc",[null,[1,123],[1,224]]]],
        ["content","dropoff.permalink",["loc",[null,[1,283],[1,304]]]],
        ["content","relationship.batch.warehouse.nameOrId",["loc",[null,[1,444],[1,485]]]],
        ["content","relationship.batch.description",["loc",[null,[1,575],[1,609]]]],
        ["block","link-to",["logistics.inventories.batch",["get","relationship.batch.id",["loc",[null,[1,685],[1,706]]]]],[],2,null,["loc",[null,[1,644],[1,780]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/logistics/appointment/relate/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 494
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/relate/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("filter batches");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","parantheses");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" batch(es) selected");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-body");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa");
        var el5 = dom.createTextNode("Once you select an appointment, the batches dropped off by that appointment will show up here");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-footer");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa");
        var el5 = dom.createTextNode("You haven't searched yet");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0, 0, 1]),0,0);
        return morphs;
      },
      statements: [
        ["inline","num",[["get","pickup.outgoingBatches.length",["loc",[null,[1,192],[1,221]]]]],[],["loc",[null,[1,186],[1,223]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/appointment/relate/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 632
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/relate/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-warning");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading");
        var el4 = dom.createElement("i");
        dom.setAttribute(el4,"class","fa fa-cog fa-spin");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("loading batches");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","parantheses");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" batch(es) selected");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-body");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","progress");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"role","progressbar");
        dom.setAttribute(el5,"aria-valuenow","100");
        dom.setAttribute(el5,"aria-valuemin","0");
        dom.setAttribute(el5,"aria-valuemax","100");
        dom.setAttribute(el5,"style","width: 100%");
        dom.setAttribute(el5,"class","progress-bar progress-bar-striped active");
        var el6 = dom.createElement("span");
        var el7 = dom.createTextNode("now loading");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-footer");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa");
        var el5 = dom.createTextNode("The server is busy loading your data");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0, 0, 2]),0,0);
        return morphs;
      },
      statements: [
        ["inline","num",[["get","pickup.outgoingBatches.length",["loc",[null,[1,226],[1,255]]]]],[],["loc",[null,[1,220],[1,257]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/appointment/reschedule', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 40
            },
            "end": {
              "line": 1,
              "column": 197
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/reschedule.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode("exit reschedule");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 417
              },
              "end": {
                "line": 1,
                "column": 565
              }
            },
            "moduleName": "uiux/templates/logistics/appointment/reschedule.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 289
            },
            "end": {
              "line": 1,
              "column": 590
            }
          },
          "moduleName": "uiux/templates/logistics/appointment/reschedule.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","actions");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["inline","em-form-input",[],["name","expectedAt","type","date","labelText","ETA"],["loc",[null,[1,333],[1,396]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,441],[1,446]]]]],[],[]],"type","submit","classNames","btn btn-success btn-lg btn-hover"],0,null,["loc",[null,[1,417],[1,584]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 618
          }
        },
        "moduleName": "uiux/templates/logistics/appointment/reschedule.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-6 col-lg-4");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.appointment.index",["get","model.id",["loc",[null,[1,81],[1,89]]]]],["class","btn btn-default"],0,null,["loc",[null,[1,40],[1,209]]]],
        ["block","em-form-for",[],["action","update","model",["subexpr","@mut",[["get","model",["loc",[null,[1,326],[1,331]]]]],[],[]]],1,null,["loc",[null,[1,289],[1,606]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/logistics/appointments', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "uiux/templates/logistics/appointments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","list-group-item-heading");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-plus");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","capitalize");
          var el3 = dom.createTextNode("new appointment");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/logistics/appointments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          dom.setAttribute(el1,"class","alert alert-success");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-clock-o");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
          return morphs;
        },
        statements: [
          ["inline","moment",[["get","clock.rightNow",["loc",[null,[12,13],[12,27]]]]],[],["loc",[null,[12,4],[12,29]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "uiux/templates/logistics/appointments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","alert alert-warning");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-warning");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(": Currently outside working hours. Working hours are between 6:00am to 8:00pm\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
          return morphs;
        },
        statements: [
          ["inline","moment",[["get","clock.rightNow",["loc",[null,[17,13],[17,27]]]]],[],["loc",[null,[17,4],[17,29]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "uiux/templates/logistics/appointments.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.appointments.new"],["classNames","list-group-item list-group-item-success"],0,null,["loc",[null,[2,2],[7,14]]]],
        ["block","if",[["get","withinWorkingHours",["loc",[null,[9,6],[9,24]]]]],[],1,2,["loc",[null,[9,0],[19,7]]]],
        ["content","outlet",["loc",[null,[20,0],[20,10]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/logistics/appointments/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 201
            },
            "end": {
              "line": 1,
              "column": 321
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("all");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 333
            },
            "end": {
              "line": 1,
              "column": 466
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("relevant today");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 478
            },
            "end": {
              "line": 1,
              "column": 616
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("planned for future");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 628
            },
            "end": {
              "line": 1,
              "column": 761
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("has problems");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 773
            },
            "end": {
              "line": 1,
              "column": 905
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("fulfilled");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1096
                },
                "end": {
                  "line": 1,
                  "column": 1161
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-calendar");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1168
                },
                "end": {
                  "line": 1,
                  "column": 1232
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-warning");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1239
                },
                "end": {
                  "line": 1,
                  "column": 1312
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-spinner fa-spin");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1319
                },
                "end": {
                  "line": 1,
                  "column": 1383
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-check");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child4 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1390
                },
                "end": {
                  "line": 1,
                  "column": 1454
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-times");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child5 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1461
                },
                "end": {
                  "line": 1,
                  "column": 1537
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-exclamation-circle");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child6 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1544
                },
                "end": {
                  "line": 1,
                  "column": 1616
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-question-circle");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 985
              },
              "end": {
                "line": 1,
                "column": 2189
              }
            },
            "moduleName": "uiux/templates/logistics/appointments/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","list-group-item-heading");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1,"class","list-group-item-text");
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2,"class","list-inline");
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa capitalize bold colon");
            var el5 = dom.createTextNode("company");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa capitalize bold colon");
            var el5 = dom.createTextNode("description");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa capitalize bold colon");
            var el5 = dom.createTextNode("ETA");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa capitalize bold colon");
            var el5 = dom.createTextNode("status");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(fragment, [1, 0]);
            var morphs = new Array(12);
            morphs[0] = dom.createMorphAt(element0,0,0);
            morphs[1] = dom.createMorphAt(element0,1,1);
            morphs[2] = dom.createMorphAt(element0,2,2);
            morphs[3] = dom.createMorphAt(element0,3,3);
            morphs[4] = dom.createMorphAt(element0,4,4);
            morphs[5] = dom.createMorphAt(element0,5,5);
            morphs[6] = dom.createMorphAt(element0,6,6);
            morphs[7] = dom.createMorphAt(dom.childAt(element0, [7]),1,1);
            morphs[8] = dom.createMorphAt(dom.childAt(element1, [0, 1]),0,0);
            morphs[9] = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
            morphs[10] = dom.createMorphAt(dom.childAt(element1, [2, 1]),0,0);
            morphs[11] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
            return morphs;
          },
          statements: [
            ["block","if",[["get","appointment.statusIsPlanned",["loc",[null,[1,1102],[1,1129]]]]],[],0,null,["loc",[null,[1,1096],[1,1168]]]],
            ["block","if",[["get","appointment.statusIsProblem",["loc",[null,[1,1174],[1,1201]]]]],[],1,null,["loc",[null,[1,1168],[1,1239]]]],
            ["block","if",[["get","appointment.statusIsExpected",["loc",[null,[1,1245],[1,1273]]]]],[],2,null,["loc",[null,[1,1239],[1,1319]]]],
            ["block","if",[["get","appointment.statusIsFulfilled",["loc",[null,[1,1325],[1,1354]]]]],[],3,null,["loc",[null,[1,1319],[1,1390]]]],
            ["block","if",[["get","appointment.statusIsCancelled",["loc",[null,[1,1396],[1,1425]]]]],[],4,null,["loc",[null,[1,1390],[1,1461]]]],
            ["block","if",[["get","appointment.statusIsVanished",["loc",[null,[1,1467],[1,1495]]]]],[],5,null,["loc",[null,[1,1461],[1,1544]]]],
            ["block","if",[["get","appointment.statusIsUnknown",["loc",[null,[1,1550],[1,1577]]]]],[],6,null,["loc",[null,[1,1544],[1,1623]]]],
            ["content","appointment.permalink",["loc",[null,[1,1635],[1,1660]]]],
            ["content","appointment.company",["loc",[null,[1,1802],[1,1825]]]],
            ["content","appointment.materialDescription",["loc",[null,[1,1915],[1,1950]]]],
            ["content","appointment.expectedAtAgo",["loc",[null,[1,2032],[1,2061]]]],
            ["content","appointment.status",["loc",[null,[1,2146],[1,2168]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 953
            },
            "end": {
              "line": 1,
              "column": 2201
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.appointment",["get","appointment.id",["loc",[null,[1,1020],[1,1034]]]]],["class","list-group-item"],0,null,["loc",[null,[1,985],[1,2201]]]]
        ],
        locals: ["appointment"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2308
          }
        },
        "moduleName": "uiux/templates/logistics/appointments/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading");
        var el3 = dom.createElement("h3");
        dom.setAttribute(el3,"class","panel-title");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("appointment search tools");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-footer");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" result(s)");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1, 0]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element3,0,0);
        morphs[1] = dom.createMorphAt(element3,1,1);
        morphs[2] = dom.createMorphAt(element3,2,2);
        morphs[3] = dom.createMorphAt(element3,3,3);
        morphs[4] = dom.createMorphAt(element3,4,4);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [2]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element2, [3, 0]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.appointments",["subexpr","query-params",[],["macro","all"],["loc",[null,[1,237],[1,263]]]]],["classNames","btn btn-default"],0,null,["loc",[null,[1,201],[1,333]]]],
        ["block","link-to",["logistics.appointments",["subexpr","query-params",[],["macro","today"],["loc",[null,[1,369],[1,397]]]]],["classNames","btn btn-default"],1,null,["loc",[null,[1,333],[1,478]]]],
        ["block","link-to",["logistics.appointments",["subexpr","query-params",[],["macro","future"],["loc",[null,[1,514],[1,543]]]]],["classNames","btn btn-default"],2,null,["loc",[null,[1,478],[1,628]]]],
        ["block","link-to",["logistics.appointments",["subexpr","query-params",[],["macro","problem"],["loc",[null,[1,664],[1,694]]]]],["classNames","btn btn-default"],3,null,["loc",[null,[1,628],[1,773]]]],
        ["block","link-to",["logistics.appointments",["subexpr","query-params",[],["macro","fulfilled"],["loc",[null,[1,809],[1,841]]]]],["classNames","btn btn-default"],4,null,["loc",[null,[1,773],[1,917]]]],
        ["block","each",[["get","model",["loc",[null,[1,961],[1,966]]]]],[],5,null,["loc",[null,[1,953],[1,2210]]]],
        ["inline","num",[["get","model.length",["loc",[null,[1,2265],[1,2277]]]]],[],["loc",[null,[1,2259],[1,2279]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('uiux/templates/logistics/appointments/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 40
            },
            "end": {
              "line": 1,
              "column": 197
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize bold");
          var el2 = dom.createTextNode("back");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 557
              },
              "end": {
                "line": 1,
                "column": 822
              }
            },
            "moduleName": "uiux/templates/logistics/appointments/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("Pickup appointments will require us to specify what is to be picked up.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 900
              },
              "end": {
                "line": 1,
                "column": 1101
              }
            },
            "moduleName": "uiux/templates/logistics/appointments/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("Write a short description for what materials will be transacted in this appointment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1186
                },
                "end": {
                  "line": 1,
                  "column": 1371
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/new.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("h6");
              dom.setAttribute(el1,"class","alert alert-warning");
              var el2 = dom.createElement("i");
              dom.setAttribute(el2,"class","fa fa-warning");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","fa");
              var el3 = dom.createTextNode("are you sure you want to set an expected time outside work hours?");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1119
              },
              "end": {
                "line": 1,
                "column": 1382
              }
            },
            "moduleName": "uiux/templates/logistics/appointments/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","unless",[["get","withinWorkingHours",["loc",[null,[1,1196],[1,1214]]]]],[],0,null,["loc",[null,[1,1186],[1,1382]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1695
                },
                "end": {
                  "line": 1,
                  "column": 1766
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/new.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","capitalize bold");
              var el2 = dom.createTextNode("continue");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1766
                },
                "end": {
                  "line": 1,
                  "column": 1817
                }
              },
              "moduleName": "uiux/templates/logistics/appointments/new.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","capitalize bold");
              var el2 = dom.createTextNode("submit");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1571
              },
              "end": {
                "line": 1,
                "column": 1824
              }
            },
            "moduleName": "uiux/templates/logistics/appointments/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","pickupTypeSelected",["loc",[null,[1,1701],[1,1719]]]]],[],0,1,["loc",[null,[1,1695],[1,1824]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 481
            },
            "end": {
              "line": 1,
              "column": 1849
            }
          },
          "moduleName": "uiux/templates/logistics/appointments/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","actions");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,4,4,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[6] = dom.createMorphAt(dom.childAt(fragment, [6]),0,0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","em-form-input",[],["label","appointment type","name","appointmentType","type","select","content",["subexpr","@mut",[["get","appointmentChoices",["loc",[null,[1,644],[1,662]]]]],[],[]],"optionValuePath","value","optionLabelPath","presentation"],0,null,["loc",[null,[1,557],[1,840]]]],
          ["inline","em-form-input",[],["name","company","label","company","type","text"],["loc",[null,[1,840],[1,900]]]],
          ["block","em-form-input",[],["name","materialDescription","label","material description","type","text"],1,null,["loc",[null,[1,900],[1,1119]]]],
          ["block","em-form-input",[],["name","expectedAtISO","label","ETA","type","datetime"],2,null,["loc",[null,[1,1119],[1,1400]]]],
          ["inline","em-form-input",[],["name","externalReference","label","external reference number","type","string"],["loc",[null,[1,1400],[1,1490]]]],
          ["inline","em-form-input",[],["name","notes","label","notes","type","textarea"],["loc",[null,[1,1490],[1,1550]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","appointment",["loc",[null,[1,1595],[1,1606]]]]],[],[]],"classNames","btn btn-success btn-lg btn-hover","type","submit"],3,null,["loc",[null,[1,1571],[1,1843]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1877
          }
        },
        "moduleName": "uiux/templates/logistics/appointments/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","section-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa capitalize");
        var el3 = dom.createTextNode("new ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" appointment");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-9 col-lg-6 col-lg-push-6");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-9 col-lg-6 col-lg-pull-6");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 1]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.appointments.index"],["class","btn btn-default btn-lg btn-hover"],0,null,["loc",[null,[1,40],[1,209]]]],
        ["content","model.appointmentType",["loc",[null,[1,279],[1,304]]]],
        ["block","em-form-for",[],["mistakes",["subexpr","@mut",[["get","appointmentError",["loc",[null,[1,505],[1,521]]]]],[],[]],"action","create","model",["subexpr","@mut",[["get","appointment",["loc",[null,[1,544],[1,555]]]]],[],[]]],1,null,["loc",[null,[1,481],[1,1865]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/logistics/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 85
          }
        },
        "moduleName": "uiux/templates/logistics/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","section-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa capitalize");
        var el3 = dom.createTextNode("logistics dashboard");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/inventories', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 97
          }
        },
        "moduleName": "uiux/templates/logistics/inventories.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","section-title capitalize");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("Available Inventory");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,85],[1,97]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/inventories/-panel-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 25
            },
            "end": {
              "line": 1,
              "column": 423
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","list-inline");
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","bold capitalize fa colon");
          var el5 = dom.createTextNode("total storage sections");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","fa");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","bold fa capitalize colon");
          var el5 = dom.createTextNode("total loads in warehouse");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","fa");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0, 0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [0, 1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [1, 1]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.length",["loc",[null,[1,259],[1,275]]]],
          ["content","model.totalBatches",["loc",[null,[1,378],[1,400]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 803
                },
                "end": {
                  "line": 1,
                  "column": 876
                }
              },
              "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-video-camera");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: ["camera"],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 876
                },
                "end": {
                  "line": 1,
                  "column": 921
                }
              },
              "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","parantheses");
              var el2 = dom.createTextNode("none");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 943
                },
                "end": {
                  "line": 1,
                  "column": 1169
                }
              },
              "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode("The following ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","bold");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode(" appointment(s) have loads stored in this section");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["content","warehouse.batchesCollection.uniqAppointmentCount",["loc",[null,[1,1043],[1,1095]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.5",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1286
                  },
                  "end": {
                    "line": 1,
                    "column": 1734
                  }
                },
                "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1,"class","list-inline");
                var el2 = dom.createElement("li");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","bold capitalize fa");
                var el4 = dom.createTextNode("batch no.");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","fa");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","bold capitalize fa colon");
                var el4 = dom.createTextNode("arrived at");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","fa");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","bold capitalize fa colon");
                var el4 = dom.createTextNode("description");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","fa ellipsis");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [0]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
                morphs[2] = dom.createMorphAt(dom.childAt(element0, [2, 1]),0,0);
                return morphs;
              },
              statements: [
                ["content","batch.permalink",["loc",[null,[1,1463],[1,1482]]]],
                ["inline","moment",[["get","batch.createdAt",["loc",[null,[1,1580],[1,1595]]]]],[],["loc",[null,[1,1571],[1,1597]]]],
                ["content","batch.description",["loc",[null,[1,1696],[1,1717]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1215
                },
                "end": {
                  "line": 1,
                  "column": 1746
                }
              },
              "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","link-to",["logistics.inventories.cell",["get","warehouse.id",["loc",[null,[1,1326],[1,1338]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,1286],[1,1746]]]]
            ],
            locals: ["batch"],
            templates: [child0]
          };
        }());
        var child4 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.5",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1754
                  },
                  "end": {
                    "line": 1,
                    "column": 1904
                  }
                },
                "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1,"class","fa");
                var el2 = dom.createTextNode("you have no loads here from any appointment");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1746
                },
                "end": {
                  "line": 1,
                  "column": 1916
                }
              },
              "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","link-to",["logistics.inventories.cell",["get","warehouse.id",["loc",[null,[1,1794],[1,1806]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,1754],[1,1916]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 475
              },
              "end": {
                "line": 1,
                "column": 2077
              }
            },
            "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","panel-body");
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2,"class","list-inline");
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","bold capitalize fa colon");
            var el5 = dom.createTextNode("total batches");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","bold capitalize fa colon");
            var el5 = dom.createTextNode("cameras");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","list-group");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","panel-footer");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","capitalize fa colon");
            var el3 = dom.createTextNode("last modified");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa");
            var el3 = dom.createTextNode(" ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var element2 = dom.childAt(element1, [0]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
            morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
            morphs[3] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            morphs[4] = dom.createMorphAt(dom.childAt(fragment, [2, 1]),1,1);
            return morphs;
          },
          statements: [
            ["content","warehouse.batches.length",["loc",[null,[1,706],[1,734]]]],
            ["block","each",[["get","warehouse.cameras",["loc",[null,[1,811],[1,828]]]]],[],0,1,["loc",[null,[1,803],[1,930]]]],
            ["block","link-to",["logistics.inventories.cell",["get","warehouse.id",["loc",[null,[1,983],[1,995]]]]],[],2,null,["loc",[null,[1,943],[1,1181]]]],
            ["block","each",[["get","warehouse.batchesCollection.uniqAppointmentBatches",["loc",[null,[1,1223],[1,1273]]]]],[],3,4,["loc",[null,[1,1215],[1,1925]]]],
            ["inline","moment",[["get","warehouse.updatedAt",["loc",[null,[1,2043],[1,2062]]]]],[],["loc",[null,[1,2034],[1,2064]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 445
            },
            "end": {
              "line": 1,
              "column": 2099
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","panel-collapsible",[],["model",["subexpr","@mut",[["get","warehouse",["loc",[null,[1,502],[1,511]]]]],[],[]],"active",["subexpr","@mut",[["get","active",["loc",[null,[1,519],[1,525]]]]],[],[]],"action","clickPanel","panelTitle",["subexpr","@mut",[["get","warehouse.fullTitle",["loc",[null,[1,557],[1,576]]]]],[],[]]],0,null,["loc",[null,[1,475],[1,2099]]]]
        ],
        locals: ["warehouse"],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2099
            },
            "end": {
              "line": 1,
              "column": 2168
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","panel-collapsible",[],["panelTitle","You have no storage cells!"],["loc",[null,[1,2107],[1,2168]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2183
          }
        },
        "moduleName": "uiux/templates/logistics/inventories/-panel-group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel-group");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element4,0,0);
        morphs[1] = dom.createMorphAt(element4,1,1);
        return morphs;
      },
      statements: [
        ["block","panel-collapsible",[],["active",["subexpr","@mut",[["get","active",["loc",[null,[1,53],[1,59]]]]],[],[]],"panelTitle","storage inventory summary","action","clickSummary"],0,null,["loc",[null,[1,25],[1,445]]]],
        ["block","each",[["get","model",["loc",[null,[1,453],[1,458]]]]],[],1,2,["loc",[null,[1,445],[1,2177]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/logistics/inventories/batch', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1487
          }
        },
        "moduleName": "uiux/templates/logistics/inventories/batch.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default instructions-set");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading instruction-line");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("batch info");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-body");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","row");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/barcode.png");
        dom.setAttribute(el7,"class","thumbnail bound");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el7 = dom.createElement("h3");
        dom.setAttribute(el7,"class","instruction");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa bold colon capitalize");
        var el9 = dom.createTextNode("storage section");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa highlight prespace");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("id");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createElement("span");
        var el11 = dom.createTextNode("batch-");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("origin appointment");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("owner");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("loading dock");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("quantity");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("description");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("arrived at");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 1, 0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [0, 1, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [2, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [4, 1]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [5, 1]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(element1, [6, 1]),0,0);
        return morphs;
      },
      statements: [
        ["content","model.warehouse.nameOrId",["loc",[null,[1,528],[1,556]]]],
        ["content","model.id",["loc",[null,[1,675],[1,687]]]],
        ["content","model.appointment.permalink",["loc",[null,[1,800],[1,831]]]],
        ["content","model.appointment.company",["loc",[null,[1,924],[1,953]]]],
        ["content","model.dock.nameOrId",["loc",[null,[1,1053],[1,1076]]]],
        ["content","model.quantity",["loc",[null,[1,1172],[1,1190]]]],
        ["content","model.description",["loc",[null,[1,1289],[1,1310]]]],
        ["inline","moment",[["get","model.createdAt",["loc",[null,[1,1417],[1,1432]]]]],[],["loc",[null,[1,1408],[1,1434]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/inventories/cell', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 111
            },
            "end": {
              "line": 1,
              "column": 270
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize prespace");
          var el2 = dom.createTextNode("back to inventory");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 699
                },
                "end": {
                  "line": 1,
                  "column": 1332
                }
              },
              "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1,"class","list-inline");
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("id");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("description");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("quantity");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("arrived");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize");
              var el4 = dom.createTextNode("appt no.");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [0]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [1, 1]),0,0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [2, 1]),0,0);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [3, 1]),0,0);
              morphs[4] = dom.createMorphAt(dom.childAt(element2, [4, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","item.id",["loc",[null,[1,871],[1,882]]]],
              ["content","item.description",["loc",[null,[1,972],[1,992]]]],
              ["content","item.quantity",["loc",[null,[1,1079],[1,1096]]]],
              ["inline","ago",[["get","item.createdAt",["loc",[null,[1,1188],[1,1202]]]]],[],["loc",[null,[1,1182],[1,1204]]]],
              ["content","item.appointment.permalink",["loc",[null,[1,1285],[1,1315]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 610
              },
              "end": {
                "line": 1,
                "column": 1344
              }
            },
            "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["logistics.inventories.batch",["get","item.id",["loc",[null,[1,740],[1,747]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,699],[1,1344]]]]
          ],
          locals: ["item"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 516
            },
            "end": {
              "line": 1,
              "column": 1367
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Batches stored here");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ember-list-standin",[],["items",["subexpr","@mut",[["get","model.batches",["loc",[null,[1,638],[1,651]]]]],[],[]],"classNames","ember-list-panel-group"],0,null,["loc",[null,[1,610],[1,1367]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1367
            },
            "end": {
              "line": 1,
              "column": 1451
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("No batches stored here");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2010
                },
                "end": {
                  "line": 1,
                  "column": 2449
                }
              },
              "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1,"class","list-inline");
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("Appt No.");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("batch(es): ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("Arrived ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("From: ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [0]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(dom.childAt(element1, [0, 1]),0,0);
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
              morphs[2] = dom.createMorphAt(dom.childAt(element1, [2, 1]),0,0);
              morphs[3] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","item.permalink",["loc",[null,[1,2154],[1,2172]]]],
              ["inline","num",[["get","item.batches.length",["loc",[null,[1,2245],[1,2264]]]]],[],["loc",[null,[1,2239],[1,2266]]]],
              ["inline","ago",[["get","item.fulfilledAt",["loc",[null,[1,2336],[1,2352]]]]],[],["loc",[null,[1,2330],[1,2354]]]],
              ["content","item.company",["loc",[null,[1,2416],[1,2432]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1894
              },
              "end": {
                "line": 1,
                "column": 2461
              }
            },
            "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["logistics.appointment",["get","item.id",["loc",[null,[1,2045],[1,2052]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,2010],[1,2461]]]]
          ],
          locals: ["item"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1775
            },
            "end": {
              "line": 1,
              "column": 2484
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Appointments here");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ember-list-standin",[],["items",["subexpr","@mut",[["get","model.batchesCollection.uniqAppointments",["loc",[null,[1,1922],[1,1962]]]]],[],[]],"classNames","ember-list-panel-group"],0,null,["loc",[null,[1,1894],[1,2484]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2484
            },
            "end": {
              "line": 1,
              "column": 2567
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("No appointments found");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2774
              },
              "end": {
                "line": 1,
                "column": 2918
              }
            },
            "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-lg-4 col-md-4 col-sm-6 col-xs-6");
            var el2 = dom.createElement("img");
            dom.setAttribute(el2,"class","thumbnail bound");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            return morphs;
          },
          statements: [
            ["attribute","src",["get","picture.normal",["loc",[null,[1,2871],[1,2885]]]]]
          ],
          locals: ["picture"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2740
            },
            "end": {
              "line": 1,
              "column": 2927
            }
          },
          "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","batch.pictures",["loc",[null,[1,2782],[1,2796]]]]],[],0,null,["loc",[null,[1,2774],[1,2927]]]]
        ],
        locals: ["batch"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2942
          }
        },
        "moduleName": "uiux/templates/logistics/inventories/cell.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-6 col-lg-3");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group btn-group-justified");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-6");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("storage cell # ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-footer");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" batch(es) stored here");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-6");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("storage cell # ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-footer");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" appointment(s) here");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [1]);
        var element4 = dom.childAt(element3, [0, 0]);
        var element5 = dom.childAt(element3, [1, 0]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0, 0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [0, 1]),0,0);
        morphs[2] = dom.createMorphAt(element4,1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [2, 0]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element5, [0, 1]),0,0);
        morphs[5] = dom.createMorphAt(element5,1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(element5, [2, 0]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["logistics.inventories.index"],["class","btn btn-default"],0,null,["loc",[null,[1,111],[1,282]]]],
        ["content","model.nameOrId",["loc",[null,[1,485],[1,503]]]],
        ["block","if",[["get","model.batches",["loc",[null,[1,522],[1,535]]]]],[],1,2,["loc",[null,[1,516],[1,1458]]]],
        ["inline","num",[["get","model.batches.length",["loc",[null,[1,1507],[1,1527]]]]],[],["loc",[null,[1,1501],[1,1529]]]],
        ["content","model.nameOrId",["loc",[null,[1,1744],[1,1762]]]],
        ["block","if",[["get","model.batchesCollection.uniqAppointments",["loc",[null,[1,1781],[1,1821]]]]],[],3,4,["loc",[null,[1,1775],[1,2574]]]],
        ["inline","num",[["get","model.batchesCollection.uniqAppointments.length",["loc",[null,[1,2623],[1,2670]]]]],[],["loc",[null,[1,2617],[1,2672]]]],
        ["block","each",[["get","model.batches",["loc",[null,[1,2748],[1,2761]]]]],[],5,null,["loc",[null,[1,2740],[1,2936]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('uiux/templates/logistics/inventories/cell/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 382
          }
        },
        "moduleName": "uiux/templates/logistics/inventories/cell/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","media");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media-left");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","media-object thumbnail small");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media-body");
        var el3 = dom.createElement("dl");
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","attr-title");
        var el5 = dom.createTextNode("status");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("full");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","attr-title");
        var el5 = dom.createTextNode("appointment in");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("234234");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","attr-title");
        var el5 = dom.createTextNode("appointment out");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("none");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","attr-title");
        var el5 = dom.createTextNode("belongs to");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("Acme Plastics Co.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/inventories/cell/pictures', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 568
          }
        },
        "moduleName": "uiux/templates/logistics/inventories/cell/pictures.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 col-md-4 col-sm-6 col-xs-6");
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"src","images/ldpe.jpg");
        dom.setAttribute(el3,"class","thumbnail flexible");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/inventories/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 47
          }
        },
        "moduleName": "uiux/templates/logistics/inventories/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","partial",["logistics/inventories/panel-group"],[],["loc",[null,[1,0],[1,47]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 123
          }
        },
        "moduleName": "uiux/templates/logistics/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","section-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa capitalize");
        var el3 = dom.createTextNode("loading logistics dashboard");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","partial",["sessions/setup"],[],["loc",[null,[1,93],[1,123]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/logistics/pictures', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 165
            },
            "end": {
              "line": 1,
              "column": 231
            }
          },
          "moduleName": "uiux/templates/logistics/pictures.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [
          ["attribute","src",["get","picture.file",["loc",[null,[1,216],[1,228]]]]]
        ],
        locals: ["picture"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 240
            },
            "end": {
              "line": 1,
              "column": 453
            }
          },
          "moduleName": "uiux/templates/logistics/pictures.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","actions");
          var el2 = dom.createElement("button");
          dom.setAttribute(el2,"type","submit");
          dom.setAttribute(el2,"class","btn btn-primary");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","fa");
          var el4 = dom.createTextNode("submit");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["inline","em-form-input",[],["name","files","label","file","type","webcam"],["loc",[null,[1,284],[1,341]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 481
          }
        },
        "moduleName": "uiux/templates/logistics/pictures.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-12");
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("asdf");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1, 0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element1,0,0);
        morphs[1] = dom.createMorphAt(element1,1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model.tmpPictures",["loc",[null,[1,173],[1,190]]]]],[],0,null,["loc",[null,[1,165],[1,240]]]],
        ["block","em-form-for",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,261],[1,266]]]]],[],[]],"action","submit"],1,null,["loc",[null,[1,240],[1,469]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 19
            },
            "end": {
              "line": 1,
              "column": 85
            }
          },
          "moduleName": "uiux/templates/manager.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","vector-tiles",[],["models",["subexpr","@mut",[["get","tiles",["loc",[null,[1,59],[1,64]]]]],[],[]],"action","clickTile"],["loc",[null,[1,37],[1,85]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 189
            },
            "end": {
              "line": 1,
              "column": 322
            }
          },
          "moduleName": "uiux/templates/manager.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/contracts.png");
          dom.setAttribute(el1,"alt","reports");
          dom.setAttribute(el1,"class","icon-nav");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 334
            },
            "end": {
              "line": 1,
              "column": 475
            }
          },
          "moduleName": "uiux/templates/manager.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/appointment.png");
          dom.setAttribute(el1,"alt","appointments");
          dom.setAttribute(el1,"class","icon-nav");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 487
            },
            "end": {
              "line": 1,
              "column": 617
            }
          },
          "moduleName": "uiux/templates/manager.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/worker.png");
          dom.setAttribute(el1,"alt","employees");
          dom.setAttribute(el1,"class","icon-nav");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 629
            },
            "end": {
              "line": 1,
              "column": 764
            }
          },
          "moduleName": "uiux/templates/manager.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/inventory.png");
          dom.setAttribute(el1,"alt","inventory");
          dom.setAttribute(el1,"class","icon-nav");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 776
            },
            "end": {
              "line": 1,
              "column": 902
            }
          },
          "moduleName": "uiux/templates/manager.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/status.png");
          dom.setAttribute(el1,"alt","status");
          dom.setAttribute(el1,"class","icon-nav");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 951
            },
            "end": {
              "line": 1,
              "column": 1041
            }
          },
          "moduleName": "uiux/templates/manager.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"src","images/camera.png");
          dom.setAttribute(el1,"alt","cameras");
          dom.setAttribute(el1,"class","icon-nav");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1239
          }
        },
        "moduleName": "uiux/templates/manager.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"id","game");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"id","sidebar");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","btn-group-vertical btn-group-lg side-nav");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"id","corner");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("footer");
        dom.setAttribute(el1,"id","footer");
        dom.setAttribute(el1,"class","footer");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","container-fluid");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-lg-10");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 0]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(element0,0,0);
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,2,2);
        morphs[4] = dom.createMorphAt(element0,3,3);
        morphs[5] = dom.createMorphAt(element0,4,4);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[7] = dom.createUnsafeMorphAt(dom.childAt(fragment, [3, 0, 0, 0]),0,0);
        morphs[8] = dom.createUnsafeMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","vector-canvas",[],[],0,null,["loc",[null,[1,19],[1,103]]]],
        ["block","link-to",["manager.reports.new"],["classNames","btn btn-default square"],1,null,["loc",[null,[1,189],[1,334]]]],
        ["block","link-to",["manager.appointments"],["classNames","btn btn-default square"],2,null,["loc",[null,[1,334],[1,487]]]],
        ["block","link-to",["manager.employees"],["classNames","btn btn-default square"],3,null,["loc",[null,[1,487],[1,629]]]],
        ["block","link-to",["manager.inventories"],["classNames","btn btn-default square"],4,null,["loc",[null,[1,629],[1,776]]]],
        ["block","link-to",["manager.settings"],["classNames","btn btn-default square"],5,null,["loc",[null,[1,776],[1,914]]]],
        ["block","link-to",["manager.cameras"],[],6,null,["loc",[null,[1,951],[1,1053]]]],
        ["inline","partial",["manager/ctrl-menu"],[],["loc",[null,[1,1167],[1,1200]]]],
        ["content","outlet",["loc",[null,[1,1227],[1,1239]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('uiux/templates/manager/-ctrl-menu', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 73
            },
            "end": {
              "line": 1,
              "column": 243
            }
          },
          "moduleName": "uiux/templates/manager/-ctrl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","info-title");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-truck");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa info-data");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","trucks.length",["loc",[null,[1,219],[1,236]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 255
            },
            "end": {
              "line": 1,
              "column": 434
            }
          },
          "moduleName": "uiux/templates/manager/-ctrl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa info-title");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-cubes");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa info-data");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","batches.length",["loc",[null,[1,409],[1,427]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 446
            },
            "end": {
              "line": 1,
              "column": 634
            }
          },
          "moduleName": "uiux/templates/manager/-ctrl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa info-title");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-exchange");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa info-data");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","appointments.length",["loc",[null,[1,604],[1,627]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 742
          }
        },
        "moduleName": "uiux/templates/manager/-ctrl-menu.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-3 info-box");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa info-data");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(element0,0,0);
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,2,2);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [3, 0]),0,0);
        return morphs;
      },
      statements: [
        ["inline","news-ticker",[],["class","col-xs-12"],["loc",[null,[1,17],[1,50]]]],
        ["block","link-to",["manager.trucks"],["classNames","col-lg-3 info-box"],0,null,["loc",[null,[1,73],[1,255]]]],
        ["block","link-to",["manager.inventories"],["classNames","col-lg-3 info-box"],1,null,["loc",[null,[1,255],[1,446]]]],
        ["block","link-to",["manager.appointments"],["classNames","col-lg-3 info-box"],2,null,["loc",[null,[1,446],[1,646]]]],
        ["inline","moment",[["get","rightNow",["loc",[null,[1,713],[1,721]]]]],[],["loc",[null,[1,704],[1,723]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/manager/appointments', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 464
            },
            "end": {
              "line": 1,
              "column": 535
            }
          },
          "moduleName": "uiux/templates/manager/appointments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("home");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 556
            },
            "end": {
              "line": 1,
              "column": 639
            }
          },
          "moduleName": "uiux/templates/manager/appointments.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("goto logistics");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 709
          }
        },
        "moduleName": "uiux/templates/manager/appointments.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","contracts-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa capitalize");
        var el9 = dom.createTextNode("logistic details");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        dom.setAttribute(el7,"class","nav nav-pills");
        var el8 = dom.createElement("li");
        dom.setAttribute(el8,"class","active");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [0]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
        morphs[3] = dom.createUnsafeMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,225],[1,259]]]],
        ["block","link-to",["manager.appointments"],[],0,null,["loc",[null,[1,464],[1,547]]]],
        ["block","link-to",["logistics.appointments"],[],1,null,["loc",[null,[1,556],[1,651]]]],
        ["content","outlet",["loc",[null,[1,661],[1,673]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/appointments/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 205
              },
              "end": {
                "line": 1,
                "column": 494
              }
            },
            "moduleName": "uiux/templates/manager/appointments/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa bold capitalize");
            var el2 = dom.createTextNode("appt no.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa prespace");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa bold capitalize prespace colon");
            var el2 = dom.createTextNode("from");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa prespace");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
            return morphs;
          },
          statements: [
            ["content","appointment.id",["loc",[null,[1,354],[1,372]]]],
            ["content","appointment.company",["loc",[null,[1,464],[1,487]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 173
            },
            "end": {
              "line": 1,
              "column": 506
            }
          },
          "moduleName": "uiux/templates/manager/appointments/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["logistics.appointment",["get","appointment.id",["loc",[null,[1,240],[1,254]]]]],["class","list-group-item"],0,null,["loc",[null,[1,205],[1,506]]]]
        ],
        locals: ["appointment"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 506
            },
            "end": {
              "line": 1,
              "column": 618
            }
          },
          "moduleName": "uiux/templates/manager/appointments/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa bold");
          var el3 = dom.createTextNode("your warehouse has no appointments today");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 639
          }
        },
        "moduleName": "uiux/templates/manager/appointments/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading");
        var el3 = dom.createElement("h3");
        dom.setAttribute(el3,"class","panel-title");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("today's appointment");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[1,181],[1,186]]]]],[],0,1,["loc",[null,[1,173],[1,627]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/cameras', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 407
            },
            "end": {
              "line": 1,
              "column": 495
            }
          },
          "moduleName": "uiux/templates/manager/cameras.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"class","pointer capitalize");
          var el2 = dom.createTextNode("index");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 507
            },
            "end": {
              "line": 1,
              "column": 601
            }
          },
          "moduleName": "uiux/templates/manager/cameras.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"class","pointer capitalize");
          var el2 = dom.createTextNode("overview");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 666
          }
        },
        "moduleName": "uiux/templates/manager/cameras.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-12 col-md-12 col-sm-12 col-xs-12");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","cameras-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa capitalize");
        var el9 = dom.createTextNode("cameras");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        dom.setAttribute(el7,"class","nav nav-pills");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(element2,0,0);
        morphs[2] = dom.createMorphAt(element2,1,1);
        morphs[3] = dom.createUnsafeMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,196],[1,230]]]],
        ["block","link-to",["manager.cameras.index"],["tagName","li"],0,null,["loc",[null,[1,407],[1,507]]]],
        ["block","link-to",["manager.cameras.overview"],["tagName","li"],1,null,["loc",[null,[1,507],[1,613]]]],
        ["content","outlet",["loc",[null,[1,618],[1,630]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/cameras/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 81
                },
                "end": {
                  "line": 1,
                  "column": 373
                }
              },
              "moduleName": "uiux/templates/manager/cameras/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1,"class","list-inline");
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("camera name");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("located at");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [0]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","cam.cameraName",["loc",[null,[1,227],[1,245]]]],
              ["content","cam.tile.fullTitle",["loc",[null,[1,334],[1,356]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 13
              },
              "end": {
                "line": 1,
                "column": 385
              }
            },
            "moduleName": "uiux/templates/manager/cameras/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["manager.cameras.camera",["get","cam.id",["loc",[null,[1,117],[1,123]]]]],[],0,null,["loc",[null,[1,81],[1,385]]]]
          ],
          locals: ["cam"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 408
            }
          },
          "moduleName": "uiux/templates/manager/cameras/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ember-list-standin",[],["items",["subexpr","@mut",[["get","model",["loc",[null,[1,41],[1,46]]]]],[],[]],"height",500,"rowHeight",50],0,null,["loc",[null,[1,13],[1,408]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 408
            },
            "end": {
              "line": 1,
              "column": 532
            }
          },
          "moduleName": "uiux/templates/manager/cameras/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","alert alert-warning");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-warning");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("You have no cameras setup!");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 726
          }
        },
        "moduleName": "uiux/templates/manager/cameras/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1, 0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createElementMorph(element1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model",["loc",[null,[1,6],[1,11]]]]],[],0,1,["loc",[null,[1,0],[1,539]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,568],[1,602]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/cameras/overview', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 17
            },
            "end": {
              "line": 1,
              "column": 134
            }
          },
          "moduleName": "uiux/templates/manager/cameras/overview.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-3 col-md-4 col-sm-12 col-xs-12");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          return morphs;
        },
        statements: [
          ["inline","adaptive-camera",[],["camera",["subexpr","@mut",[["get","camera",["loc",[null,[1,120],[1,126]]]]],[],[]]],["loc",[null,[1,95],[1,128]]]]
        ],
        locals: ["camera"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 134
            },
            "end": {
              "line": 1,
              "column": 287
            }
          },
          "moduleName": "uiux/templates/manager/cameras/overview.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-xs-12");
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","alert alert-warning");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","fa fa-warning");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","fa");
          var el4 = dom.createTextNode("You have no cameras setup!");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 489
          }
        },
        "moduleName": "uiux/templates/manager/cameras/overview.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[1,25],[1,30]]]]],[],0,1,["loc",[null,[1,17],[1,296]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,331],[1,365]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/dock', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 466
            },
            "end": {
              "line": 1,
              "column": 538
            }
          },
          "moduleName": "uiux/templates/manager/dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("home");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 559
            },
            "end": {
              "line": 1,
              "column": 634
            }
          },
          "moduleName": "uiux/templates/manager/dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("goto dock");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 704
          }
        },
        "moduleName": "uiux/templates/manager/dock.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","barn-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa");
        var el9 = dom.createTextNode("dock no. ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        dom.setAttribute(el7,"class","nav nav-pills");
        var el8 = dom.createElement("li");
        dom.setAttribute(el8,"class","active");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [0]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
        morphs[4] = dom.createUnsafeMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,220],[1,254]]]],
        ["content","model.id",["loc",[null,[1,397],[1,409]]]],
        ["block","link-to",["manager.dock",["get","model.id",["loc",[null,[1,492],[1,500]]]]],[],0,null,["loc",[null,[1,466],[1,550]]]],
        ["block","link-to",["docks.dock",["get","model.id",["loc",[null,[1,583],[1,591]]]]],[],1,null,["loc",[null,[1,559],[1,646]]]],
        ["content","outlet",["loc",[null,[1,656],[1,668]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/dock/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 710
          }
        },
        "moduleName": "uiux/templates/manager/dock/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","media");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","live-camera media-left");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media-body");
        var el3 = dom.createElement("dl");
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("status");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("camera");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("live");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("dock no.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("data id.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("workers");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("Jose, Phillip");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("truck");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("none");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 0]);
        var element2 = dom.childAt(fragment, [1, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [7]),0,0);
        morphs[4] = dom.createElementMorph(element2);
        return morphs;
      },
      statements: [
        ["inline","video-proxy",[],["src","assets/doge.webm","class","thumbnail"],["loc",[null,[1,55],[1,111]]]],
        ["content","model.status",["loc",[null,[1,188],[1,204]]]],
        ["content","model.dockNumber",["loc",[null,[1,306],[1,326]]]],
        ["content","model.id",["loc",[null,[1,376],[1,388]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,552],[1,586]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/employees', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 400
          }
        },
        "moduleName": "uiux/templates/manager/employees.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-6 col-md-8 col-sm-10 col-xs-12 col-lg-push-3 col-md-push-2 col-sm-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","employees-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createUnsafeMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,238],[1,272]]]],
        ["content","outlet",["loc",[null,[1,352],[1,364]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/employees/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 71
            },
            "end": {
              "line": 1,
              "column": 220
            }
          },
          "moduleName": "uiux/templates/manager/employees/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-user-plus");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode(" new employee");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 751
                },
                "end": {
                  "line": 1,
                  "column": 894
                }
              },
              "moduleName": "uiux/templates/manager/employees/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","media-content");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","bold");
              var el3 = dom.createElement("i");
              dom.setAttribute(el3,"class","fa fa-phone");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","prespace");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","item.phone",["loc",[null,[1,867],[1,881]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 901
                },
                "end": {
                  "line": 1,
                  "column": 1047
                }
              },
              "moduleName": "uiux/templates/manager/employees/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","media-content");
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","bold");
              var el3 = dom.createElement("i");
              dom.setAttribute(el3,"class","fa fa-envelope");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","prespace");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","item.email",["loc",[null,[1,1020],[1,1034]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 245
              },
              "end": {
                "line": 1,
                "column": 1066
              }
            },
            "moduleName": "uiux/templates/manager/employees/index.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","media");
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","media-left");
            var el3 = dom.createElement("img");
            dom.setAttribute(el3,"src","images/doge.jpg");
            dom.setAttribute(el3,"class","media-object thumbnail employee-mugshot");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","media-body");
            var el3 = dom.createElement("h4");
            dom.setAttribute(el3,"class","media-heading");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","media-content");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","bold colon");
            var el5 = dom.createTextNode("title");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","prespace");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","media-content");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","bold colon");
            var el5 = dom.createTextNode("location");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","prespace");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0, 1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [2, 1]),0,0);
            morphs[3] = dom.createMorphAt(element0,3,3);
            morphs[4] = dom.createMorphAt(element0,4,4);
            return morphs;
          },
          statements: [
            ["content","item.fullName",["loc",[null,[1,489],[1,506]]]],
            ["content","item.title",["loc",[null,[1,598],[1,612]]]],
            ["content","item.tile.fullTitle",["loc",[null,[1,715],[1,738]]]],
            ["block","if",[["get","phone",["loc",[null,[1,757],[1,762]]]]],[],0,null,["loc",[null,[1,751],[1,901]]]],
            ["block","if",[["get","email",["loc",[null,[1,907],[1,912]]]]],[],1,null,["loc",[null,[1,901],[1,1054]]]]
          ],
          locals: ["item"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 232
            },
            "end": {
              "line": 1,
              "column": 1089
            }
          },
          "moduleName": "uiux/templates/manager/employees/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ember-list-standin",[],["items",["subexpr","@mut",[["get","model",["loc",[null,[1,273],[1,278]]]]],[],[]],"height",440,"rowHeight",110],0,null,["loc",[null,[1,245],[1,1089]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1089
            },
            "end": {
              "line": 1,
              "column": 1220
            }
          },
          "moduleName": "uiux/templates/manager/employees/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","alert alert-warning");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-warning");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa capitalize");
          var el3 = dom.createTextNode("you have no employees!");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1414
          }
        },
        "moduleName": "uiux/templates/manager/employees/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("employees overview");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [3, 0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["block","link-to",["manager.employees.new"],["classNames","btn btn-default"],0,null,["loc",[null,[1,71],[1,232]]]],
        ["block","if",[["get","model",["loc",[null,[1,238],[1,243]]]]],[],1,2,["loc",[null,[1,232],[1,1227]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,1256],[1,1290]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/manager/employees/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 65
            },
            "end": {
              "line": 1,
              "column": 209
            }
          },
          "moduleName": "uiux/templates/manager/employees/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize");
          var el2 = dom.createTextNode(" back");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 644
              },
              "end": {
                "line": 1,
                "column": 808
              }
            },
            "moduleName": "uiux/templates/manager/employees/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize bold");
            var el2 = dom.createTextNode("submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 221
            },
            "end": {
              "line": 1,
              "column": 833
            }
          },
          "moduleName": "uiux/templates/manager/employees/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","actions");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4]),0,0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["inline","em-form-input",[],["name","fullName","label","full name","type","text"],["loc",[null,[1,291],[1,354]]]],
          ["inline","em-form-input",[],["name","email","label","email address","type","email"],["loc",[null,[1,354],[1,419]]]],
          ["inline","em-form-input",[],["name","title","label","position title","type","text"],["loc",[null,[1,419],[1,484]]]],
          ["inline","em-form-input",[],["name","tile","label","job location","type","select","content",["subexpr","@mut",[["get","tileChoices",["loc",[null,[1,555],[1,566]]]]],[],[]],"optionValuePath","value","optionLabelPath","presentation"],["loc",[null,[1,484],[1,623]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","employee",["loc",[null,[1,668],[1,676]]]]],[],[]],"classNames","btn btn-success btn-lg btn-hover","type","submit"],0,null,["loc",[null,[1,644],[1,827]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 849
          }
        },
        "moduleName": "uiux/templates/manager/employees/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("new employee");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","link-to",["manager.employees.index"],["classNames","btn btn-default"],0,null,["loc",[null,[1,65],[1,221]]]],
        ["block","em-form-for",[],["mistakes",["subexpr","@mut",[["get","employeeError",["loc",[null,[1,245],[1,258]]]]],[],[]],"action","create","model",["subexpr","@mut",[["get","employee",["loc",[null,[1,281],[1,289]]]]],[],[]]],1,null,["loc",[null,[1,221],[1,849]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/inventories', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 362
          }
        },
        "moduleName": "uiux/templates/manager/inventories.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-12 col-md-12 col-sm-12 col-xs-12");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","inventories-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createUnsafeMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,200],[1,234]]]],
        ["content","outlet",["loc",[null,[1,314],[1,326]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/inventories/-panel-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 25
            },
            "end": {
              "line": 1,
              "column": 423
            }
          },
          "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","list-inline");
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","bold capitalize fa colon");
          var el5 = dom.createTextNode("total storage sections");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","fa");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","bold fa capitalize colon");
          var el5 = dom.createTextNode("total loads in warehouse");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","fa");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0, 0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [0, 1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [1, 1]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.length",["loc",[null,[1,259],[1,275]]]],
          ["content","model.totalBatches",["loc",[null,[1,378],[1,400]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 803
                },
                "end": {
                  "line": 1,
                  "column": 876
                }
              },
              "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-video-camera");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: ["camera"],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 876
                },
                "end": {
                  "line": 1,
                  "column": 921
                }
              },
              "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","parantheses");
              var el2 = dom.createTextNode("none");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1065
                },
                "end": {
                  "line": 1,
                  "column": 1289
                }
              },
              "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode("The following ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","bold");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode(" appointment(s) have loads stored in this section");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["content","warehouse.batchesCollection.uniqAppointmentCount",["loc",[null,[1,1163],[1,1215]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.5",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1406
                  },
                  "end": {
                    "line": 1,
                    "column": 1852
                  }
                },
                "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1,"class","list-inline");
                var el2 = dom.createElement("li");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","bold capitalize fa");
                var el4 = dom.createTextNode("batch no.");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","fa");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","bold capitalize fa colon");
                var el4 = dom.createTextNode("arrived at");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","fa");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("li");
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","bold capitalize fa colon");
                var el4 = dom.createTextNode("description");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","fa ellipsis");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [0]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
                morphs[2] = dom.createMorphAt(dom.childAt(element0, [2, 1]),0,0);
                return morphs;
              },
              statements: [
                ["content","batch.permalink",["loc",[null,[1,1581],[1,1600]]]],
                ["inline","moment",[["get","batch.createdAt",["loc",[null,[1,1698],[1,1713]]]]],[],["loc",[null,[1,1689],[1,1715]]]],
                ["content","batch.description",["loc",[null,[1,1814],[1,1835]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1335
                },
                "end": {
                  "line": 1,
                  "column": 1864
                }
              },
              "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","link-to",["manager.inventories.cell",["get","warehouse.id",["loc",[null,[1,1444],[1,1456]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,1406],[1,1864]]]]
            ],
            locals: ["batch"],
            templates: [child0]
          };
        }());
        var child4 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.5",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 1,
                    "column": 1872
                  },
                  "end": {
                    "line": 1,
                    "column": 2020
                  }
                },
                "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1,"class","fa");
                var el2 = dom.createTextNode("you have no loads here from any appointment");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 1864
                },
                "end": {
                  "line": 1,
                  "column": 2032
                }
              },
              "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","link-to",["manager.inventories.cell",["get","warehouse.id",["loc",[null,[1,1910],[1,1922]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,1872],[1,2032]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 475
              },
              "end": {
                "line": 1,
                "column": 2047
              }
            },
            "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","panel-body");
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2,"class","list-inline");
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","bold capitalize fa colon");
            var el5 = dom.createTextNode("total batches");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","bold capitalize fa colon");
            var el5 = dom.createTextNode("cameras");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("li");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","bold capitalize fa colon");
            var el5 = dom.createTextNode("last modified");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","fa");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","list-group");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var element2 = dom.childAt(element1, [0]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [2, 1]),0,0);
            morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
            morphs[4] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","warehouse.batches.length",["loc",[null,[1,706],[1,734]]]],
            ["block","each",[["get","warehouse.cameras",["loc",[null,[1,811],[1,828]]]]],[],0,1,["loc",[null,[1,803],[1,930]]]],
            ["inline","moment",[["get","warehouse.updatedAt",["loc",[null,[1,1024],[1,1043]]]]],[],["loc",[null,[1,1015],[1,1045]]]],
            ["block","link-to",["manager.inventories.cell",["get","warehouse.id",["loc",[null,[1,1103],[1,1115]]]]],[],2,null,["loc",[null,[1,1065],[1,1301]]]],
            ["block","each",[["get","warehouse.batchesCollection.uniqAppointmentBatches",["loc",[null,[1,1343],[1,1393]]]]],[],3,4,["loc",[null,[1,1335],[1,2041]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 445
            },
            "end": {
              "line": 1,
              "column": 2069
            }
          },
          "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","panel-collapsible",[],["model",["subexpr","@mut",[["get","warehouse",["loc",[null,[1,502],[1,511]]]]],[],[]],"active",["subexpr","@mut",[["get","active",["loc",[null,[1,519],[1,525]]]]],[],[]],"action","clickPanel","panelTitle",["subexpr","@mut",[["get","warehouse.fullTitle",["loc",[null,[1,557],[1,576]]]]],[],[]]],0,null,["loc",[null,[1,475],[1,2069]]]]
        ],
        locals: ["warehouse"],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2069
            },
            "end": {
              "line": 1,
              "column": 2138
            }
          },
          "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","panel-collapsible",[],["panelTitle","You have no storage cells!"],["loc",[null,[1,2077],[1,2138]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2153
          }
        },
        "moduleName": "uiux/templates/manager/inventories/-panel-group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel-group");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element4,0,0);
        morphs[1] = dom.createMorphAt(element4,1,1);
        return morphs;
      },
      statements: [
        ["block","panel-collapsible",[],["active",["subexpr","@mut",[["get","active",["loc",[null,[1,53],[1,59]]]]],[],[]],"panelTitle","storage inventory summary","action","clickSummary"],0,null,["loc",[null,[1,25],[1,445]]]],
        ["block","each",[["get","model",["loc",[null,[1,453],[1,458]]]]],[],1,2,["loc",[null,[1,445],[1,2147]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/manager/inventories/batch', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1601
          }
        },
        "moduleName": "uiux/templates/manager/inventories/batch.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default instructions-set");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading instruction-line");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("batch info");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-body");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","row");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/barcode.png");
        dom.setAttribute(el7,"class","thumbnail bound");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-xs-12 col-sm-12 col-md-6 col-lg-6");
        var el7 = dom.createElement("h3");
        dom.setAttribute(el7,"class","instruction");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa bold colon capitalize");
        var el9 = dom.createTextNode("storage section");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa highlight prespace");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("id");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createElement("span");
        var el11 = dom.createTextNode("batch-");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        var el10 = dom.createElement("span");
        var el11 = dom.createComment("");
        dom.appendChild(el10, el11);
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("origin appointment");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("owner");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("loading dock");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("quantity");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("description");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("arrived at");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa bold colon capitalize");
        var el10 = dom.createTextNode("truck id");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa prespace");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 1, 0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [0, 1, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [2, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [4, 1]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [5, 1]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(element1, [6, 1]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(element1, [7, 1]),0,0);
        return morphs;
      },
      statements: [
        ["content","model.warehouse.nameOrId",["loc",[null,[1,528],[1,556]]]],
        ["content","model.id",["loc",[null,[1,675],[1,687]]]],
        ["content","model.appointment.permalink",["loc",[null,[1,800],[1,831]]]],
        ["content","model.appointment.company",["loc",[null,[1,924],[1,953]]]],
        ["content","model.dock.nameOrId",["loc",[null,[1,1053],[1,1076]]]],
        ["content","model.quantity",["loc",[null,[1,1172],[1,1190]]]],
        ["content","model.description",["loc",[null,[1,1289],[1,1310]]]],
        ["inline","moment",[["get","model.createdAt",["loc",[null,[1,1417],[1,1432]]]]],[],["loc",[null,[1,1408],[1,1434]]]],
        ["content","model.truck.id",["loc",[null,[1,1530],[1,1548]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/inventories/cell', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 150
            },
            "end": {
              "line": 1,
              "column": 345
            }
          },
          "moduleName": "uiux/templates/manager/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa capitalize prespace");
          var el2 = dom.createTextNode("back to inventory");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 773
                },
                "end": {
                  "line": 1,
                  "column": 1406
                }
              },
              "moduleName": "uiux/templates/manager/inventories/cell.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1,"class","list-inline");
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("id");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("description");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("quantity");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize colon");
              var el4 = dom.createTextNode("arrived");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold capitalize");
              var el4 = dom.createTextNode("appt no.");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [0]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [1, 1]),0,0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [2, 1]),0,0);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [3, 1]),0,0);
              morphs[4] = dom.createMorphAt(dom.childAt(element2, [4, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","item.id",["loc",[null,[1,945],[1,956]]]],
              ["content","item.description",["loc",[null,[1,1046],[1,1066]]]],
              ["content","item.quantity",["loc",[null,[1,1153],[1,1170]]]],
              ["inline","ago",[["get","item.createdAt",["loc",[null,[1,1262],[1,1276]]]]],[],["loc",[null,[1,1256],[1,1278]]]],
              ["content","item.appointment.permalink",["loc",[null,[1,1359],[1,1389]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 684
              },
              "end": {
                "line": 1,
                "column": 1418
              }
            },
            "moduleName": "uiux/templates/manager/inventories/cell.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["logistics.inventories.batch",["get","item.id",["loc",[null,[1,814],[1,821]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,773],[1,1418]]]]
          ],
          locals: ["item"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 590
            },
            "end": {
              "line": 1,
              "column": 1441
            }
          },
          "moduleName": "uiux/templates/manager/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Batches stored here");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ember-list-standin",[],["items",["subexpr","@mut",[["get","model.batches",["loc",[null,[1,712],[1,725]]]]],[],[]],"classNames","ember-list-panel-group"],0,null,["loc",[null,[1,684],[1,1441]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1441
            },
            "end": {
              "line": 1,
              "column": 1525
            }
          },
          "moduleName": "uiux/templates/manager/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("No batches stored here");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 2084
                },
                "end": {
                  "line": 1,
                  "column": 2523
                }
              },
              "moduleName": "uiux/templates/manager/inventories/cell.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1,"class","list-inline");
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("Appt No.");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("batch(es): ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("Arrived ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","fa bold");
              var el4 = dom.createTextNode("From: ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [0]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(dom.childAt(element1, [0, 1]),0,0);
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
              morphs[2] = dom.createMorphAt(dom.childAt(element1, [2, 1]),0,0);
              morphs[3] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
              return morphs;
            },
            statements: [
              ["content","item.permalink",["loc",[null,[1,2228],[1,2246]]]],
              ["inline","num",[["get","item.batches.length",["loc",[null,[1,2319],[1,2338]]]]],[],["loc",[null,[1,2313],[1,2340]]]],
              ["inline","ago",[["get","item.fulfilledAt",["loc",[null,[1,2410],[1,2426]]]]],[],["loc",[null,[1,2404],[1,2428]]]],
              ["content","item.company",["loc",[null,[1,2490],[1,2506]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1968
              },
              "end": {
                "line": 1,
                "column": 2535
              }
            },
            "moduleName": "uiux/templates/manager/inventories/cell.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["logistics.appointment",["get","item.id",["loc",[null,[1,2119],[1,2126]]]]],["classNames","list-group-item"],0,null,["loc",[null,[1,2084],[1,2535]]]]
          ],
          locals: ["item"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1849
            },
            "end": {
              "line": 1,
              "column": 2558
            }
          },
          "moduleName": "uiux/templates/manager/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Appointments here");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ember-list-standin",[],["items",["subexpr","@mut",[["get","model.batchesCollection.uniqAppointments",["loc",[null,[1,1996],[1,2036]]]]],[],[]],"classNames","ember-list-panel-group"],0,null,["loc",[null,[1,1968],[1,2558]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2558
            },
            "end": {
              "line": 1,
              "column": 2641
            }
          },
          "moduleName": "uiux/templates/manager/inventories/cell.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-body");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("No appointments found");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 2848
              },
              "end": {
                "line": 1,
                "column": 2995
              }
            },
            "moduleName": "uiux/templates/manager/inventories/cell.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-lg-4 col-md-4 col-sm-6 col-xs-6");
            var el2 = dom.createElement("img");
            dom.setAttribute(el2,"class","thumbnail bound");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0, 0]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            return morphs;
          },
          statements: [
            ["attribute","src",["get","picture.thumbnail",["loc",[null,[1,2945],[1,2962]]]]]
          ],
          locals: ["picture"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 2814
            },
            "end": {
              "line": 1,
              "column": 3004
            }
          },
          "moduleName": "uiux/templates/manager/inventories/cell.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","batch.pictures",["loc",[null,[1,2856],[1,2870]]]]],[],0,null,["loc",[null,[1,2848],[1,3004]]]]
        ],
        locals: ["batch"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3206
          }
        },
        "moduleName": "uiux/templates/manager/inventories/cell.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("storage cell # ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row info");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-6");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("storage cell # ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-footer");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" batch(es) stored here");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12 col-sm-12 col-md-12 col-lg-6");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("storage cell # ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-footer");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" appointment(s) here");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [0, 0]);
        var element5 = dom.childAt(element3, [1, 0]);
        var element6 = dom.childAt(fragment, [4, 0]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [0, 1]),0,0);
        morphs[3] = dom.createMorphAt(element4,1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [2, 0]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element5, [0, 1]),0,0);
        morphs[6] = dom.createMorphAt(element5,1,1);
        morphs[7] = dom.createMorphAt(dom.childAt(element5, [2, 0]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
        morphs[9] = dom.createElementMorph(element6);
        return morphs;
      },
      statements: [
        ["content","model.nameOrId",["loc",[null,[1,80],[1,98]]]],
        ["block","link-to",["manager.inventories.index",["subexpr","query-params",[],["active",["get","model.id",["loc",[null,[1,210],[1,218]]]]],["loc",[null,[1,189],[1,219]]]]],["class","btn btn-lg btn-default"],0,null,["loc",[null,[1,150],[1,357]]]],
        ["content","model.nameOrId",["loc",[null,[1,559],[1,577]]]],
        ["block","if",[["get","model.batches",["loc",[null,[1,596],[1,609]]]]],[],1,2,["loc",[null,[1,590],[1,1532]]]],
        ["inline","num",[["get","model.batches.length",["loc",[null,[1,1581],[1,1601]]]]],[],["loc",[null,[1,1575],[1,1603]]]],
        ["content","model.nameOrId",["loc",[null,[1,1818],[1,1836]]]],
        ["block","if",[["get","model.batchesCollection.uniqAppointments",["loc",[null,[1,1855],[1,1895]]]]],[],3,4,["loc",[null,[1,1849],[1,2648]]]],
        ["inline","num",[["get","model.batchesCollection.uniqAppointments.length",["loc",[null,[1,2697],[1,2744]]]]],[],["loc",[null,[1,2691],[1,2746]]]],
        ["block","each",[["get","model.batches",["loc",[null,[1,2822],[1,2835]]]]],[],5,null,["loc",[null,[1,2814],[1,3013]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,3048],[1,3082]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('uiux/templates/manager/inventories/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 313
          }
        },
        "moduleName": "uiux/templates/manager/inventories/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("inventory stoarge overview");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 0]);
        var morphs = new Array(2);
        morphs[0] = dom.createUnsafeMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["inline","partial",["manager/inventories/panel-group"],[],["loc",[null,[1,79],[1,126]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,155],[1,189]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 569
          }
        },
        "moduleName": "uiux/templates/manager/loading.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-6 col-md-8 col-sm-10 col-xs-12 col-lg-offset-3 col-md-offset-2 col-sm-offset-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","statuses-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa");
        var el9 = dom.createTextNode("currently loading");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","progress");
        var el8 = dom.createElement("div");
        dom.setAttribute(el8,"role","progressbar");
        dom.setAttribute(el8,"aria-valuenow","100");
        dom.setAttribute(el8,"aria-valuemin","0");
        dom.setAttribute(el8,"aria-valuemax","100");
        dom.setAttribute(el8,"style","width: 100%");
        dom.setAttribute(el8,"class","progress-bar progress-bar-striped active");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","sr-only");
        var el10 = dom.createTextNode("now loading");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/reports', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 465
          }
        },
        "moduleName": "uiux/templates/manager/reports.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","reports-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa capitalize");
        var el9 = dom.createTextNode("warehouse report");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createUnsafeMorphAt(element0,2,2);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,223],[1,257]]]],
        ["content","outlet",["loc",[null,[1,417],[1,429]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/reports/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 45
              },
              "end": {
                "line": 1,
                "column": 158
              }
            },
            "moduleName": "uiux/templates/manager/reports/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("the starting date");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 176
              },
              "end": {
                "line": 1,
                "column": 286
              }
            },
            "moduleName": "uiux/templates/manager/reports/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("the end date");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 486
            }
          },
          "moduleName": "uiux/templates/manager/reports/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","actions");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"target","blank");
          dom.setAttribute(el2,"class","btn btn-success btn-lg btn-hover");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3,"class","fa fa-check");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","capitalize bold");
          var el4 = dom.createTextNode("generate");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [2, 0]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createAttrMorph(element0, 'href');
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","em-form-input",[],["name","startAt","label","start date","type","date"],0,null,["loc",[null,[1,45],[1,176]]]],
          ["block","em-form-input",[],["name","finishAt","label","finish date","type","date"],1,null,["loc",[null,[1,176],[1,304]]]],
          ["attribute","href",["get","reportLink",["loc",[null,[1,335],[1,345]]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 502
          }
        },
        "moduleName": "uiux/templates/manager/reports/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","em-form-for",[],["action","create","model",["subexpr","@mut",[["get","report",["loc",[null,[1,37],[1,43]]]]],[],[]]],0,null,["loc",[null,[1,0],[1,502]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/manager/settings', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 508
            },
            "end": {
              "line": 1,
              "column": 638
            }
          },
          "moduleName": "uiux/templates/manager/settings.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-times");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","prespace upcase");
          var el2 = dom.createTextNode("dismiss");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 698
          }
        },
        "moduleName": "uiux/templates/manager/settings.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-6 col-md-8 col-sm-10 col-xs-12 col-lg-offset-3 col-md-offset-2 col-sm-offset-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","statuses-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa");
        var el9 = dom.createTextNode("status overview");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","row");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","row");
        var el8 = dom.createElement("div");
        dom.setAttribute(el8,"class","col-xs-12 actions");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createUnsafeMorphAt(dom.childAt(element0, [2]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 0]),0,0);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,243],[1,277]]]],
        ["content","outlet",["loc",[null,[1,442],[1,454]]]],
        ["block","link-to",["manager"],["class","btn btn-primary close-button"],0,null,["loc",[null,[1,508],[1,650]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/manager/settings/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1582
            },
            "end": {
              "line": 1,
              "column": 1862
            }
          },
          "moduleName": "uiux/templates/manager/settings/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("h4");
          dom.setAttribute(el1,"class","list-group-item-heading");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-sign-out");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","capitalize prespace bold");
          var el3 = dom.createTextNode(" exit");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","list-group-item-text");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("Exits the manager application to the title screen");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1886
          }
        },
        "moduleName": "uiux/templates/manager/settings/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-lg-12 col-md-12 col-sm-12 col-xs-12");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","/config");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4,"class","list-group-item-heading");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-gear");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize prespace bold");
        var el6 = dom.createTextNode("configuration");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","pull-right");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-external-link");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4,"class","list-group-item-text");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("Launches the warehouse configuration application for setting up new warehouses and cameras");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","/account");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4,"class","list-group-item-heading");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-user");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize prespace bold");
        var el6 = dom.createTextNode("account");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","pull-right");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-external-link");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4,"class","list-group-item-text");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("Manage your account and payment details on the Pisource SIMWMS website");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","/documentation");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4,"class","list-group-item-heading");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-tasks");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize prespace bold");
        var el6 = dom.createTextNode("help and docs");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","pull-right");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-external-link");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4,"class","list-group-item-text");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("Guides and documentation to help you make the most of out of SIMWMS");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","/feedback");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4,"class","list-group-item-heading");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-comments-o");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize prespace bold");
        var el6 = dom.createTextNode("feedback");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","pull-right");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-external-link");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4,"class","list-group-item-text");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("Found a bug? Want another feature? Let us know how we can make SIMWMS better");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),4,4);
        return morphs;
      },
      statements: [
        ["block","link-to",["index"],["class","list-group-item"],0,null,["loc",[null,[1,1582],[1,1874]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/manager/station', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 494
            },
            "end": {
              "line": 1,
              "column": 569
            }
          },
          "moduleName": "uiux/templates/manager/station.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("home");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 590
            },
            "end": {
              "line": 1,
              "column": 675
            }
          },
          "moduleName": "uiux/templates/manager/station.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("go to station");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 745
          }
        },
        "moduleName": "uiux/templates/manager/station.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","weight-station-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa");
        var el9 = dom.createTextNode("Weight Station #");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("ul");
        dom.setAttribute(el7,"class","nav nav-pills");
        var el8 = dom.createElement("li");
        dom.setAttribute(el8,"class","active");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("li");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [0]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
        morphs[4] = dom.createUnsafeMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,230],[1,264]]]],
        ["content","model.id",["loc",[null,[1,425],[1,437]]]],
        ["block","link-to",["manager.station",["get","model.id",["loc",[null,[1,523],[1,531]]]]],[],0,null,["loc",[null,[1,494],[1,581]]]],
        ["block","link-to",["stations.station",["get","model.id",["loc",[null,[1,620],[1,628]]]]],[],1,null,["loc",[null,[1,590],[1,687]]]],
        ["content","outlet",["loc",[null,[1,697],[1,709]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/station/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 633
          }
        },
        "moduleName": "uiux/templates/manager/station/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","media");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","live-camera media-left");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media-body");
        var el3 = dom.createElement("dl");
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("status");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("in-use");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("camera");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("live");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("station no.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("workers");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("Jose, Phillip");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        dom.setAttribute(el4,"class","capitalize bold");
        var el5 = dom.createTextNode("truck");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createTextNode("none");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [1, 0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 0, 5]),0,0);
        morphs[2] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["inline","video-proxy",[],["src","assets/doge.webm","class","thumbnail"],["loc",[null,[1,55],[1,111]]]],
        ["content","model.id",["loc",[null,[1,299],[1,311]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,475],[1,509]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/trucks', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 486
          }
        },
        "moduleName": "uiux/templates/manager/trucks.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-10 col-md-12 col-sm-12 col-xs-12 col-lg-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","trucks-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("h2");
        dom.setAttribute(el7,"class","modal-title");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa");
        var el9 = dom.createTextNode("all trucks");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8,"class","fa parantheses");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
        morphs[2] = dom.createUnsafeMorphAt(element0,2,2);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,209],[1,243]]]],
        ["content","model.length",["loc",[null,[1,410],[1,426]]]],
        ["content","outlet",["loc",[null,[1,438],[1,450]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/manager/trucks/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 165
              },
              "end": {
                "line": 1,
                "column": 399
              }
            },
            "moduleName": "uiux/templates/manager/trucks/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa bold capitalize");
            var el2 = dom.createTextNode("truck for appt no.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","prespace");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","parantheses");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
            return morphs;
          },
          statements: [
            ["content","truck.appointmentNumber",["loc",[null,[1,314],[1,341]]]],
            ["content","truck.position",["loc",[null,[1,374],[1,392]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 139
            },
            "end": {
              "line": 1,
              "column": 411
            }
          },
          "moduleName": "uiux/templates/manager/trucks/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["manager.trucks.truck",["get","truck.id",["loc",[null,[1,199],[1,207]]]]],["class","list-group-item"],0,null,["loc",[null,[1,165],[1,411]]]]
        ],
        locals: ["truck"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 411
            },
            "end": {
              "line": 1,
              "column": 508
            }
          },
          "moduleName": "uiux/templates/manager/trucks/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa capitalize");
          var el3 = dom.createTextNode("no truck is on site");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 529
          }
        },
        "moduleName": "uiux/templates/manager/trucks/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("trucks on site");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[1,147],[1,152]]]]],[],0,1,["loc",[null,[1,139],[1,517]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/manager/trucks/truck', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 226
            },
            "end": {
              "line": 1,
              "column": 413
            }
          },
          "moduleName": "uiux/templates/manager/trucks/truck.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-4 col-md-4 col-sm-6 col-xs-6");
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"target","blank");
          var el3 = dom.createElement("img");
          dom.setAttribute(el3,"class","thumbnail");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0, 0]);
          var element1 = dom.childAt(element0, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'href');
          morphs[1] = dom.createAttrMorph(element1, 'src');
          return morphs;
        },
        statements: [
          ["attribute","href",["get","pic.normal",["loc",[null,[1,330],[1,340]]]]],
          ["attribute","src",["get","pic.thumbnail",["loc",[null,[1,369],[1,382]]]]]
        ],
        locals: ["pic"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 413
            },
            "end": {
              "line": 1,
              "column": 499
            }
          },
          "moduleName": "uiux/templates/manager/trucks/truck.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-xs-12");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","notice");
          var el3 = dom.createTextNode("no pictures available");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1651
          }
        },
        "moduleName": "uiux/templates/manager/trucks/truck.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize bold");
        var el4 = dom.createTextNode("truck from appt no.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa prespace");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa bold colon capitalize");
        var el5 = dom.createTextNode("arrived at");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa prespace");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa bold colon capitalize");
        var el5 = dom.createTextNode("license plate");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa prespace");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa bold colon capitalize");
        var el5 = dom.createTextNode("location");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa prespace");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa bold colon capitalize");
        var el5 = dom.createTextNode("origin");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa prespace");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa bold colon capitalize");
        var el5 = dom.createTextNode("description");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa prespace");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group-item");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa bold colon capitalize");
        var el5 = dom.createTextNode("notes");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa prespace");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [2]);
        var element4 = dom.childAt(fragment, [1, 0]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1, 0]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [0, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [1, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [2, 1]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [3, 1]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [4, 1]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(element3, [5, 1]),0,0);
        morphs[8] = dom.createElementMorph(element4);
        return morphs;
      },
      statements: [
        ["content","model.appointmentNumber",["loc",[null,[1,145],[1,172]]]],
        ["block","each",[["get","model.weighticket.pictures",["loc",[null,[1,234],[1,260]]]]],[],0,1,["loc",[null,[1,226],[1,508]]]],
        ["content","model.arrivedAtAgo",["loc",[null,[1,655],[1,677]]]],
        ["content","model.weighticket.licensePlate",["loc",[null,[1,804],[1,838]]]],
        ["content","model.position",["loc",[null,[1,960],[1,978]]]],
        ["content","model.appointment.company",["loc",[null,[1,1098],[1,1127]]]],
        ["content","model.appointment.materialDescription",["loc",[null,[1,1252],[1,1293]]]],
        ["content","model.weighticket.notes",["loc",[null,[1,1412],[1,1439]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,1493],[1,1527]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/message', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 385
          }
        },
        "moduleName": "uiux/templates/message.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","message-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createUnsafeMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,223],[1,257]]]],
        ["content","outlet",["loc",[null,[1,337],[1,349]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/message/miscellanious', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 70
            },
            "end": {
              "line": 1,
              "column": 135
            }
          },
          "moduleName": "uiux/templates/message/miscellanious.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-circle-o text-success");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 142
            },
            "end": {
              "line": 1,
              "column": 207
            }
          },
          "moduleName": "uiux/templates/message/miscellanious.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning text-warning");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 214
            },
            "end": {
              "line": 1,
              "column": 276
            }
          },
          "moduleName": "uiux/templates/message/miscellanious.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-bomb text-danger");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 333
            },
            "end": {
              "line": 1,
              "column": 412
            }
          },
          "moduleName": "uiux/templates/message/miscellanious.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,387],[1,401]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 683
          }
        },
        "moduleName": "uiux/templates/message/miscellanious.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-info-circle text-primary");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-success close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [3, 0]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,2,2);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [4]),0,0);
        morphs[4] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2, 0]),0,0);
        morphs[6] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.isUpdate",["loc",[null,[1,76],[1,90]]]]],[],0,null,["loc",[null,[1,70],[1,142]]]],
        ["block","if",[["get","model.isWarning",["loc",[null,[1,148],[1,163]]]]],[],1,null,["loc",[null,[1,142],[1,214]]]],
        ["block","if",[["get","model.isBreaking",["loc",[null,[1,220],[1,236]]]]],[],2,null,["loc",[null,[1,214],[1,283]]]],
        ["content","model.tickerTitle",["loc",[null,[1,300],[1,321]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,339],[1,349]]]]],[],3,null,["loc",[null,[1,333],[1,419]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,458],[1,480]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,521],[1,559]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('uiux/templates/message/problem', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 112
            },
            "end": {
              "line": 1,
              "column": 191
            }
          },
          "moduleName": "uiux/templates/message/problem.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,166],[1,180]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 224
            },
            "end": {
              "line": 1,
              "column": 334
            }
          },
          "moduleName": "uiux/templates/message/problem.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("go to problem site");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 606
          }
        },
        "moduleName": "uiux/templates/message/problem.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-bomb text-danger");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","outbound-link");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-warning close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","upcase");
        var el4 = dom.createTextNode("resolve");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 0]),0,0);
        morphs[4] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","model.tickerTitle",["loc",[null,[1,79],[1,100]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,118],[1,128]]]]],[],0,null,["loc",[null,[1,112],[1,198]]]],
        ["block","link-to",[["get","modalName",["loc",[null,[1,235],[1,244]]]],["get","model.permalink",["loc",[null,[1,245],[1,260]]]]],[],1,null,["loc",[null,[1,224],[1,346]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,390],[1,412]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,453],[1,491]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/message/truck-arrived-on-site', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 113
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "uiux/templates/message/truck-arrived-on-site.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,167],[1,181]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 225
            },
            "end": {
              "line": 1,
              "column": 326
            }
          },
          "moduleName": "uiux/templates/message/truck-arrived-on-site.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("go to truck");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 598
          }
        },
        "moduleName": "uiux/templates/message/truck-arrived-on-site.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-info text-success");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","outbound-link");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-warning close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 0]),0,0);
        morphs[4] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","model.tickerTitle",["loc",[null,[1,80],[1,101]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,119],[1,129]]]]],[],0,null,["loc",[null,[1,113],[1,199]]]],
        ["block","link-to",["truck",["get","model.permalink",["loc",[null,[1,244],[1,259]]]]],[],1,null,["loc",[null,[1,225],[1,338]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,382],[1,404]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,445],[1,483]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/message/truck-at-exit-station', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 113
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "uiux/templates/message/truck-at-exit-station.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,167],[1,181]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 463
          }
        },
        "moduleName": "uiux/templates/message/truck-at-exit-station.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-info text-success");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-success close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 0]),0,0);
        morphs[3] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","model.tickerTitle",["loc",[null,[1,80],[1,101]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,119],[1,129]]]]],[],0,null,["loc",[null,[1,113],[1,199]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,238],[1,260]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,301],[1,339]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/message/truck-at-loading-dock', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 113
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "uiux/templates/message/truck-at-loading-dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,167],[1,181]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 225
            },
            "end": {
              "line": 1,
              "column": 324
            }
          },
          "moduleName": "uiux/templates/message/truck-at-loading-dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("go to dock");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 605
          }
        },
        "moduleName": "uiux/templates/message/truck-at-loading-dock.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-info text-success");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","outbound-link");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-success close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 0]),0,0);
        morphs[4] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","model.tickerTitle",["loc",[null,[1,80],[1,101]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,119],[1,129]]]]],[],0,null,["loc",[null,[1,113],[1,199]]]],
        ["block","link-to",["barn",["get","model.permalink",["loc",[null,[1,243],[1,258]]]]],[],1,null,["loc",[null,[1,225],[1,336]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,380],[1,402]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,443],[1,481]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/message/truck-has-left-site', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 113
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "uiux/templates/message/truck-has-left-site.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,167],[1,181]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 463
          }
        },
        "moduleName": "uiux/templates/message/truck-has-left-site.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-info text-success");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-success close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 0]),0,0);
        morphs[3] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","model.tickerTitle",["loc",[null,[1,80],[1,101]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,119],[1,129]]]]],[],0,null,["loc",[null,[1,113],[1,199]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,238],[1,260]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,301],[1,339]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/message/truck-left-dock-is-free', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 113
            },
            "end": {
              "line": 1,
              "column": 192
            }
          },
          "moduleName": "uiux/templates/message/truck-left-dock-is-free.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,167],[1,181]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 225
            },
            "end": {
              "line": 1,
              "column": 324
            }
          },
          "moduleName": "uiux/templates/message/truck-left-dock-is-free.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("go to dock");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 605
          }
        },
        "moduleName": "uiux/templates/message/truck-left-dock-is-free.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-info text-success");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","outbound-link");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-success close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 0]),0,0);
        morphs[4] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","model.tickerTitle",["loc",[null,[1,80],[1,101]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,119],[1,129]]]]],[],0,null,["loc",[null,[1,113],[1,199]]]],
        ["block","link-to",["barn",["get","model.permalink",["loc",[null,[1,243],[1,258]]]]],[],1,null,["loc",[null,[1,225],[1,336]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,380],[1,402]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,443],[1,481]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/message/truck-waiting-for-free-dock', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 112
            },
            "end": {
              "line": 1,
              "column": 191
            }
          },
          "moduleName": "uiux/templates/message/truck-waiting-for-free-dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","message");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.note",["loc",[null,[1,166],[1,180]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 224
            },
            "end": {
              "line": 1,
              "column": 334
            }
          },
          "moduleName": "uiux/templates/message/truck-waiting-for-free-dock.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("go to problem site");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 606
          }
        },
        "moduleName": "uiux/templates/message/truck-waiting-for-free-dock.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","fa fa-bomb text-danger");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","outbound-link");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h6");
        dom.setAttribute(el1,"class","subheader");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-warning close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-check");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","upcase");
        var el4 = dom.createTextNode("resolve");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 0]),0,0);
        morphs[4] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["content","model.tickerTitle",["loc",[null,[1,79],[1,100]]]],
        ["block","if",[["get","model.note",["loc",[null,[1,118],[1,128]]]]],[],0,null,["loc",[null,[1,112],[1,198]]]],
        ["block","link-to",[["get","modalName",["loc",[null,[1,235],[1,244]]]],["get","model.permalink",["loc",[null,[1,245],[1,260]]]]],[],1,null,["loc",[null,[1,224],[1,346]]]],
        ["content","model.createdAtAgo",["loc",[null,[1,390],[1,412]]]],
        ["element","action",["resolveMessage"],["on","click"],["loc",[null,[1,453],[1,491]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/messages', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 386
          }
        },
        "moduleName": "uiux/templates/messages.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","modal-background");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-container");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"id","messages-modal");
        dom.setAttribute(el6,"class","modal-box");
        var el7 = dom.createElement("div");
        dom.setAttribute(el7,"class","close-button-top pointer close-button");
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-times");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createUnsafeMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,224],[1,258]]]],
        ["content","outlet",["loc",[null,[1,338],[1,350]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/messages/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 179
                },
                "end": {
                  "line": 1,
                  "column": 246
                }
              },
              "moduleName": "uiux/templates/messages/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-circle-o text-success");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 253
                },
                "end": {
                  "line": 1,
                  "column": 323
                }
              },
              "moduleName": "uiux/templates/messages/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-info-circle text-primary");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 330
                },
                "end": {
                  "line": 1,
                  "column": 397
                }
              },
              "moduleName": "uiux/templates/messages/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-warning text-warning");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 404
                },
                "end": {
                  "line": 1,
                  "column": 468
                }
              },
              "moduleName": "uiux/templates/messages/index.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-bomb text-danger");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 122
              },
              "end": {
                "line": 1,
                "column": 686
              }
            },
            "moduleName": "uiux/templates/messages/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","dash bold prespace");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","kill pointer");
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","fa fa-trash fa-lg");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [6]);
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
            morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
            morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4]),0,0);
            morphs[5] = dom.createMorphAt(dom.childAt(fragment, [5]),0,0);
            morphs[6] = dom.createElementMorph(element0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [
            ["block","if",[["get","message.isUpdate",["loc",[null,[1,185],[1,201]]]]],[],0,null,["loc",[null,[1,179],[1,253]]]],
            ["block","if",[["get","message.isNotice",["loc",[null,[1,259],[1,275]]]]],[],1,null,["loc",[null,[1,253],[1,330]]]],
            ["block","if",[["get","message.isWarning",["loc",[null,[1,336],[1,353]]]]],[],2,null,["loc",[null,[1,330],[1,404]]]],
            ["block","if",[["get","message.isBreaking",["loc",[null,[1,410],[1,428]]]]],[],3,null,["loc",[null,[1,404],[1,475]]]],
            ["content","message.createdAtAgo",["loc",[null,[1,508],[1,532]]]],
            ["content","message.tickerTitle",["loc",[null,[1,545],[1,568]]]],
            ["element","action",["killMessage",["get","message",["loc",[null,[1,604],[1,611]]]]],["on","click"],["loc",[null,[1,581],[1,624]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 94
            },
            "end": {
              "line": 1,
              "column": 698
            }
          },
          "moduleName": "uiux/templates/messages/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["message",["get","message.id",["loc",[null,[1,143],[1,153]]]]],["class","list-group-item"],0,null,["loc",[null,[1,122],[1,698]]]]
        ],
        locals: ["message"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 906
          }
        },
        "moduleName": "uiux/templates/messages/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("messages overview");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","actions");
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary close-button");
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-times");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","prespace upcase");
        var el4 = dom.createTextNode("dismiss      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2, 0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        morphs[1] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[1,102],[1,107]]]]],[],0,null,["loc",[null,[1,94],[1,707]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,742],[1,776]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/modals/barn', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 987
          }
        },
        "moduleName": "uiux/templates/modals/barn.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"id","barn-modal");
        dom.setAttribute(el4,"class","modal-box");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","close-button-top pointer close-button");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-times");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5,"class","modal-title");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createTextNode("barn no. 3");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","media");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","live-camera media-left");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","media-body");
        var el7 = dom.createElement("dl");
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("status");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("available");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("camera");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("live");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("dock no.");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("3");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("workers");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("Jose, Phillip");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("truck");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("none");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","actions");
        var el6 = dom.createElement("button");
        dom.setAttribute(el6,"class","btn btn-primary close-button");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7,"class","fa fa-times");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","prespace upcase");
        var el8 = dom.createTextNode("dismiss");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [3, 0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [2, 0]),0,0);
        morphs[2] = dom.createElementMorph(element2);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,164],[1,198]]]],
        ["inline","video-proxy",[],["src","assets/doge.webm","class","thumbnail"],["loc",[null,[1,396],[1,452]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,805],[1,839]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/modals/marker', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1315
          }
        },
        "moduleName": "uiux/templates/modals/marker.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"id","marker-modal");
        dom.setAttribute(el4,"class","modal-box");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","close-button-top pointer close-button");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-times");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5,"class","modal-title");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createTextNode("Acme Co. Truck");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","media");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","live-shot media-left");
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"src","images/license-plate.jpg");
        dom.setAttribute(el7,"class","thumbnail");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","media-body");
        var el7 = dom.createElement("dl");
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("origin");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("Acme Co.");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("status");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("appointment number");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("destination");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa");
        var el10 = dom.createTextNode("dock");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("weight");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa");
        var el10 = dom.createComment("");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("span");
        dom.setAttribute(el9,"class","fa");
        var el10 = dom.createTextNode("lbs");
        dom.appendChild(el9, el10);
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("cargo");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("driver");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("Ed Smith");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","actions");
        var el6 = dom.createElement("button");
        dom.setAttribute(el6,"class","btn btn-primary close-button");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7,"class","fa fa-times");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","prespace upcase");
        var el8 = dom.createTextNode("dismiss");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [2, 1, 0]);
        var element3 = dom.childAt(element0, [3, 0]);
        var morphs = new Array(7);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [7, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [9, 0]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [11]),0,0);
        morphs[6] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,166],[1,200]]]],
        ["content","model.status",["loc",[null,[1,587],[1,603]]]],
        ["content","model.appointmentNumber",["loc",[null,[1,663],[1,690]]]],
        ["content","model.destiny.dockNumber",["loc",[null,[1,788],[1,816]]]],
        ["content","model.weighticket.pounds",["loc",[null,[1,888],[1,916]]]],
        ["content","model.materialDescription",["loc",[null,[1,997],[1,1026]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,1133],[1,1167]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/modals/weight-station', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1270
          }
        },
        "moduleName": "uiux/templates/modals/weight-station.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-8 col-md-10 col-sm-12 col-xs-12 col-lg-push-2 col-md-push-1");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"id","weight-station-modal");
        dom.setAttribute(el4,"class","modal-box");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","close-button-top pointer close-button");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-times");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5,"class","modal-title");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createTextNode("Weight Station #1");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","media");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","live-camera media-left");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","media-body");
        var el7 = dom.createElement("dl");
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("status");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("in-use");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("camera");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("live");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("station no.");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("1");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("workers");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("Jose, Phillip");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dt");
        dom.setAttribute(el8,"class","capitalize bold");
        var el9 = dom.createTextNode("truck");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("dd");
        var el9 = dom.createTextNode("none");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","form-group");
        var el7 = dom.createElement("label");
        dom.setAttribute(el7,"class","capitalize bold");
        var el8 = dom.createTextNode("appointment number");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","form-group");
        var el7 = dom.createElement("label");
        dom.setAttribute(el7,"class","capitalize bold");
        var el8 = dom.createTextNode("weight");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","actions");
        var el6 = dom.createElement("button");
        dom.setAttribute(el6,"class","btn btn-primary close-button");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7,"class","fa fa-times");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","prespace upcase");
        var el8 = dom.createTextNode("dismiss");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element0, [4, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [2, 0]),0,0);
        morphs[2] = dom.createUnsafeMorphAt(dom.childAt(element2, [0]),1,1);
        morphs[3] = dom.createUnsafeMorphAt(dom.childAt(element2, [1]),1,1);
        morphs[4] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,174],[1,208]]]],
        ["inline","video-proxy",[],["src","assets/doge.webm","class","thumbnail"],["loc",[null,[1,413],[1,469]]]],
        ["inline","input",[],["type","email","class","form-control"],["loc",[null,[1,880],[1,925]]]],
        ["inline","input",[],["type","number","class","form-control"],["loc",[null,[1,1000],[1,1046]]]],
        ["element","action",["closeModal"],["on","click"],["loc",[null,[1,1088],[1,1122]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/sessions/_login', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 82
            },
            "end": {
              "line": 1,
              "column": 201
            }
          },
          "moduleName": "uiux/templates/sessions/_login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-institution");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("manager overview");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 213
            },
            "end": {
              "line": 1,
              "column": 321
            }
          },
          "moduleName": "uiux/templates/sessions/_login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-truck");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("loading docks");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 333
            },
            "end": {
              "line": 1,
              "column": 445
            }
          },
          "moduleName": "uiux/templates/sessions/_login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-bell");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("weight stations");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 457
            },
            "end": {
              "line": 1,
              "column": 566
            }
          },
          "moduleName": "uiux/templates/sessions/_login.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-pencil");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("logistics");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 584
          }
        },
        "moduleName": "uiux/templates/sessions/_login.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"class","modal-title");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","fa");
        var el3 = dom.createTextNode("Login");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,2,2);
        morphs[3] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["block","link-to",["manager"],["class","list-group-item"],0,null,["loc",[null,[1,82],[1,213]]]],
        ["block","link-to",["docks"],["class","list-group-item"],1,null,["loc",[null,[1,213],[1,333]]]],
        ["block","link-to",["stations"],["class","list-group-item"],2,null,["loc",[null,[1,333],[1,457]]]],
        ["block","link-to",["logistics"],["class","list-group-item"],3,null,["loc",[null,[1,457],[1,578]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('uiux/templates/sessions/_setup', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 225
          }
        },
        "moduleName": "uiux/templates/sessions/_setup.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","progress");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"role","progressbar");
        dom.setAttribute(el2,"aria-valuenow","100");
        dom.setAttribute(el2,"aria-valuemin","0");
        dom.setAttribute(el2,"aria-valuemax","100");
        dom.setAttribute(el2,"style","width: 100%");
        dom.setAttribute(el2,"class","progress-bar progress-bar-striped active");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","sr-only");
        var el4 = dom.createTextNode("now loading");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/stations', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 77
            },
            "end": {
              "line": 1,
              "column": 179
            }
          },
          "moduleName": "uiux/templates/stations.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize bold");
          var el2 = dom.createTextNode("weight stations index");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 235
            },
            "end": {
              "line": 1,
              "column": 285
            }
          },
          "moduleName": "uiux/templates/stations.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 661
          }
        },
        "moduleName": "uiux/templates/stations.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","main-nav");
        var el2 = dom.createElement("nav");
        dom.setAttribute(el2,"class","navbar navbar-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","nav navbar-nav navbar-right");
        var el5 = dom.createElement("li");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","stations-application");
        dom.setAttribute(el1,"class","non-manager-application");
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"id","scale-info");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("footer");
        dom.setAttribute(el2,"id","non-manager-footer");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","col-xs-12");
        var el6 = dom.createElement("h4");
        dom.setAttribute(el6,"class","footer-title");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa");
        var el8 = dom.createTextNode("weight stations");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 0]),0,0);
        morphs[2] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1, 0, 0]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["stations"],["class","navbar-brand"],0,null,["loc",[null,[1,77],[1,191]]]],
        ["block","link-to",["index"],[],1,null,["loc",[null,[1,235],[1,297]]]],
        ["content","outlet",["loc",[null,[1,436],[1,448]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/stations/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 119
              },
              "end": {
                "line": 1,
                "column": 564
              }
            },
            "moduleName": "uiux/templates/stations/index.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","list-group-item-heading");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa capitalize");
            var el3 = dom.createTextNode("weight scale -");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa capitalize");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1,"class","list-group-item-text");
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","bold colon");
            var el4 = dom.createTextNode("station number");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","prespace");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","bold colon");
            var el4 = dom.createTextNode("status");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","prespace");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
            return morphs;
          },
          statements: [
            ["content","station.tileName",["loc",[null,[1,299],[1,319]]]],
            ["content","station.id",["loc",[null,[1,438],[1,452]]]],
            ["content","station.status",["loc",[null,[1,529],[1,547]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 17
            },
            "end": {
              "line": 1,
              "column": 588
            }
          },
          "moduleName": "uiux/templates/stations/index.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-xs-12 col-sm-6 col-md-4 col-lg-4");
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","list-group");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),0,0);
          return morphs;
        },
        statements: [
          ["block","link-to",["stations.station",["get","station.id",["loc",[null,[1,149],[1,159]]]]],["class","list-group-item"],0,null,["loc",[null,[1,119],[1,576]]]]
        ],
        locals: ["station"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 588
            },
            "end": {
              "line": 1,
              "column": 699
            }
          },
          "moduleName": "uiux/templates/stations/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-xs-12");
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2,"class","error-message");
          var el3 = dom.createTextNode("you haven't placed any weight stations yet!");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 714
          }
        },
        "moduleName": "uiux/templates/stations/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","model",["loc",[null,[1,25],[1,30]]]]],[],0,1,["loc",[null,[1,17],[1,708]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/stations/station', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 76
            },
            "end": {
              "line": 1,
              "column": 215
            }
          },
          "moduleName": "uiux/templates/stations/station.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-dashboard");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("dash");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 227
            },
            "end": {
              "line": 1,
              "column": 366
            }
          },
          "moduleName": "uiux/templates/stations/station.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-camera");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("camera");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 378
            },
            "end": {
              "line": 1,
              "column": 520
            }
          },
          "moduleName": "uiux/templates/stations/station.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa nav-title");
          var el2 = dom.createTextNode("problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 585
          }
        },
        "moduleName": "uiux/templates/stations/station.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group btn-group-lg");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,2,2);
        morphs[3] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["stations.station.index",["get","model.id",["loc",[null,[1,112],[1,120]]]]],["class","btn btn-default"],0,null,["loc",[null,[1,76],[1,227]]]],
        ["block","link-to",["stations.station.status",["get","model.id",["loc",[null,[1,264],[1,272]]]]],["class","btn btn-default"],1,null,["loc",[null,[1,227],[1,378]]]],
        ["block","link-to",["stations.station.problem",["get","model.id",["loc",[null,[1,416],[1,424]]]]],["class","btn btn-default"],2,null,["loc",[null,[1,378],[1,532]]]],
        ["content","outlet",["loc",[null,[1,567],[1,579]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/stations/station/_entrance', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 684
                },
                "end": {
                  "line": 1,
                  "column": 776
                }
              },
              "moduleName": "uiux/templates/stations/station/_entrance.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-truck");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","fa");
              var el2 = dom.createTextNode("on site");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.5",
              "loc": {
                "source": null,
                "start": {
                  "line": 1,
                  "column": 776
                },
                "end": {
                  "line": 1,
                  "column": 830
                }
              },
              "moduleName": "uiux/templates/stations/station/_entrance.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","fa");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
              return morphs;
            },
            statements: [
              ["content","appointment.status",["loc",[null,[1,801],[1,823]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 490
              },
              "end": {
                "line": 1,
                "column": 1190
              }
            },
            "moduleName": "uiux/templates/stations/station/_entrance.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("td");
            dom.setAttribute(el1,"data-label","status");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1,"data-label","appointment number");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1,"data-label","company");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1,"data-label","material description");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1,"data-label","ETA");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1, 0]),0,0);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 0]),0,0);
            morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3, 0]),0,0);
            morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4, 0]),0,0);
            return morphs;
          },
          statements: [
            ["block","if",[["get","appointment.hasTruckOnSite",["loc",[null,[1,690],[1,716]]]]],[],0,1,["loc",[null,[1,684],[1,837]]]],
            ["content","appointment.permalink",["loc",[null,[1,895],[1,920]]]],
            ["content","appointment.company",["loc",[null,[1,974],[1,997]]]],
            ["content","appointment.materialDescription",["loc",[null,[1,1064],[1,1099]]]],
            ["content","appointment.expectedAtAgo",["loc",[null,[1,1149],[1,1178]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 451
            },
            "end": {
              "line": 1,
              "column": 1202
            }
          },
          "moduleName": "uiux/templates/stations/station/_entrance.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["stations.station.weightickets.new",["get","station.id",["loc",[null,[1,537],[1,547]]]],["subexpr","query-params",[],["appointment",["get","appointment.id",["loc",[null,[1,574],[1,588]]]]],["loc",[null,[1,548],[1,589]]]]],["tagName","tr","classNames","pointer","data-appointment-id",["subexpr","@mut",[["get","appointment.id",["loc",[null,[1,644],[1,658]]]]],[],[]]],0,null,["loc",[null,[1,490],[1,1202]]]]
        ],
        locals: ["appointment"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1239
          }
        },
        "moduleName": "uiux/templates/stations/station/_entrance.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("expected appointment");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","capitalize");
        var el4 = dom.createTextNode("we are currently expecting the following appointments");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","table responsive-table table-hover appointments");
        var el4 = dom.createElement("thead");
        var el5 = dom.createElement("tr");
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("status");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("appointment number");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("company");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("material description");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createTextNode("ETA");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1, 1]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","appointments",["loc",[null,[1,459],[1,471]]]]],[],0,null,["loc",[null,[1,451],[1,1211]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/stations/station/_exit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 482
            },
            "end": {
              "line": 1,
              "column": 786
            }
          },
          "moduleName": "uiux/templates/stations/station/_exit.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1,"class","pointer");
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element0, 'data-truck-id');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [0]),0,0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
          morphs[5] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
          morphs[6] = dom.createMorphAt(dom.childAt(element0, [4]),0,0);
          return morphs;
        },
        statements: [
          ["attribute","data-truck-id",["get","truck.id",["loc",[null,[1,529],[1,537]]]]],
          ["element","action",["depart",["get","truck",["loc",[null,[1,558],[1,563]]]]],["on","click"],["loc",[null,[1,540],[1,576]]]],
          ["content","truck.appointment.permalink",["loc",[null,[1,597],[1,628]]]],
          ["content","truck.appointment.company",["loc",[null,[1,637],[1,666]]]],
          ["content","truck.appointment.materialDescription",["loc",[null,[1,675],[1,716]]]],
          ["inline","ago",[["get","truck.undockedAt",["loc",[null,[1,731],[1,747]]]]],[],["loc",[null,[1,725],[1,749]]]],
          ["content","truck.position",["loc",[null,[1,758],[1,776]]]]
        ],
        locals: ["truck"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 823
          }
        },
        "moduleName": "uiux/templates/stations/station/_exit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default instructions-set");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("exiting trucks");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","capitalize");
        var el4 = dom.createTextNode("the following trucks are trying to leave");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","table table-hover");
        var el4 = dom.createElement("thead");
        var el5 = dom.createElement("tr");
        var el6 = dom.createElement("th");
        dom.setAttribute(el6,"class","capitalize");
        var el7 = dom.createTextNode("appt no");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6,"class","capitalize");
        var el7 = dom.createTextNode("origin");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6,"class","capitalize");
        var el7 = dom.createTextNode("material");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6,"class","capitalize");
        var el7 = dom.createTextNode("arrival time");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        dom.setAttribute(el6,"class","capitalize");
        var el7 = dom.createTextNode("status");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1, 1]),0,0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","trucks",["loc",[null,[1,490],[1,496]]]]],[],0,null,["loc",[null,[1,482],[1,795]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/stations/station/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 107
          }
        },
        "moduleName": "uiux/templates/stations/station/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createUnsafeMorphAt(element0,0,0);
        morphs[1] = dom.createUnsafeMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["inline","partial",["stations/station/entrance"],[],["loc",[null,[1,23],[1,64]]]],
        ["inline","partial",["stations/station/exit"],[],["loc",[null,[1,64],[1,101]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/stations/station/status', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1757
          }
        },
        "moduleName": "uiux/templates/stations/station/status.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el2 = dom.createElement("h3");
        dom.setAttribute(el2,"class","section-title");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("scale station#");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el4 = dom.createElement("dl");
        var el5 = dom.createElement("dt");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","dt-title fa");
        var el7 = dom.createTextNode("camera status");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-check");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createTextNode("live");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","dt-title fa");
        var el7 = dom.createTextNode("scale status");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-check");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","dt-title fa");
        var el7 = dom.createTextNode("data id");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-6 col-md-6 col-sm-12 col-xs-12");
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-block btn-lg btn-danger btn-hover");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-warning");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("report problem");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2,"class","subsection-title");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa capitalize");
        var el4 = dom.createTextNode("station employees");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-left");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/doge.jpg");
        dom.setAttribute(el4,"class","media-object thumbnail mugshot");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-body");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","media-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa employee-name");
        var el6 = dom.createTextNode("Leonard Nimoy");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","status-info");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize bold colon");
        var el6 = dom.createTextNode("status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","prespace");
        var el6 = dom.createTextNode("dead");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","media");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-left");
        var el4 = dom.createElement("img");
        dom.setAttribute(el4,"src","images/doge2.jpg");
        dom.setAttribute(el4,"class","media-object thumbnail mugshot");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","media-body");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","media-heading");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa employee-name");
        var el6 = dom.createTextNode("William Shatner");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","status-info");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize bold colon");
        var el6 = dom.createTextNode("status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","prespace");
        var el6 = dom.createTextNode("overweight");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [0, 0]);
        var element3 = dom.childAt(element1, [1, 0]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [0, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]),0,0);
        morphs[4] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["inline","video-proxy",[],["src","assets/doge.webm","class","thumbnail scale-camera"],["loc",[null,[1,51],[1,120]]]],
        ["content","model.stationNumber",["loc",[null,[1,269],[1,292]]]],
        ["content","model.status",["loc",[null,[1,597],[1,613]]]],
        ["content","model.id",["loc",[null,[1,678],[1,690]]]],
        ["element","action",["toggleProblemReport"],["on","click"],["loc",[null,[1,765],[1,808]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/stations/station/weightickets/_form', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 365
              },
              "end": {
                "line": 1,
                "column": 529
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("click the video to take picture");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 564
              },
              "end": {
                "line": 1,
                "column": 751
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","col-lg-4 col-md-4 col-sm-6 col-xs-6");
            var el2 = dom.createElement("img");
            dom.setAttribute(el2,"class","thumbnail bound click-to-kill pointer");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0, 0]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [
            ["attribute","src",["get","uri",["loc",[null,[1,693],[1,696]]]]],
            ["element","action",["killPic",["get","uri",["loc",[null,[1,670],[1,673]]]]],["on","click"],["loc",[null,[1,651],[1,686]]]]
          ],
          locals: ["uri"],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 766
              },
              "end": {
                "line": 1,
                "column": 900
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("read this off the truck");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 918
              },
              "end": {
                "line": 1,
                "column": 1047
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("read this off the scale");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1065
              },
              "end": {
                "line": 1,
                "column": 1329
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","fa");
            var el3 = dom.createTextNode("if you don't like my suggestion, please pick a dock yourself ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child5 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1347
              },
              "end": {
                "line": 1,
                "column": 1451
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("extra notes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child6 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1492
              },
              "end": {
                "line": 1,
                "column": 1648
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child7 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 1667
              },
              "end": {
                "line": 1,
                "column": 1836
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-warning");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("report problem");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 1854
            }
          },
          "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","form-input input-section form-group");
          var el2 = dom.createElement("label");
          dom.setAttribute(el2,"class","control-label");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","label-text");
          var el4 = dom.createTextNode("appointment number");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","contents");
          var el3 = dom.createElement("input");
          dom.setAttribute(el3,"disabled","");
          dom.setAttribute(el3,"class","form-control");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","btn-group");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0, 1, 0]);
          var element2 = dom.childAt(fragment, [7]);
          var morphs = new Array(10);
          morphs[0] = dom.createAttrMorph(element1, 'type');
          morphs[1] = dom.createAttrMorph(element1, 'value');
          morphs[2] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
          morphs[4] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,4,4,contextualElement);
          morphs[6] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[7] = dom.createMorphAt(fragment,6,6,contextualElement);
          morphs[8] = dom.createMorphAt(element2,0,0);
          morphs[9] = dom.createMorphAt(element2,1,1);
          return morphs;
        },
        statements: [
          ["attribute","type",["get","text",["loc",[null,[1,278],[1,282]]]]],
          ["attribute","value",["get","model.appointment.permalink",["loc",[null,[1,302],[1,329]]]]],
          ["block","em-form-input",[],["name","dataUris","type","webcam","label","camera pictures","classNames","webcam-240-hack"],0,null,["loc",[null,[1,365],[1,547]]]],
          ["block","each",[["get","model.dataUris",["loc",[null,[1,572],[1,586]]]]],[],1,null,["loc",[null,[1,564],[1,760]]]],
          ["block","em-form-input",[],["name","licensePlate","type","text","label","license plate number"],2,null,["loc",[null,[1,766],[1,918]]]],
          ["block","em-form-input",[],["name","pounds","type","number","label","weight","suffix","lbs"],3,null,["loc",[null,[1,918],[1,1065]]]],
          ["block","em-form-input",[],["name","dock","type","select","label","target loading dock","content",["subexpr","@mut",[["get","dockChoices",["loc",[null,[1,1144],[1,1155]]]]],[],[]],"optionValuePath","value","optionLabelPath","presentation"],4,null,["loc",[null,[1,1065],[1,1347]]]],
          ["block","em-form-input",[],["name","notes","type","textarea","label","notes"],5,null,["loc",[null,[1,1347],[1,1469]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,1516],[1,1521]]]]],[],[]],"classNames","btn btn-success btn-hover btn-lg","type","submit"],6,null,["loc",[null,[1,1492],[1,1667]]]],
          ["block","link-to",["stations.station.problem",["get","model.issuerId",["loc",[null,[1,1705],[1,1719]]]]],["class","btn btn-danger btn-hover btn-lg"],7,null,["loc",[null,[1,1667],[1,1848]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1870
          }
        },
        "moduleName": "uiux/templates/stations/station/weightickets/_form.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","em-form-for",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,21],[1,26]]]]],[],[]],"mistakes",["subexpr","@mut",[["get","mistakes",["loc",[null,[1,36],[1,44]]]]],[],[]],"action","newTicket","classNames","panel-body instruction-line"],0,null,["loc",[null,[1,0],[1,1870]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/stations/station/weightickets/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 367
            },
            "end": {
              "line": 1,
              "column": 514
            }
          },
          "moduleName": "uiux/templates/stations/station/weightickets/new.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("dt");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa bold");
          var el3 = dom.createTextNode("dock no.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa bold");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("dd");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","barn.nameOrId",["loc",[null,[1,461],[1,478]]]],
          ["content","barn.status",["loc",[null,[1,494],[1,509]]]]
        ],
        locals: ["barn"],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 580
              },
              "end": {
                "line": 1,
                "column": 723
              }
            },
            "moduleName": "uiux/templates/stations/station/weightickets/new.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","fa");
            var el2 = dom.createTextNode("print out weight ticket");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 564
            },
            "end": {
              "line": 1,
              "column": 735
            }
          },
          "moduleName": "uiux/templates/stations/station/weightickets/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["stations.weighticket.print",["get","model.id",["loc",[null,[1,620],[1,628]]]]],["classNames","list-group-item instruction-line"],0,null,["loc",[null,[1,580],[1,735]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 735
            },
            "end": {
              "line": 1,
              "column": 842
            }
          },
          "moduleName": "uiux/templates/stations/station/weightickets/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","list-group-item instruction-line");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("print out weight ticket");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 971
          }
        },
        "moduleName": "uiux/templates/stations/station/weightickets/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading instruction-line");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa");
        var el5 = dom.createTextNode("create a weight ticket for the truck");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-xs-12 col-sm-12 col-md-9 col-lg-6");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","hidden-xs hidden-sm col-md-3 col-lg-6");
        var el5 = dom.createElement("dl");
        dom.setAttribute(el5,"class","dl-horizontal");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","list-group-item instruction-line");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("give weight ticket to driver");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createUnsafeMorphAt(dom.childAt(element1, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 0]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
        return morphs;
      },
      statements: [
        ["inline","partial",["stations/station/weightickets/form"],[],["loc",[null,[1,234],[1,284]]]],
        ["block","each",[["get","model.docks",["loc",[null,[1,375],[1,386]]]]],[],0,null,["loc",[null,[1,367],[1,523]]]],
        ["block","if",[["get","model.id",["loc",[null,[1,570],[1,578]]]]],[],1,2,["loc",[null,[1,564],[1,849]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/stations/truck', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 12
          }
        },
        "moduleName": "uiux/templates/stations/truck.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,12]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/stations/truck/complete', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 372
              },
              "end": {
                "line": 1,
                "column": 513
              }
            },
            "moduleName": "uiux/templates/stations/truck/complete.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("read this off the scale");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 612
              },
              "end": {
                "line": 1,
                "column": 721
              }
            },
            "moduleName": "uiux/templates/stations/truck/complete.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","help-block");
            var el2 = dom.createTextNode("additional notes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 762
              },
              "end": {
                "line": 1,
                "column": 932
              }
            },
            "moduleName": "uiux/templates/stations/truck/complete.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("finalize weighticket");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.5",
            "loc": {
              "source": null,
              "start": {
                "line": 1,
                "column": 951
              },
              "end": {
                "line": 1,
                "column": 1110
              }
            },
            "moduleName": "uiux/templates/stations/truck/complete.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-times");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","capitalize");
            var el2 = dom.createTextNode("cancel");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 173
            },
            "end": {
              "line": 1,
              "column": 1128
            }
          },
          "moduleName": "uiux/templates/stations/truck/complete.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("dl");
          var el2 = dom.createElement("dt");
          dom.setAttribute(el2,"class","capitalize");
          var el3 = dom.createTextNode("initial weight");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("dd");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("dl");
          var el2 = dom.createElement("dt");
          dom.setAttribute(el2,"class","capitalize");
          var el3 = dom.createTextNode("net weight");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("dd");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","btn-group");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [4]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2, 1]),0,0);
          morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[4] = dom.createMorphAt(element0,0,0);
          morphs[5] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["content","weighticket.pounds",["loc",[null,[1,340],[1,362]]]],
          ["block","em-form-input",[],["name","finishPounds","type","number","label","final weight","suffix","lbs"],0,null,["loc",[null,[1,372],[1,531]]]],
          ["content","weighticket.netWeight",["loc",[null,[1,577],[1,602]]]],
          ["block","em-form-input",[],["name","notes","type","textarea","label","notes"],1,null,["loc",[null,[1,612],[1,739]]]],
          ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,786],[1,791]]]]],[],[]],"classNames","btn btn-success btn-hover btn-lg","type","submit"],2,null,["loc",[null,[1,762],[1,951]]]],
          ["block","link-to",["stations.truck.departure",["get","model.id",["loc",[null,[1,989],[1,997]]]]],["classNames","btn btn-default btn-hover btn-lg"],3,null,["loc",[null,[1,951],[1,1122]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1156
          }
        },
        "moduleName": "uiux/templates/stations/truck/complete.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading instruction-line");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa capitalize");
        var el5 = dom.createTextNode("complete weighticket information");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]),1,1);
        return morphs;
      },
      statements: [
        ["block","em-form-for",[],["model",["subexpr","@mut",[["get","weighticket",["loc",[null,[1,194],[1,205]]]]],[],[]],"mistakes",["subexpr","@mut",[["get","mistakes",["loc",[null,[1,215],[1,223]]]]],[],[]],"action","completeTicket","classNames","panel-body instruction-line"],0,null,["loc",[null,[1,173],[1,1144]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/stations/truck/departure', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1184
            },
            "end": {
              "line": 1,
              "column": 1352
            }
          },
          "moduleName": "uiux/templates/stations/truck/departure.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-book");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("weigh truck first");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1364
            },
            "end": {
              "line": 1,
              "column": 1529
            }
          },
          "moduleName": "uiux/templates/stations/truck/departure.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("let truck leave");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1569
          }
        },
        "moduleName": "uiux/templates/stations/truck/departure.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading instruction-line");
        var el5 = dom.createElement("h4");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa capitalize");
        var el7 = dom.createTextNode("confirm truck departure");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4,"class","panel-body instruction-line");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("Before the truck can leave, it must be given an exit weighticket.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa");
        var el6 = dom.createTextNode("It is also possible to skip weighing truck and let it go as is.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-body instruction-line");
        var el5 = dom.createElement("ul");
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa capitalize bold colon");
        var el8 = dom.createTextNode("license plate");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa prespace");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa capitalize bold colon");
        var el8 = dom.createTextNode("appointment number");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa prespace");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa capitalize bold colon");
        var el8 = dom.createTextNode("arrived at");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa prespace");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa capitalize bold colon");
        var el8 = dom.createTextNode("docked at");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa prespace");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa capitalize bold colon");
        var el8 = dom.createTextNode("undocked at");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","fa prespace");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4,"class","panel-body instruction-line align-center");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","btn-group");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0]);
        var element1 = dom.childAt(element0, [2, 0]);
        var element2 = dom.childAt(element0, [3, 0]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [2, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [4, 1]),0,0);
        morphs[5] = dom.createMorphAt(element2,0,0);
        morphs[6] = dom.createMorphAt(element2,1,1);
        return morphs;
      },
      statements: [
        ["content","model.weighticket.licensePlate",["loc",[null,[1,543],[1,577]]]],
        ["content","model.appointment.permalink",["loc",[null,[1,683],[1,714]]]],
        ["inline","moment",[["get","model.arrivedAt",["loc",[null,[1,821],[1,836]]]]],[],["loc",[null,[1,812],[1,838]]]],
        ["inline","moment",[["get","model.dockedAt",["loc",[null,[1,944],[1,958]]]]],[],["loc",[null,[1,935],[1,960]]]],
        ["inline","moment",[["get","model.undockedAt",["loc",[null,[1,1068],[1,1084]]]]],[],["loc",[null,[1,1059],[1,1086]]]],
        ["block","link-to",["stations.truck.complete",["get","model.id",["loc",[null,[1,1221],[1,1229]]]]],["classNames","btn btn-success btn-hover btn-lg"],0,null,["loc",[null,[1,1184],[1,1364]]]],
        ["block","link-to",["stations.truck.exit",["get","model.id",["loc",[null,[1,1397],[1,1405]]]]],["classNames","btn btn-danger btn-hover btn-lg"],1,null,["loc",[null,[1,1364],[1,1541]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('uiux/templates/stations/truck/exit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 539
            },
            "end": {
              "line": 1,
              "column": 712
            }
          },
          "moduleName": "uiux/templates/stations/truck/exit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-sign-out");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("mark truck left");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 754
          }
        },
        "moduleName": "uiux/templates/stations/truck/exit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-xs-12");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel panel-default");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-heading instruction-line");
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","fa capitalize");
        var el6 = dom.createTextNode("the truck is leaving");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","panel-body instruction-line");
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("If relevant, print and give the driver the new weighticket if you created one.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Otherwise click to mark the truck has left site.");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","btn-group");
        var el6 = dom.createElement("a");
        dom.setAttribute(el6,"target","blank");
        dom.setAttribute(el6,"class","btn btn-success btn-hover btn-lg");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7,"class","fa fa-print");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","capitalize");
        var el8 = dom.createTextNode("print view");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 0, 0, 1, 2]);
        var element1 = dom.childAt(element0, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element1, 'href');
        morphs[1] = dom.createMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["attribute","href",["get","printTicketLink",["loc",[null,[1,392],[1,407]]]]],
        ["block","link-to",["stations.station",["get","truck.exitScale.id",["loc",[null,[1,569],[1,587]]]]],["classNames","btn btn-default btn-hover btn-lg"],0,null,["loc",[null,[1,539],[1,724]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('uiux/templates/stations/weighticket', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "uiux/templates/stations/weighticket.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('uiux/templates/stations/weighticket/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 478
            },
            "end": {
              "line": 1,
              "column": 655
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/edit.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("li");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa bold");
          var el3 = dom.createTextNode("dock no.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa bold colon");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa prespace");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [2]),0,0);
          return morphs;
        },
        statements: [
          ["content","barn.nameOrId",["loc",[null,[1,578],[1,595]]]],
          ["content","barn.status",["loc",[null,[1,628],[1,643]]]]
        ],
        locals: ["barn"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 705
            },
            "end": {
              "line": 1,
              "column": 839
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("print weight ticket");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 851
            },
            "end": {
              "line": 1,
              "column": 999
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/edit.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("give weight ticket to driver");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1029
          }
        },
        "moduleName": "uiux/templates/stations/weighticket/edit.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading instruction-line");
        var el4 = dom.createElement("i");
        dom.setAttribute(el4,"class","fa fa-check");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","fa");
        var el5 = dom.createTextNode("edit weight ticket for the truck");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-xs-12 col-sm-12 col-md-9 col-lg-6");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","hidden-xs hidden-sm col-md-3 col-lg-6");
        var el5 = dom.createElement("h4");
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa capitalize colon");
        var el7 = dom.createTextNode("selected dock");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","fa");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element1, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createUnsafeMorphAt(dom.childAt(element2, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [0, 1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]),0,0);
        morphs[3] = dom.createMorphAt(element4,0,0);
        morphs[4] = dom.createMorphAt(element4,1,1);
        return morphs;
      },
      statements: [
        ["inline","partial",["stations/station/weightickets/form"],[],["loc",[null,[1,257],[1,307]]]],
        ["content","model.dock.nameOrId",["loc",[null,[1,439],[1,462]]]],
        ["block","each",[["get","model.docks",["loc",[null,[1,486],[1,497]]]]],[],0,null,["loc",[null,[1,478],[1,664]]]],
        ["block","link-to",["stations.weighticket.print",["get","model.id",["loc",[null,[1,745],[1,753]]]]],["class","list-group-item instruction-line"],1,null,["loc",[null,[1,705],[1,851]]]],
        ["block","link-to",["stations.weighticket.trucks.new",["get","model.id",["loc",[null,[1,896],[1,904]]]]],["class","list-group-item instruction-line"],2,null,["loc",[null,[1,851],[1,1011]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/stations/weighticket/give-to-driver', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 57
            },
            "end": {
              "line": 1,
              "column": 263
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/give-to-driver.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("create a weight ticket for the truck");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 275
            },
            "end": {
              "line": 1,
              "column": 493
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/give-to-driver.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("print out the weighticket and instruction sheet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 907
            },
            "end": {
              "line": 1,
              "column": 1076
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/give-to-driver.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("report problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1106
          }
        },
        "moduleName": "uiux/templates/stations/weighticket/give-to-driver.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("give the ticket to the driver");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body instruction-line");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","capitalize");
        var el4 = dom.createTextNode("so the driver knows which loading dock to head to");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group");
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-success btn-hover btn-lg");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-check");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"class","capitalize");
        var el6 = dom.createTextNode("finish");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [2, 1]);
        var element3 = dom.childAt(element2, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element1,0,0);
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createElementMorph(element3);
        morphs[3] = dom.createMorphAt(element2,1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["stations.weighticket.edit",["get","model.id",["loc",[null,[1,96],[1,104]]]]],["classNames","list-group-item list-group-item-success instruction-line"],0,null,["loc",[null,[1,57],[1,275]]]],
        ["block","link-to",["stations.weighticket.print",["get","model.id",["loc",[null,[1,315],[1,323]]]]],["classNames","list-group-item list-group-item-success instruction-line"],1,null,["loc",[null,[1,275],[1,505]]]],
        ["element","action",["finish"],["on","click"],["loc",[null,[1,761],[1,791]]]],
        ["block","link-to",["stations.station.problem",["get","model.issuerId",["loc",[null,[1,945],[1,959]]]]],["class","btn btn-danger btn-hover btn-lg"],2,null,["loc",[null,[1,907],[1,1088]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('uiux/templates/stations/weighticket/print', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 80
            },
            "end": {
              "line": 1,
              "column": 286
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("create a weight ticket for the truck");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 348
            },
            "end": {
              "line": 1,
              "column": 476
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-cog fa-spin");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("print out the weighticket and this instruction sheet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 476
            },
            "end": {
              "line": 1,
              "column": 541
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("your weighticket isn't ready yet!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 595
            },
            "end": {
              "line": 1,
              "column": 745
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","col-lg-4 col-md-4 col-sm-6 col-xs-6");
          var el2 = dom.createElement("img");
          dom.setAttribute(el2,"class","thumbnail bound");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0, 0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'src');
          return morphs;
        },
        statements: [
          ["attribute","src",["get","picture.normal",["loc",[null,[1,698],[1,712]]]]]
        ],
        locals: ["picture"],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1380
            },
            "end": {
              "line": 1,
              "column": 1556
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"target","blank");
          dom.setAttribute(el1,"class","btn btn-success btn-hover btn-lg");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-print");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","capitalize");
          var el3 = dom.createTextNode("print view");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'href');
          return morphs;
        },
        statements: [
          ["attribute","href",["get","printTicketLink",["loc",[null,[1,1409],[1,1424]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1563
            },
            "end": {
              "line": 1,
              "column": 1730
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-caret-down");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("go next");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1742
            },
            "end": {
              "line": 1,
              "column": 1911
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("report problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1959
            },
            "end": {
              "line": 1,
              "column": 2107
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/print.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("give weight ticket to driver");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 2137
          }
        },
        "moduleName": "uiux/templates/stations/weighticket/print.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-xs-12");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel panel-default");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-heading instruction-line");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-body");
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","row");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","panel-body instruction-line");
        var el4 = dom.createElement("dl");
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("appointment number");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("appointment type");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("issuer");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("pounds");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("license plate");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("target dock");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("createdAt");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("appointment status");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dt");
        var el6 = dom.createTextNode("notes");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("dd");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","btn-group");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","list-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 0]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [0]);
        var element5 = dom.childAt(element3, [1]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [2, 0]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [3]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [5]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [7]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(element4, [9]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(element4, [11]),0,0);
        morphs[9] = dom.createMorphAt(dom.childAt(element4, [13]),0,0);
        morphs[10] = dom.createMorphAt(dom.childAt(element4, [15]),0,0);
        morphs[11] = dom.createMorphAt(dom.childAt(element4, [17]),0,0);
        morphs[12] = dom.createMorphAt(element5,0,0);
        morphs[13] = dom.createMorphAt(element5,1,1);
        morphs[14] = dom.createMorphAt(element5,2,2);
        morphs[15] = dom.createMorphAt(dom.childAt(element2, [4]),0,0);
        return morphs;
      },
      statements: [
        ["block","link-to",["stations.weighticket.edit",["get","model.id",["loc",[null,[1,119],[1,127]]]]],["classNames","list-group-item list-group-item-success instruction-line"],0,null,["loc",[null,[1,80],[1,298]]]],
        ["block","if",[["get","weighticket",["loc",[null,[1,354],[1,365]]]]],[],1,2,["loc",[null,[1,348],[1,548]]]],
        ["block","each",[["get","weighticket.pictures",["loc",[null,[1,603],[1,623]]]]],[],3,null,["loc",[null,[1,595],[1,754]]]],
        ["content","weighticket.appointment.permalink",["loc",[null,[1,842],[1,879]]]],
        ["content","weighticket.appointment.appointmentType",["loc",[null,[1,913],[1,956]]]],
        ["content","weighticket.issuer.nameOrId",["loc",[null,[1,980],[1,1011]]]],
        ["content","weighticket.pounds",["loc",[null,[1,1035],[1,1057]]]],
        ["content","weighticket.licensePlate",["loc",[null,[1,1088],[1,1116]]]],
        ["content","weighticket.dock.nameOrId",["loc",[null,[1,1145],[1,1174]]]],
        ["inline","moment",[["get","weighticket.createdAt",["loc",[null,[1,1210],[1,1231]]]]],[],["loc",[null,[1,1201],[1,1233]]]],
        ["content","weighticket.appointment.status",["loc",[null,[1,1269],[1,1303]]]],
        ["content","weighticket.notes",["loc",[null,[1,1326],[1,1347]]]],
        ["block","if",[["get","weighticket",["loc",[null,[1,1386],[1,1397]]]]],[],4,null,["loc",[null,[1,1380],[1,1563]]]],
        ["block","link-to",["stations.weighticket.trucks.new",["get","model.id",["loc",[null,[1,1608],[1,1616]]]]],["class","btn btn-primary btn-hover btn-lg"],5,null,["loc",[null,[1,1563],[1,1742]]]],
        ["block","link-to",["stations.station.problem",["get","model.issuerId",["loc",[null,[1,1780],[1,1794]]]]],["class","btn btn-danger btn-hover btn-lg"],6,null,["loc",[null,[1,1742],[1,1923]]]],
        ["block","link-to",["stations.weighticket.trucks.new",["get","model.id",["loc",[null,[1,2004],[1,2012]]]]],["class","list-group-item instruction-line"],7,null,["loc",[null,[1,1959],[1,2119]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('uiux/templates/stations/weighticket/trucks/new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 57
            },
            "end": {
              "line": 1,
              "column": 275
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/trucks/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("create a weight ticket for the truck");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 287
            },
            "end": {
              "line": 1,
              "column": 517
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/trucks/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","fa");
          var el2 = dom.createTextNode("print out the weighticket and instruction sheet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1068
            },
            "end": {
              "line": 1,
              "column": 1217
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/trucks/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createTextNode("the system has encountered the following errors");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","fa");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
          return morphs;
        },
        statements: [
          ["content","mistakes",["loc",[null,[1,1194],[1,1206]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1228
            },
            "end": {
              "line": 1,
              "column": 1309
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/trucks/new.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("dt");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("dd");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","mistake.key",["loc",[null,[1,1263],[1,1278]]]],
          ["content","mistake.value",["loc",[null,[1,1287],[1,1304]]]]
        ],
        locals: ["mistake"],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1346
            },
            "end": {
              "line": 1,
              "column": 1504
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/trucks/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("finish");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.5",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 1523
            },
            "end": {
              "line": 1,
              "column": 1697
            }
          },
          "moduleName": "uiux/templates/stations/weighticket/trucks/new.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-warning");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","capitalize");
          var el2 = dom.createTextNode("report problem");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.5",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 1727
          }
        },
        "moduleName": "uiux/templates/stations/weighticket/trucks/new.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","panel panel-default");
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-heading instruction-line");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","fa");
        var el4 = dom.createTextNode("give the ticket to the driver");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body instruction-line");
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","capitalize");
        var el4 = dom.createTextNode("so the driver knows which loading dock to head to");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dl");
        var el4 = dom.createElement("dt");
        var el5 = dom.createTextNode("truck entered at scale station");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        var el5 = dom.createTextNode("target dock");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        var el5 = dom.createTextNode("appointment number");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        var el5 = dom.createTextNode("weighticket id");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dt");
        var el5 = dom.createTextNode("arrivedAt");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("dd");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("dl");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","btn-group");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [0]);
        var element2 = dom.childAt(element0, [2]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [4]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(element1,0,0);
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [7]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [9]),0,0);
        morphs[7] = dom.createMorphAt(element2,2,2);
        morphs[8] = dom.createMorphAt(dom.childAt(element2, [3]),0,0);
        morphs[9] = dom.createMorphAt(element4,0,0);
        morphs[10] = dom.createMorphAt(element4,1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["stations.weighticket.edit",["get","model.weighticket.id",["loc",[null,[1,96],[1,116]]]]],["classNames","list-group-item list-group-item-success instruction-line"],0,null,["loc",[null,[1,57],[1,287]]]],
        ["block","link-to",["stations.weighticket.print",["get","model.weighticket.id",["loc",[null,[1,327],[1,347]]]]],["classNames","list-group-item list-group-item-success instruction-line"],1,null,["loc",[null,[1,287],[1,529]]]],
        ["content","model.entryScale.nameOrId",["loc",[null,[1,801],[1,830]]]],
        ["content","model.dock.nameOrId",["loc",[null,[1,859],[1,882]]]],
        ["content","model.appointment.permalink",["loc",[null,[1,918],[1,949]]]],
        ["content","model.weighticket.id",["loc",[null,[1,981],[1,1005]]]],
        ["inline","moment",[["get","model.arrivedAt",["loc",[null,[1,1041],[1,1056]]]]],[],["loc",[null,[1,1032],[1,1058]]]],
        ["block","if",[["get","mistakes",["loc",[null,[1,1074],[1,1082]]]]],[],2,null,["loc",[null,[1,1068],[1,1224]]]],
        ["block","each",[["get","mistakes",["loc",[null,[1,1236],[1,1244]]]]],[],3,null,["loc",[null,[1,1228],[1,1318]]]],
        ["block","promise-button",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,1370],[1,1375]]]]],[],[]],"classNames","btn btn-success btn-hover btn-lg","action","finish"],4,null,["loc",[null,[1,1346],[1,1523]]]],
        ["block","link-to",["stations.station.problem",["get","model.entryScale.id",["loc",[null,[1,1561],[1,1580]]]]],["class","btn btn-danger btn-hover btn-lg"],5,null,["loc",[null,[1,1523],[1,1709]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('uiux/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('uiux/tests/helpers/resolver', ['exports', 'ember/resolver', 'uiux/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('uiux/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('uiux/tests/helpers/start-app', ['exports', 'ember', 'uiux/app', 'uiux/config/environment'], function (exports, Ember, Application, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('uiux/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('uiux/tests/routes/manager/inventories/batch.jshint', function () {

  'use strict';

  module('JSHint - routes/manager/inventories');
  test('routes/manager/inventories/batch.js should pass jshint', function() { 
    ok(true, 'routes/manager/inventories/batch.js should pass jshint.'); 
  });

});
define('uiux/tests/test-helper', ['uiux/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('uiux/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('uiux/tests/utils/data-uri-to-jpg-blob.jshint', function () {

  'use strict';

  module('JSHint - utils');
  test('utils/data-uri-to-jpg-blob.js should pass jshint', function() { 
    ok(true, 'utils/data-uri-to-jpg-blob.js should pass jshint.'); 
  });

});
define('uiux/transforms/array', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  var ArrayTransform;

  ArrayTransform = DS['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return serialized;
    },
    serialize: function serialize(deserialized) {
      return deserialized;
    }
  });

  exports['default'] = ArrayTransform;

});
define('uiux/transforms/data-uri', ['exports', 'ember-data', 'uiux/utils/data-uri-to-jpg-blob'], function (exports, DS, dataUriToJpgBlob) {

  'use strict';

  var DataUriTransform;

  DataUriTransform = DS['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      throw new Error("We should never have to deserialize files from the server");
    },
    serialize: function serialize(deserialized) {
      return dataUriToJpgBlob['default'](deserialized);
    }
  });

  exports['default'] = DataUriTransform;

});
define('uiux/transforms/moment', ['exports', 'ember-data', 'moment'], function (exports, DS, moment) {

  'use strict';

  var MomentTransform;

  MomentTransform = DS['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return moment['default'](serialized);
    },
    serialize: function serialize(deserialized) {
      return deserialized != null ? deserialized.toDate() : void 0;
    }
  });

  exports['default'] = MomentTransform;

});
define('uiux/utils/controller-pen', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ControllerPen, freeMsg, negMsg;

  freeMsg = function (ctrl) {
    return "You tried to free " + ctrl + ", but it was never enslaved in the controller pen in the first place";
  };

  negMsg = "You tried to free more controllers than you had, this is likely an oversight on your part";

  ControllerPen = Ember['default'].Object.extend({
    init: function init() {
      this.busyControllers = 0;
      return this.ctrlCenter = new Ember['default'].Map();
    },
    isBusy: Ember['default'].computed.not("isFree"),
    isFree: Ember['default'].computed.equal("busyControllers", 0),
    makeBusy: function makeBusy(ctrl) {
      if (this.ctrlCenter.get(ctrl) === "busy") {
        return;
      }
      this.ctrlCenter.set(ctrl, "busy");
      return this.incrementProperty("busyControllers", 1);
    },
    makeFree: function makeFree(ctrl) {
      if (!this.ctrlCenter.has(ctrl)) {
        throw new Error(freeMsg(ctrl));
      }
      if (this.ctrlCenter.get(ctrl) === "free") {
        return;
      }
      this.ctrlCenter.set(ctrl, "free");
      this.decrementProperty("busyControllers", 1);
      if (this.get("busyControllers") < 0) {
        throw new Error(negMsg);
      }
    }
  });

  exports['default'] = ControllerPen;

});
define('uiux/utils/data-uri-to-jpg-blob', ['exports'], function (exports) {

  'use strict';

  function dataUriToJpgBlog(dataURL) {
    // Decode the dataURL   
    var binary = atob(dataURL.split(',')[1]);
    // Create 8-bit unsigned array
    var array = [];
    for (var i = 0; i < binary.length; i++) {
      array.push(binary.charCodeAt(i));
    }
    // Return our Blob object
    return new Blob([new Uint8Array(array)], { type: 'image/jpg' });
  }

  exports['default'] = dataUriToJpgBlog;

});
define('uiux/utils/debug-ex', ['exports'], function (exports) {

  'use strict';

  var DebugEx;

  DebugEx = (function () {
    function DebugEx() {}

    DebugEx.l = function (x) {
      console.log(x);
      return x;
    };

    return DebugEx;
  })();

  exports['default'] = DebugEx;

});
define('uiux/utils/punch-card', ['exports', 'moment', 'uiux/utils/debug-ex'], function (exports, moment, D) {

  'use strict';

  var PunchCard, finishOfWorkday, startOfWorkday, withinWorkingHours;

  startOfWorkday = function (m) {
    var r;
    if (m != null) {
      r = moment['default'](m);
    }
    if (r == null) {
      r = moment['default']();
    }
    return r.startOf("day").add(6, "hours");
  };

  finishOfWorkday = function (m) {
    return startOfWorkday(m).add(14, "hours");
  };

  withinWorkingHours = function (m) {
    return startOfWorkday(m) < m && m < finishOfWorkday(m);
  };

  PunchCard = (function () {
    function PunchCard() {}

    PunchCard.startOfWorkday = startOfWorkday;

    PunchCard.finishOfWorkday = finishOfWorkday;

    PunchCard.withinWorkingHours = withinWorkingHours;

    return PunchCard;
  })();

  exports['default'] = PunchCard;

  exports.startOfWorkday = startOfWorkday;
  exports.finishOfWorkday = finishOfWorkday;
  exports.withinWorkingHours = withinWorkingHours;

});
define('uiux/utils/s3', ['exports', 'ember', 'uiux/utils/data-uri-to-jpg-blob'], function (exports, Ember, dataUriToJpgBlog) {

  'use strict';

  var S3, buildParams, makeBucket;

  S3 = (function () {
    function S3() {}

    S3.accessKeyId = 'AKIAINYEM24JX5TX33LA';

    S3.secretAccessKey = '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';

    S3.region = 'us-east-1';

    S3.namespace = 'charlie-bravo';

    return S3;
  })();

  makeBucket = function () {
    return new S3.Bucket(S3);
  };

  buildParams = function (pic) {
    var file;
    file = dataUriToJpgBlog['default'](pic.get("file"));
    return {
      ACL: "public-read-write",
      StorageClass: "REDUCED_REDUNDANCY",
      Key: "catsome-key-56546.jpg",
      Body: file,
      ContentType: file.type
    };
  };

  S3.Bucket = (function () {
    Bucket.makeBucket = makeBucket;

    function Bucket(arg) {
      var accessKeyId, region, secretAccessKey;
      accessKeyId = arg.accessKeyId, secretAccessKey = arg.secretAccessKey, region = arg.region;
      AWS.config.update({
        accessKeyId: accessKeyId,
        secretAccessKey: secretAccessKey
      });
      AWS.config.region = region;
      this.bucket = new AWS.S3({
        params: {
          Bucket: "simwms"
        }
      });
    }

    Bucket.prototype.upload = function (pic) {
      var params;
      params = buildParams(pic);
      return new Ember['default'].RSVP.Promise((function (_this) {
        return function (resolve, reject) {
          return _this.bucket.upload(params, function (err, data) {
            if (err) {
              return reject(data);
            } else {
              data.key = params["Key"];
              console.log(data);
              return resolve(data);
            }
          });
        };
      })(this));
    };

    return Bucket;
  })();

  exports['default'] = S3;

  exports.makeBucket = makeBucket;

});
define('uiux/validators/appointment', ['exports', 'ember', 'ember-functional-validation'], function (exports, Ember, FunctionalValidation) {

  'use strict';

  var appointmentValidator, get, validateDate;

  get = Ember['default'].get;

  validateDate = function (model) {
    var date;
    date = get(model, "expectedAt").toDate();
    if (!(date instanceof Date)) {
      return date + " is not an instance of Date";
    }
    if (date.toString().match(/invalid date/i)) {
      return date + " is not a valid date";
    }
  };

  appointmentValidator = FunctionalValidation['default'].create({
    company: {
      presence: true
    },
    materialDescription: {
      presence: true
    },
    expectedAt: {
      presence: true,
      custom: validateDate
    }
  });

  exports['default'] = appointmentValidator;

});
define('uiux/validators/batch', ['exports', 'ember', 'ember-functional-validation'], function (exports, Ember, FunctionalValidation) {

  'use strict';

  var batchValidator, ensurePersistence;

  ensurePersistence = function (model) {
    var appointment, store;
    store = model.store;
    appointment = Ember['default'].get(model, "appointment");
    if (Ember['default'].isPresent(appointment)) {
      return;
    }
    return "no appointment found";
  };

  batchValidator = FunctionalValidation['default'].create({
    appointment: {
      presence: true,
      custom: ensurePersistence
    }
  });

  exports['default'] = batchValidator;

});
define('uiux/validators/truck', ['exports', 'ember', 'ember-functional-validation'], function (exports, Ember, FunctionalValidation) {

  'use strict';

  var ensureDestiny, ensureOrigin, ensurePersistence, ensureWeighticket, promiseLift, truckValidator;

  promiseLift = function (maybePromise) {
    if (maybePromise != null && maybePromise.then != null && typeof maybePromise.then === "function") {
      return maybePromise;
    }
    return new Ember['default'].RSVP.Promise(function (resolve) {
      return resolve(maybePromise);
    });
  };

  ensurePersistence = function (model, attribute) {
    return promiseLift(Ember['default'].get(model, attribute)).then(function (maybeModel) {
      if (maybeModel == null) {
        return "Your " + attribute + " does not exist";
      }
    })["catch"](function (errors) {
      return "Your " + attribute + " could not be found:\n  " + JSON.stringify(errors);
    });
  };

  ensureWeighticket = function (model) {
    return ensurePersistence(model, "weighticket");
  };

  ensureOrigin = function (model) {
    return ensurePersistence(model, "origin");
  };

  ensureDestiny = function (model) {
    return ensurePersistence(model, "destiny");
  };

  truckValidator = FunctionalValidation['default'].create({
    status: {
      presence: true
    },
    arrivedAt: {
      presence: true
    },
    origination: {
      presence: true
    },
    origintype: {
      presence: true
    },
    destination: {
      presence: true
    },
    destinytype: {
      presence: true
    },
    weighticketId: {
      presence: true
    },
    weighticket: {
      custom: ensureWeighticket
    },
    origin: {
      custom: ensureOrigin
    },
    destiny: {
      custom: ensureDestiny
    }
  });

  exports['default'] = truckValidator;

});
define('uiux/validators/weighticket', ['exports', 'ember', 'ember-functional-validation'], function (exports, Ember, FunctionalValidation) {

  'use strict';

  var ensureFreeDock, ensureRealAppointment, weighticketValidator;

  ensureRealAppointment = function (model) {
    var appointment, store;
    store = model.store;
    if ((appointment = model.get("appointment")) != null) {
      return;
    }
    return "the appointment number: " + appno + " doesn't exist";
  };

  ensureFreeDock = function (model) {
    var dock, store;
    store = model.store;
    dock = model.get("dock");
    if (dock == null) {
      return "the dock number: " + dock.get('nameOrId') + " doesn't exist";
    }
    if (!dock.get("isFree")) {
      return "the dock number: " + dock.get('nameOrId') + " is not free, please select another dock";
    }
  };

  weighticketValidator = FunctionalValidation['default'].create({
    appointment: {
      presence: true,
      custom: ensureRealAppointment
    },
    pounds: {
      presence: true
    },
    licensePlate: {
      presence: true
    },
    dock: {
      presence: true,
      custom: ensureFreeDock
    }
  });

  exports['default'] = weighticketValidator;

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('uiux/config/environment', ['ember'], function(Ember) {
  var prefix = 'uiux';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("uiux/tests/test-helper");
} else {
  require("uiux/app")["default"].create({"name":"uiux","version":"0.0.0+4386f3fd"});
}

/* jshint ignore:end */
//# sourceMappingURL=uiux.map